--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.6
-- Dumped by pg_dump version 9.3.9
-- Started on 2015-07-04 23:04:50 EEST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 6 (class 2615 OID 16386)
-- Name: billing; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA billing;


ALTER SCHEMA billing OWNER TO yeti;

--
-- TOC entry 7 (class 2615 OID 16387)
-- Name: class4; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA class4;


ALTER SCHEMA class4 OWNER TO yeti;

--
-- TOC entry 8 (class 2615 OID 16388)
-- Name: data_import; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA data_import;


ALTER SCHEMA data_import OWNER TO yeti;

--
-- TOC entry 9 (class 2615 OID 16389)
-- Name: gui; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA gui;


ALTER SCHEMA gui OWNER TO yeti;

--
-- TOC entry 10 (class 2615 OID 16390)
-- Name: logs; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA logs;


ALTER SCHEMA logs OWNER TO yeti;

--
-- TOC entry 20 (class 2615 OID 23292)
-- Name: notifications; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA notifications;


ALTER SCHEMA notifications OWNER TO yeti;

--
-- TOC entry 497 (class 3079 OID 24440)
-- Name: pgq; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgq WITH SCHEMA pg_catalog;


--
-- TOC entry 4727 (class 0 OID 0)
-- Dependencies: 497
-- Name: EXTENSION pgq; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgq IS 'Generic queue for PostgreSQL';


--
-- TOC entry 496 (class 3079 OID 24594)
-- Name: pgq_ext; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgq_ext WITH SCHEMA pg_catalog;


--
-- TOC entry 4728 (class 0 OID 0)
-- Dependencies: 496
-- Name: EXTENSION pgq_ext; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgq_ext IS 'Target-side batch tracking infrastructure';


--
-- TOC entry 11 (class 2615 OID 16391)
-- Name: reports; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA reports;


ALTER SCHEMA reports OWNER TO yeti;

--
-- TOC entry 12 (class 2615 OID 16392)
-- Name: runtime_stats; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA runtime_stats;


ALTER SCHEMA runtime_stats OWNER TO yeti;

--
-- TOC entry 15 (class 2615 OID 19572)
-- Name: switch2; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch2;


ALTER SCHEMA switch2 OWNER TO yeti;

--
-- TOC entry 16 (class 2615 OID 20100)
-- Name: switch3; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch3;


ALTER SCHEMA switch3 OWNER TO yeti;

--
-- TOC entry 17 (class 2615 OID 20459)
-- Name: switch4; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch4;


ALTER SCHEMA switch4 OWNER TO yeti;

--
-- TOC entry 18 (class 2615 OID 21145)
-- Name: switch5; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch5;


ALTER SCHEMA switch5 OWNER TO yeti;

--
-- TOC entry 19 (class 2615 OID 22943)
-- Name: switch6; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch6;


ALTER SCHEMA switch6 OWNER TO yeti;

--
-- TOC entry 21 (class 2615 OID 23342)
-- Name: switch7; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch7;


ALTER SCHEMA switch7 OWNER TO yeti;

--
-- TOC entry 22 (class 2615 OID 23749)
-- Name: switch8; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA switch8;


ALTER SCHEMA switch8 OWNER TO yeti;

--
-- TOC entry 13 (class 2615 OID 16394)
-- Name: sys; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA sys;


ALTER SCHEMA sys OWNER TO yeti;

--
-- TOC entry 23 (class 2615 OID 24142)
-- Name: yeti_ext; Type: SCHEMA; Schema: -; Owner: yeti
--

CREATE SCHEMA yeti_ext;


ALTER SCHEMA yeti_ext OWNER TO yeti;

--
-- TOC entry 498 (class 3079 OID 11756)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 4731 (class 0 OID 0)
-- Dependencies: 498
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 503 (class 3079 OID 16395)
-- Name: btree_gist; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS btree_gist WITH SCHEMA public;


--
-- TOC entry 4732 (class 0 OID 0)
-- Dependencies: 503
-- Name: EXTENSION btree_gist; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION btree_gist IS 'support for indexing common datatypes in GiST';


--
-- TOC entry 502 (class 3079 OID 16917)
-- Name: dblink; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS dblink WITH SCHEMA public;


--
-- TOC entry 4733 (class 0 OID 0)
-- Dependencies: 502
-- Name: EXTENSION dblink; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dblink IS 'connect to other PostgreSQL databases from within a database';


--
-- TOC entry 501 (class 3079 OID 16963)
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- TOC entry 4734 (class 0 OID 0)
-- Dependencies: 501
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- TOC entry 499 (class 3079 OID 23197)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 4735 (class 0 OID 0)
-- Dependencies: 499
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 500 (class 3079 OID 17083)
-- Name: prefix; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS prefix WITH SCHEMA public;


--
-- TOC entry 4736 (class 0 OID 0)
-- Dependencies: 500
-- Name: EXTENSION prefix; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION prefix IS 'Prefix Range module for PostgreSQL';


--
-- TOC entry 504 (class 3079 OID 24306)
-- Name: yeti; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS yeti WITH SCHEMA yeti_ext;


--
-- TOC entry 4737 (class 0 OID 0)
-- Dependencies: 504
-- Name: EXTENSION yeti; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION yeti IS 'helper functions for YETI project';


SET search_path = billing, pg_catalog;

--
-- TOC entry 1915 (class 1247 OID 18716)
-- Name: cdr_v1; Type: TYPE; Schema: billing; Owner: yeti
--

CREATE TYPE cdr_v1 AS (
	id bigint,
	customer_id integer,
	vendor_id integer,
	customer_acc_id integer,
	vendor_acc_id integer,
	customer_auth_id integer,
	destination_id integer,
	dialpeer_id integer,
	orig_gw_id integer,
	term_gw_id integer,
	routing_group_id integer,
	rateplan_id integer,
	destination_next_rate numeric,
	destination_fee numeric,
	dialpeer_next_rate numeric,
	dialpeer_fee numeric,
	time_limit character varying,
	internal_disconnect_code integer,
	internal_disconnect_reason character varying,
	disconnect_initiator_id integer,
	customer_price numeric,
	vendor_price numeric,
	duration integer,
	success boolean,
	vendor_billed boolean,
	customer_billed boolean,
	profit numeric,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	time_start timestamp without time zone,
	time_connect timestamp without time zone,
	time_end timestamp without time zone,
	sign_orig_ip character varying,
	sign_orig_port integer,
	sign_orig_local_ip character varying,
	sign_orig_local_port integer,
	sign_term_ip character varying,
	sign_term_port integer,
	sign_term_local_ip character varying,
	sign_term_local_port integer,
	orig_call_id character varying,
	term_call_id character varying,
	vendor_invoice_id integer,
	customer_invoice_id integer,
	local_tag character varying,
	dump_file character varying,
	destination_initial_rate numeric,
	dialpeer_initial_rate numeric,
	destination_initial_interval integer,
	destination_next_interval integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	destination_rate_policy_id integer,
	routing_attempt integer,
	is_last_cdr boolean,
	lega_disconnect_code integer,
	lega_disconnect_reason character varying,
	pop_id integer,
	node_id integer,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	lega_rx_payloads character varying,
	lega_tx_payloads character varying,
	legb_rx_payloads character varying,
	legb_tx_payloads character varying,
	legb_disconnect_code integer,
	legb_disconnect_reason character varying,
	dump_level_id integer,
	auth_orig_ip inet,
	auth_orig_port integer,
	lega_rx_bytes integer,
	lega_tx_bytes integer,
	legb_rx_bytes integer,
	legb_tx_bytes integer,
	global_tag character varying
);


ALTER TYPE billing.cdr_v1 OWNER TO yeti;

--
-- TOC entry 1970 (class 1247 OID 19117)
-- Name: cdr_v2; Type: TYPE; Schema: billing; Owner: yeti
--

CREATE TYPE cdr_v2 AS (
	id bigint,
	customer_id integer,
	vendor_id integer,
	customer_acc_id integer,
	vendor_acc_id integer,
	customer_auth_id integer,
	destination_id integer,
	dialpeer_id integer,
	orig_gw_id integer,
	term_gw_id integer,
	routing_group_id integer,
	rateplan_id integer,
	destination_next_rate numeric,
	destination_fee numeric,
	dialpeer_next_rate numeric,
	dialpeer_fee numeric,
	internal_disconnect_code integer,
	internal_disconnect_reason character varying,
	disconnect_initiator_id integer,
	customer_price numeric,
	vendor_price numeric,
	duration integer,
	success boolean,
	profit numeric,
	time_start timestamp without time zone,
	time_connect timestamp without time zone,
	time_end timestamp without time zone,
	lega_disconnect_code integer,
	lega_disconnect_reason character varying,
	legb_disconnect_code integer,
	legb_disconnect_reason character varying
);


ALTER TYPE billing.cdr_v2 OWNER TO yeti;

SET search_path = switch2, pg_catalog;

--
-- TOC entry 1581 (class 1247 OID 19575)
-- Name: callprofile34_ty; Type: TYPE; Schema: switch2; Owner: yeti
--

CREATE TYPE callprofile34_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_force_symmetric_rtp boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	prefer_existing_codecs_aleg character varying,
	transcoder_codecs character varying,
	callee_codeccaps character varying,
	enable_transcoder character varying,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	prefer_transcoding_for_codecs character varying,
	prefer_transcoding_for_codecs_aleg character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_rtprelay_force_symmetric_rtp boolean,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer
);


ALTER TYPE switch2.callprofile34_ty OWNER TO yeti;

--
-- TOC entry 1584 (class 1247 OID 19578)
-- Name: callprofile35_ty; Type: TYPE; Schema: switch2; Owner: yeti
--

CREATE TYPE callprofile35_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer
);


ALTER TYPE switch2.callprofile35_ty OWNER TO yeti;

--
-- TOC entry 1587 (class 1247 OID 19581)
-- Name: callprofile36_ty; Type: TYPE; Schema: switch2; Owner: yeti
--

CREATE TYPE callprofile36_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer
);


ALTER TYPE switch2.callprofile36_ty OWNER TO yeti;

--
-- TOC entry 1590 (class 1247 OID 19584)
-- Name: callprofile37_ty; Type: TYPE; Schema: switch2; Owner: yeti
--

CREATE TYPE callprofile37_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch2.callprofile37_ty OWNER TO yeti;

SET search_path = switch3, pg_catalog;

--
-- TOC entry 1989 (class 1247 OID 20103)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch3; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch3.callprofile38_ty OWNER TO yeti;

SET search_path = switch4, pg_catalog;

--
-- TOC entry 2033 (class 1247 OID 20462)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch4; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch4.callprofile38_ty OWNER TO yeti;

--
-- TOC entry 1641 (class 1247 OID 20656)
-- Name: callprofile39_ty; Type: TYPE; Schema: switch4; Owner: yeti
--

CREATE TYPE callprofile39_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch4.callprofile39_ty OWNER TO yeti;

--
-- TOC entry 1644 (class 1247 OID 20698)
-- Name: callprofile40_ty; Type: TYPE; Schema: switch4; Owner: yeti
--

CREATE TYPE callprofile40_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch4.callprofile40_ty OWNER TO yeti;

SET search_path = switch5, pg_catalog;

--
-- TOC entry 1941 (class 1247 OID 21148)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch5; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch5.callprofile38_ty OWNER TO yeti;

--
-- TOC entry 1944 (class 1247 OID 21151)
-- Name: callprofile39_ty; Type: TYPE; Schema: switch5; Owner: yeti
--

CREATE TYPE callprofile39_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch5.callprofile39_ty OWNER TO yeti;

--
-- TOC entry 1947 (class 1247 OID 21154)
-- Name: callprofile40_ty; Type: TYPE; Schema: switch5; Owner: yeti
--

CREATE TYPE callprofile40_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch5.callprofile40_ty OWNER TO yeti;

SET search_path = switch6, pg_catalog;

--
-- TOC entry 2111 (class 1247 OID 22946)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch6; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch6.callprofile38_ty OWNER TO yeti;

--
-- TOC entry 2114 (class 1247 OID 22949)
-- Name: callprofile39_ty; Type: TYPE; Schema: switch6; Owner: yeti
--

CREATE TYPE callprofile39_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch6.callprofile39_ty OWNER TO yeti;

--
-- TOC entry 2117 (class 1247 OID 22952)
-- Name: callprofile40_ty; Type: TYPE; Schema: switch6; Owner: yeti
--

CREATE TYPE callprofile40_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch6.callprofile40_ty OWNER TO yeti;

--
-- TOC entry 2121 (class 1247 OID 22955)
-- Name: callprofile41_ty; Type: TYPE; Schema: switch6; Owner: yeti
--

CREATE TYPE callprofile41_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch6.callprofile41_ty OWNER TO yeti;

SET search_path = switch7, pg_catalog;

--
-- TOC entry 2078 (class 1247 OID 23345)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch7; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch7.callprofile38_ty OWNER TO yeti;

--
-- TOC entry 2081 (class 1247 OID 23348)
-- Name: callprofile39_ty; Type: TYPE; Schema: switch7; Owner: yeti
--

CREATE TYPE callprofile39_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch7.callprofile39_ty OWNER TO yeti;

--
-- TOC entry 2084 (class 1247 OID 23351)
-- Name: callprofile40_ty; Type: TYPE; Schema: switch7; Owner: yeti
--

CREATE TYPE callprofile40_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch7.callprofile40_ty OWNER TO yeti;

--
-- TOC entry 2087 (class 1247 OID 23354)
-- Name: callprofile41_ty; Type: TYPE; Schema: switch7; Owner: yeti
--

CREATE TYPE callprofile41_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch7.callprofile41_ty OWNER TO yeti;

--
-- TOC entry 2176 (class 1247 OID 23466)
-- Name: callprofile42_ty; Type: TYPE; Schema: switch7; Owner: yeti
--

CREATE TYPE callprofile42_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	aleg_relay_reinvite boolean,
	bleg_relay_reinvite boolean,
	aleg_relay_hold boolean,
	bleg_relay_hold boolean,
	aleg_relay_prack boolean,
	bleg_relay_prack boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	dead_rtp_time integer,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch7.callprofile42_ty OWNER TO yeti;

SET search_path = switch8, pg_catalog;

--
-- TOC entry 2192 (class 1247 OID 23752)
-- Name: callprofile38_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile38_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer
);


ALTER TYPE switch8.callprofile38_ty OWNER TO yeti;

--
-- TOC entry 2195 (class 1247 OID 23755)
-- Name: callprofile39_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile39_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch8.callprofile39_ty OWNER TO yeti;

--
-- TOC entry 2198 (class 1247 OID 23758)
-- Name: callprofile40_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile40_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch8.callprofile40_ty OWNER TO yeti;

--
-- TOC entry 2201 (class 1247 OID 23761)
-- Name: callprofile41_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile41_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	relay_reinvite boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	relay_hold boolean,
	dead_rtp_time integer,
	relay_prack boolean,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch8.callprofile41_ty OWNER TO yeti;

--
-- TOC entry 2204 (class 1247 OID 23764)
-- Name: callprofile42_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile42_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	aleg_relay_reinvite boolean,
	bleg_relay_reinvite boolean,
	aleg_relay_hold boolean,
	bleg_relay_hold boolean,
	aleg_relay_prack boolean,
	bleg_relay_prack boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	dead_rtp_time integer,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	dialpeer_id character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer
);


ALTER TYPE switch8.callprofile42_ty OWNER TO yeti;

--
-- TOC entry 2232 (class 1247 OID 23878)
-- Name: callprofile43_ty; Type: TYPE; Schema: switch8; Owner: yeti
--

CREATE TYPE callprofile43_ty AS (
	ruri character varying,
	ruri_host character varying,
	"from" character varying,
	"to" character varying,
	call_id character varying,
	transparent_dlg_id boolean,
	dlg_nat_handling boolean,
	force_outbound_proxy boolean,
	outbound_proxy character varying,
	aleg_force_outbound_proxy boolean,
	aleg_outbound_proxy character varying,
	next_hop character varying,
	next_hop_1st_req boolean,
	aleg_next_hop character varying,
	header_filter_type_id integer,
	header_filter_list character varying,
	message_filter_type_id integer,
	message_filter_list character varying,
	anonymize_sdp boolean,
	sdp_filter_type_id integer,
	sdp_filter_list character varying,
	sdp_alines_filter_type_id integer,
	sdp_alines_filter_list character varying,
	enable_session_timer boolean,
	enable_aleg_session_timer boolean,
	session_expires integer,
	minimum_timer integer,
	maximum_timer integer,
	session_refresh_method_id integer,
	accept_501_reply character varying,
	aleg_session_expires integer,
	aleg_minimum_timer integer,
	aleg_maximum_timer integer,
	aleg_session_refresh_method_id integer,
	aleg_accept_501_reply character varying,
	enable_auth boolean,
	auth_user character varying,
	auth_pwd character varying,
	enable_aleg_auth boolean,
	auth_aleg_user character varying,
	auth_aleg_pwd character varying,
	append_headers character varying,
	append_headers_req character varying,
	aleg_append_headers_req character varying,
	disconnect_code_id integer,
	enable_rtprelay boolean,
	rtprelay_msgflags_symmetric_rtp boolean,
	rtprelay_interface character varying,
	aleg_rtprelay_interface character varying,
	rtprelay_transparent_seqno boolean,
	rtprelay_transparent_ssrc boolean,
	outbound_interface character varying,
	aleg_outbound_interface character varying,
	contact_displayname character varying,
	contact_user character varying,
	contact_host character varying,
	contact_port smallint,
	enable_contact_hiding boolean,
	contact_hiding_prefix character varying,
	contact_hiding_vars character varying,
	try_avoid_transcoding boolean,
	rtprelay_dtmf_filtering boolean,
	rtprelay_dtmf_detection boolean,
	dtmf_transcoding character varying,
	lowfi_codecs character varying,
	dump_level_id integer,
	enable_reg_caching boolean,
	min_reg_expires integer,
	max_ua_expires integer,
	time_limit integer,
	resources character varying,
	cache_time integer,
	reply_translations character varying,
	aleg_policy_id integer,
	bleg_policy_id integer,
	aleg_codecs_group_id integer,
	bleg_codecs_group_id integer,
	aleg_single_codec_in_200ok boolean,
	bleg_single_codec_in_200ok boolean,
	ringing_timeout integer,
	global_tag character varying,
	patch_ruri_next_hop boolean,
	rtprelay_force_dtmf_relay boolean,
	aleg_force_symmetric_rtp boolean,
	bleg_force_symmetric_rtp boolean,
	aleg_symmetric_rtp_nonstop boolean,
	bleg_symmetric_rtp_nonstop boolean,
	aleg_symmetric_rtp_ignore_rtcp boolean,
	bleg_symmetric_rtp_ignore_rtcp boolean,
	aleg_rtp_ping boolean,
	bleg_rtp_ping boolean,
	aleg_relay_options boolean,
	bleg_relay_options boolean,
	filter_noaudio_streams boolean,
	aleg_relay_reinvite boolean,
	bleg_relay_reinvite boolean,
	aleg_relay_hold boolean,
	bleg_relay_hold boolean,
	aleg_relay_prack boolean,
	bleg_relay_prack boolean,
	aleg_sdp_c_location_id integer,
	bleg_sdp_c_location_id integer,
	trusted_hdrs_gw boolean,
	aleg_append_headers_reply character varying,
	bleg_sdp_alines_filter_list character varying,
	bleg_sdp_alines_filter_type_id integer,
	dead_rtp_time integer,
	rtp_relay_timestamp_aligning boolean,
	allow_1xx_wo2tag boolean,
	invite_timeout integer,
	srv_failover_timeout integer,
	rtp_force_relay_cn boolean,
	aleg_sensor_id smallint,
	aleg_sensor_level_id smallint,
	bleg_sensor_id smallint,
	bleg_sensor_level_id smallint,
	aleg_dtmf_send_mode_id integer,
	bleg_dtmf_send_mode_id integer,
	aleg_dtmf_recv_modes integer,
	bleg_dtmf_recv_modes integer,
	suppress_early_media boolean,
	aleg_relay_update boolean,
	bleg_relay_update boolean,
	customer_id character varying,
	vendor_id character varying,
	customer_acc_id character varying,
	vendor_acc_id character varying,
	customer_auth_id character varying,
	destination_id character varying,
	destination_prefix character varying,
	dialpeer_id character varying,
	dialpeer_prefix character varying,
	orig_gw_id character varying,
	term_gw_id character varying,
	routing_group_id character varying,
	rateplan_id character varying,
	destination_initial_rate character varying,
	destination_next_rate character varying,
	destination_initial_interval integer,
	destination_next_interval integer,
	destination_rate_policy_id integer,
	dialpeer_initial_interval integer,
	dialpeer_next_interval integer,
	dialpeer_next_rate character varying,
	destination_fee character varying,
	dialpeer_initial_rate character varying,
	dialpeer_fee character varying,
	dst_prefix_in character varying,
	dst_prefix_out character varying,
	src_prefix_in character varying,
	src_prefix_out character varying,
	src_name_in character varying,
	src_name_out character varying,
	diversion_in character varying,
	diversion_out character varying,
	auth_orig_ip inet,
	auth_orig_port integer,
	dst_country_id integer,
	dst_network_id integer,
	dst_prefix_routing character varying,
	src_prefix_routing character varying,
	routing_plan_id integer,
	lrn character varying,
	lnp_database_id smallint
);


ALTER TYPE switch8.callprofile43_ty OWNER TO yeti;

SET search_path = billing, pg_catalog;

--
-- TOC entry 863 (class 1255 OID 19120)
-- Name: bill_cdr(cdr_v2); Type: FUNCTION; Schema: billing; Owner: yeti
--

CREATE FUNCTION bill_cdr(i_cdr cdr_v2) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER COST 10
    AS $$
DECLARE
BEGIN
    UPDATE billing.accounts SET balance=balance+i_cdr.vendor_price WHERE id=i_cdr.vendor_acc_id;
    UPDATE billing.accounts SET balance=balance-i_cdr.customer_price WHERE id=i_cdr.customer_acc_id;
    return;
END;
$$;


ALTER FUNCTION billing.bill_cdr(i_cdr cdr_v2) OWNER TO yeti;

--
-- TOC entry 876 (class 1255 OID 19112)
-- Name: bill_cdr_batch(bigint, text, integer); Type: FUNCTION; Schema: billing; Owner: yeti
--

CREATE FUNCTION bill_cdr_batch(i_batch_id bigint, i_data text, i_data_version integer DEFAULT 2) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER COST 10
    AS $$
DECLARE
    v_batch_data billing.cdr_v2;
    v_batch_id bigint;
    _j_data json;
BEGIN
    begin
        _j_data:=i_data::json;
    exception
        when others then
            RAISE exception 'billing.bill_cdr_batch: Invalid json payload';
    end;
    
    BEGIN
        insert into billing.cdr_batches(id,size,raw_data) values( i_batch_id, json_array_length(_j_data),i_data) returning id into v_batch_id;
    exception
        WHEN unique_violation then
            RAISE WARNING 'billing.bill_cdr_batch:  Data batch % already billed. Skip it.',i_batch_id;
            return; -- batch already processed;
    end ;

    if i_data_version=2 then
        --- ok;
    else
        RAISE EXCEPTION 'billing.bill_cdr_batch: No logic for this data version';
    end if;
    
    for v_batch_data IN select * from json_populate_recordset(null::billing.cdr_v2,_j_data) LOOP
        if v_batch_data.customer_price >0  or v_batch_data.vendor_price>0 then
            perform billing.bill_cdr(v_batch_data);
        end if;
        -- update runtime statistics

        perform runtime_stats.update_dp(v_batch_data.destination_id,v_batch_data.dialpeer_id,
            v_batch_data.success,v_batch_data.duration
            );
            
        perform runtime_stats.update_gw(v_batch_data.orig_gw_id,v_batch_data.term_gw_id,
            v_batch_data.success,v_batch_data.duration
            );
        
       
    end LOOp;
END;
$$;


ALTER FUNCTION billing.bill_cdr_batch(i_batch_id bigint, i_data text, i_data_version integer) OWNER TO yeti;

--
-- TOC entry 860 (class 1255 OID 19114)
-- Name: clean_cdr_batch(); Type: FUNCTION; Schema: billing; Owner: yeti
--

CREATE FUNCTION clean_cdr_batch() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER COST 10
    AS $$
DECLARE
BEGIN
    DELETE FROM billing.cdr_batches where id not in (SELECT id from billing.cdr_batches order by id desc limit 50);
    return;
END;
$$;


ALTER FUNCTION billing.clean_cdr_batch() OWNER TO yeti;

--
-- TOC entry 793 (class 1255 OID 17182)
-- Name: invoice_generate(integer, integer, boolean, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: billing; Owner: yeti
--

CREATE FUNCTION invoice_generate(i_contractor_id integer, i_account_id integer, i_vendor_flag boolean, i_startdate timestamp without time zone, i_enddate timestamp without time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
v_id integer;
v_amount numeric;
v_count bigint;
v_min_date timestamp;
v_max_date timestamp;
BEGIN
        PERFORM sys.logic_log('billing.invoice_generate', 100, 'Started. i_contractor_id='||i_contractor_id::varchar||' i_account_id='||i_account_id::varchar);
        BEGIN
                INSERT into billing.invoices(contractor_id,account_id,start_date,end_date,amount,vendor_invoice,cdrs)
                        VALUES(i_contractor_id,i_account_id,i_startdate,i_enddate,0,i_vendor_flag,0) RETURNING id INTO v_id;
        EXCEPTION
                WHEN foreign_key_violation THEN
                        RAISE EXCEPTION 'billing.invoice_generate: account not found in this moment';
        END;

        if i_vendor_flag THEN
                PERFORM * FROM class4.cdrs WHERE vendor_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND vendor_invoice_id IS NOT NULL;
                IF FOUND THEN
                        RAISE EXCEPTION 'billing.invoice_generate: some vendor invoices already found for this interval';
                END IF;
                UPDATE class4.cdrs SET vendor_invoice_id=v_id WHERE vendor_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND vendor_invoice_id IS NULL;
                SELECT INTO v_count,v_amount,v_min_date,v_max_date
                        count(*),
                        COALESCE(sum(vendor_price),0),
                        min(time_start),
                        max(time_start)
                        from class4.cdrs 
                        WHERE vendor_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND vendor_invoice_id =v_id;
                        RAISE NOTICE 'wer % - %',v_count,v_amount;
                UPDATE billing.invoices SET amount=v_amount,cdrs=v_count,first_cdr_date=v_min_date,last_cdr_date=v_max_date WHERE id=v_id;
        ELSE
                PERFORM * FROM class4.cdrs WHERE customer_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND customer_invoice_id IS NOT NULL;
                IF FOUND THEN
                        RAISE EXCEPTION 'billing.invoice_generate: some customer invoices already found for this interval';
                END IF;
                UPDATE class4.cdrs SET customer_invoice_id=v_id WHERE customer_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND customer_invoice_id IS NULL;
                SELECT INTO v_count,v_amount,v_min_date,v_max_date
                        count(*),
                        COALESCE(sum(customer_price),0),
                        min(time_start),
                        max(time_start)
                         from class4.cdrs 
                        WHERE customer_acc_id =i_account_id AND time_start>=i_startdate AND time_end<i_enddate AND customer_invoice_id =v_id;
                UPDATE billing.invoices SET amount=v_amount,cdrs=v_count,first_cdr_date=v_min_date,last_cdr_date=v_max_date WHERE id=v_id;
        END IF;
        PERFORM sys.logic_log('billing.invoice_generate', 100, 'Done.');
RETURN v_id;
END;
$$;


ALTER FUNCTION billing.invoice_generate(i_contractor_id integer, i_account_id integer, i_vendor_flag boolean, i_startdate timestamp without time zone, i_enddate timestamp without time zone) OWNER TO yeti;

--
-- TOC entry 794 (class 1255 OID 17183)
-- Name: invoice_remove(integer); Type: FUNCTION; Schema: billing; Owner: yeti
--

CREATE FUNCTION invoice_remove(i_invoice_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
v_vendor_flag boolean;
BEGIN
        SELECT into v_vendor_flag vendor_invoice from billing.invoices WHERE id=i_invoice_id;
        IF NOT FOUND THEN
               --RAISE EXCEPTION 'Already removed';
               RETURN;
        END IF;

        IF v_vendor_flag THEN
                UPdate class4.cdrs set vendor_invoice_id = NULL where vendor_invoice_id=i_invoice_id;
        ELSE
                UPdate class4.cdrs set customer_invoice_id = NULL where customer_invoice_id=i_invoice_id;
        END IF;

        DELETE FROM billing.invoices where id=i_invoice_id;

END;
$$;


ALTER FUNCTION billing.invoice_remove(i_invoice_id integer) OWNER TO yeti;

SET search_path = class4, pg_catalog;

--
-- TOC entry 795 (class 1255 OID 17186)
-- Name: cdrs_i_tgf(); Type: FUNCTION; Schema: class4; Owner: yeti
--

CREATE FUNCTION cdrs_i_tgf() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ 
BEGIN  IF ( NEW.time_start >= DATE '2013-01-01' AND NEW.time_start < DATE '2013-02-01' ) THEN INSERT INTO class4.cdrs_201301 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-02-01' AND NEW.time_start < DATE '2013-03-01' ) THEN INSERT INTO class4.cdrs_201302 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-03-01' AND NEW.time_start < DATE '2013-04-01' ) THEN INSERT INTO class4.cdrs_201303 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-06-01' AND NEW.time_start < DATE '2013-07-01' ) THEN INSERT INTO class4.cdrs_201306 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-07-01' AND NEW.time_start < DATE '2013-08-01' ) THEN INSERT INTO class4.cdrs_201307 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-08-01' AND NEW.time_start < DATE '2013-09-01' ) THEN INSERT INTO class4.cdrs_201308 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-09-01' AND NEW.time_start < DATE '2013-10-01' ) THEN INSERT INTO class4.cdrs_201309 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-10-01' AND NEW.time_start < DATE '2013-11-01' ) THEN INSERT INTO class4.cdrs_201310 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-11-01' AND NEW.time_start < DATE '2013-12-01' ) THEN INSERT INTO class4.cdrs_201311 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2013-12-01' AND NEW.time_start < DATE '2014-01-01' ) THEN INSERT INTO class4.cdrs_201312 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-01-01' AND NEW.time_start < DATE '2014-02-01' ) THEN INSERT INTO class4.cdrs_201401 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-02-01' AND NEW.time_start < DATE '2014-03-01' ) THEN INSERT INTO class4.cdrs_201402 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-03-01' AND NEW.time_start < DATE '2014-04-01' ) THEN INSERT INTO class4.cdrs_201403 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-04-01' AND NEW.time_start < DATE '2014-05-01' ) THEN INSERT INTO class4.cdrs_201404 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-05-01' AND NEW.time_start < DATE '2014-06-01' ) THEN INSERT INTO class4.cdrs_201405 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-06-01' AND NEW.time_start < DATE '2014-07-01' ) THEN INSERT INTO class4.cdrs_201406 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-07-01' AND NEW.time_start < DATE '2014-08-01' ) THEN INSERT INTO class4.cdrs_201407 VALUES (NEW.*);
ELSIF ( NEW.time_start >= DATE '2014-08-01' AND NEW.time_start < DATE '2014-09-01' ) THEN INSERT INTO class4.cdrs_201408 VALUES (NEW.*);
 ELSE 
 RAISE EXCEPTION 'class4.cdrs_i_tg: time_start out of range.'; 
 END IF;  
RETURN NULL; 
END; $$;


ALTER FUNCTION class4.cdrs_i_tgf() OWNER TO yeti;

SET search_path = data_import, pg_catalog;

--
-- TOC entry 796 (class 1255 OID 17187)
-- Name: accounts_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION accounts_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
    UPDATE data_import.import_accounts as ta 
        SET contractor_id=tb.id
    from public.contractors tb 
    WHERE ta.contractor_name=tb.name;
    
    PERFORM data_import.resolve_object_id('billing.accounts','data_import.import_accounts',i_uf);
END;
$$;


ALTER FUNCTION data_import.accounts_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 797 (class 1255 OID 17188)
-- Name: contractors_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION contractors_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
    PERFORM data_import.resolve_object_id('public.contractors','data_import.import_contractors',i_uf);
END;
$$;


ALTER FUNCTION data_import.contractors_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 798 (class 1255 OID 17189)
-- Name: customers_auth_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION customers_auth_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
UPDATE data_import.import_customers_auth as ta 
    SET routing_group_id=tb.id
    from class4.routing_groups tb 
    WHERE ta.routing_group_name=tb.name;

UPDATE data_import.import_customers_auth as ta 
    SET rateplan_id=tb.id
    from class4.rateplans tb 
    WHERE ta.rateplan_name=tb.name;

UPDATE data_import.import_customers_auth as ta 
    SET gateway_id=tb.id
    from class4.gateways tb 
    WHERE ta.gateway_name=tb.name;
    
UPDATE data_import.import_customers_auth as ta 
    SET account_id=tb.id,
        customer_id=tb.contractor_id
    from billing.accounts tb 
    WHERE ta.account_name=tb.name;

UPDATE data_import.import_customers_auth as ta 
    SET dump_level_id=tb.id
    from class4.dump_level tb 
    WHERE ta.dump_level_name=tb.name;

UPDATE data_import.import_customers_auth as ta 
    SET pop_id=tb.id
    from sys.pops tb 
    WHERE ta.pop_name=tb.name;

UPDATE data_import.import_customers_auth as ta 
    SET diversion_policy_id=tb.id
    from class4.diversion_policy tb 
    WHERE ta.diversion_policy_name=tb.name;
    

UPDATE data_import.import_customers_auth SET src_prefix='' WHERE src_prefix IS NULL;
UPDATE data_import.import_customers_auth SET dst_prefix='' WHERE dst_prefix IS NULL;

PERFORM data_import.resolve_object_id('customers_auth',i_uf);

END;
$$;


ALTER FUNCTION data_import.customers_auth_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 791 (class 1255 OID 17190)
-- Name: destinations_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION destinations_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
UPDATE data_import.import_destinations as ta 
    SET rateplan_id=tb.id
    from class4.rateplans tb 
    WHERE ta.rateplan_name=tb.name;

UPDATE data_import.import_destinations as ta 
    SET rate_policy_id=tb.id
    from class4.destination_rate_policy tb 
    WHERE ta.rate_policy_name=tb.name;

PERFORM data_import.resolve_object_id('destinations',i_uf);
END;
$$;


ALTER FUNCTION data_import.destinations_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 792 (class 1255 OID 17191)
-- Name: dialpeers_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION dialpeers_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN

UPDATE data_import.import_dialpeers as ta 
    SET routing_group_id=tb.id
    from class4.routing_groups tb 
    WHERE ta.routing_group_name=tb.name;

UPDATE data_import.import_dialpeers as ta 
    SET gateway_id=tb.id
    from class4.gateways tb 
    WHERE ta.gateway_name=tb.name;

UPDATE data_import.import_dialpeers as ta 
    SET account_id=tb.id,
        vendor_id=tb.contractor_id
    from billing.accounts tb 
    WHERE ta.account_name=tb.name;

UPDATE data_import.import_dialpeers SET asr_limit=0 WHERE asr_limit IS NULL;
--UPDATE data_import.import_dialpeers SET acd_prefix='' WHERE dst_prefix IS NULL;

PERFORM data_import.resolve_object_id('dialpeers',i_uf);

END;
$$;


ALTER FUNCTION data_import.dialpeers_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 799 (class 1255 OID 17192)
-- Name: disconnect_policies_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION disconnect_policies_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
    PERFORM data_import.resolve_object_id('class4.disconnect_policy','data_import.import_disconnect_policies',i_uf);
END;
$$;


ALTER FUNCTION data_import.disconnect_policies_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 800 (class 1255 OID 17193)
-- Name: gateway_groups_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION gateway_groups_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
    UPDATE data_import.import_gateway_groups as ta 
        SET vendor_id=tb.id
    from public.contractors tb 
    WHERE ta.vendor_name=tb.name;
    
    PERFORM data_import.resolve_object_id('class4.gateway_groups','data_import.import_gateway_groups',i_uf);
END;
$$;


ALTER FUNCTION data_import.gateway_groups_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 801 (class 1255 OID 17194)
-- Name: gateways_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION gateways_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE

BEGIN

    UPDATE data_import.import_gateways as ta 
        SET contractor_id=tb.id
    from public.contractors tb 
    WHERE ta.contractor_name=tb.name;

    UPDATE data_import.import_gateways as ta 
        SET session_refresh_method_id=tb.id
    from class4.session_refresh_methods tb 
    WHERE ta.session_refresh_method_name=tb.name;

    UPDATE data_import.import_gateways as ta 
        SET pop_id=tb.id
    from sys.pops tb 
    WHERE ta.pop_name=tb.name;

    UPDATE data_import.import_gateways as ta 
        SET gateway_group_id=tb.id
    from class4.gateway_groups tb 
    WHERE ta.gateway_group_name=tb.name;


    PERFORM data_import.resolve_object_id('class4.gateways','data_import.import_gateways',i_uf);

END;
$$;


ALTER FUNCTION data_import.gateways_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 802 (class 1255 OID 17195)
-- Name: rateplans_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION rateplans_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
PERFORM data_import.resolve_object_id('rateplans',i_uf);
END;
$$;


ALTER FUNCTION data_import.rateplans_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 803 (class 1255 OID 17196)
-- Name: registrations_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION registrations_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN

UPDATE data_import.import_registrations as ta 
    SET pop_id=tb.id
    from sys.pops tb 
    WHERE ta.pop_name=tb.name;

UPDATE data_import.import_registrations as ta 
    SET node_id=tb.id
    from sys.nodes tb 
    WHERE ta.node_name=tb.name;

PERFORM data_import.resolve_object_id('class4.registrations','data_import.import_registrations',i_uf);

END;
$$;


ALTER FUNCTION data_import.registrations_handler(i_uf character varying[]) OWNER TO yeti;

--
-- TOC entry 804 (class 1255 OID 17197)
-- Name: resolve_object_id(character varying, character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION resolve_object_id(i_table_name character varying, i_unique_fields character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
v_uf VARCHAR;
v_sql VARCHAR;
v_sql_where VARCHAR := '';
BEGIN
    --check for existence if object id  was set
    v_sql:='UPDATE data_import.import_'||i_table_name||' ta SET o_id = NULL WHERE o_id IS NOT NULL AND o_id NOT IN (SELECT id FROM class4.'||i_table_name||')';
    RAISE NOTICE 'sql = "%"',v_sql;
    EXECUTE v_sql;

    IF array_length(i_unique_fields,1)=0 THEN
        RAISE WARNING 'got empty unique fields array. so return';
        RETURN;
    END IF;
    
    --resolve object id  using given unique fields list
    FOR v_uf IN SELECT * FROM unnest(i_unique_fields)
    LOOP
        v_uf:=trim(both '''' from v_uf);
        IF v_uf = '' THEN
            RAISE WARNING 'empty unique field name. skip it';
            CONTINUE;
        END IF;
        v_sql_where:=v_sql_where||'ta.'||v_uf||'=tb.'||v_uf||' AND ';
    END LOOP;
    v_sql_where:=left(v_sql_where,-5);

    v_sql:= 'UPDATE data_import.import_'||i_table_name||' ta SET o_id = tb.id FROM class4.'||i_table_name||' tb WHERE '||v_sql_where;
    RAISE NOTICE 'sql = "%"',v_sql;
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION data_import.resolve_object_id(i_table_name character varying, i_unique_fields character varying[]) OWNER TO yeti;

--
-- TOC entry 805 (class 1255 OID 17198)
-- Name: resolve_object_id(character varying, character varying, character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION resolve_object_id(i_from_table character varying, i_to_table character varying, i_unique_fields character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
v_uf VARCHAR;
v_sql VARCHAR;
v_sql_where VARCHAR := '';
BEGIN
    --check for existence if object id  was set
    v_sql:='UPDATE '||i_to_table||' ta SET o_id = NULL WHERE o_id IS NOT NULL AND o_id NOT IN (SELECT id FROM '||i_from_table||')';
    RAISE NOTICE 'sql = "%"',v_sql;
    EXECUTE v_sql;

    IF array_length(i_unique_fields,1)=0 THEN
        RAISE WARNING 'got empty unique fields array. so return';
        RETURN;
    END IF;
    
    --resolve object id  using given unique fields list
    FOR v_uf IN SELECT * FROM unnest(i_unique_fields)
    LOOP
        v_uf:=trim(both '''' from v_uf);
        IF v_uf = '' THEN
            RAISE WARNING 'empty unique field name. skip it';
            CONTINUE;
        END IF;
        v_sql_where:=v_sql_where||'ta.'||v_uf||'=tb.'||v_uf||' AND ';
    END LOOP;
    v_sql_where:=left(v_sql_where,-5);

    v_sql:= 'UPDATE '||i_to_table||' ta SET o_id = tb.id FROM '||i_from_table||' tb WHERE '||v_sql_where;
    RAISE NOTICE 'sql = "%"',v_sql;
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION data_import.resolve_object_id(i_from_table character varying, i_to_table character varying, i_unique_fields character varying[]) OWNER TO yeti;

--
-- TOC entry 806 (class 1255 OID 17199)
-- Name: routing_groups_handler(character varying[]); Type: FUNCTION; Schema: data_import; Owner: yeti
--

CREATE FUNCTION routing_groups_handler(i_uf character varying[]) RETURNS void
    LANGUAGE plpgsql COST 6000
    AS $$
DECLARE
BEGIN
    UPDATE data_import.import_routing_groups as ta 
    SET sorting_id=tb.id
    from class4.sortings tb
    WHERE ta.sorting_name=tb.name;

    PERFORM data_import.resolve_object_id('class4.routing_groups','data_import.import_routing_groups',i_uf);
END;
$$;


ALTER FUNCTION data_import.routing_groups_handler(i_uf character varying[]) OWNER TO yeti;

SET search_path = public, pg_catalog;

--
-- TOC entry 807 (class 1255 OID 17200)
-- Name: rewrite_dst(character varying); Type: FUNCTION; Schema: public; Owner: yeti
--

CREATE FUNCTION rewrite_dst(i_dst character varying) RETURNS character varying
    LANGUAGE sql
    AS $_$
        SELECT CASE
                WHEN $1 like 'sip:SKYPE%'
                        THEN regexp_replace($1,'^sip:SKYPE(.*)@(.*)',E'Skype: \\1','i')
                WHEN $1 like 'sip:GTALK%'
                        THEN regexp_replace($1,'^sip:GTALK(.*)@(.*)',E'Gtalk: \\1','i')
                WHEN $1 like 'sip:IAX%'
                        THEN 'IAX'::varchar
                WHEN $1 like 'sip:H323%'
                        THEN 'H323'
                WHEN $1 like 'tel:%'
                        THEN regexp_replace($1,'^tel:(.*)',E'PSTN: \\1','i')
                WHEN $1 like '%@sip.didreseller.com'
                        THEN 'ACF'
                ELSE    $1
                END;
$_$;


ALTER FUNCTION public.rewrite_dst(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 808 (class 1255 OID 17201)
-- Name: rtest(); Type: FUNCTION; Schema: public; Owner: yeti
--

CREATE FUNCTION rtest() RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$
declare
i INTEGER;
begin
for i in select * from generate_series(1,10)
loop
return next i;
end loop;
return;
end
$$;


ALTER FUNCTION public.rtest() OWNER TO yeti;

SET search_path = reports, pg_catalog;

--
-- TOC entry 809 (class 1255 OID 17202)
-- Name: cdr_custom_report(timestamp without time zone, timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: reports; Owner: yeti
--

CREATE FUNCTION cdr_custom_report(i_date_start timestamp without time zone, i_date_end timestamp without time zone, i_group_by character varying, i_filter character varying) RETURNS integer
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
    v_rid integer;
    v_sql varchar;
    v_keys varchar:='';
    v_i integer:=0;
    v_field varchar;
    v_filter varchar;
BEGIN
    INSERT INTO reports.cdr_custom_report(created_at,date_start,date_end,filter,group_by)
        values(now(),i_date_start,i_date_end,i_filter,i_group_by) RETURNING id INTO v_rid;

    For v_field in select * from regexp_split_to_table(i_group_by,',') LOOP
        v_i:=v_i+1;
        --IF regexp_match(v_field','w');
        v_keys:=v_keys||'key'||v_i::varchar||',';
    end loop;
    
    v_filter=COALESCE('AND '||NULLIF(i_filter,''),'');
    
    v_sql:='
        INSERT INTO cdr_custom_report_data(report_id,'||i_group_by||',agg_calls_count,agg_calls_duration,agg_customer_price,agg_vendor_price,agg_profit,agg_asr_origination,agg_asr_termination) 
            SELECT '||v_rid::varchar||','||i_group_by::varchar||',count(id),sum(duration),sum(customer_price),sum(vendor_price),sum(profit),1,1
            from class4.cdrs
            WHERE 
                time_start>='''||i_date_start::varchar||'''
                AND time_start<'''||i_date_end::varchar||''' '||v_filter||'
            GROUP BY '||i_group_by;
    RAISE WARNING 'SQL: %',v_sql;
    EXECUTE v_sql;
    RETURN v_rid;

END;
$$;


ALTER FUNCTION reports.cdr_custom_report(i_date_start timestamp without time zone, i_date_end timestamp without time zone, i_group_by character varying, i_filter character varying) OWNER TO yeti;

--
-- TOC entry 810 (class 1255 OID 17203)
-- Name: cdr_custom_report_remove(integer); Type: FUNCTION; Schema: reports; Owner: yeti
--

CREATE FUNCTION cdr_custom_report_remove(i_report_id integer) RETURNS void
    LANGUAGE plpgsql COST 3000
    AS $$
DECLARE

BEGIN
    delete from reports.cdr_custom_report_data where report_id=i_report_id;
    delete from reports.cdr_custom_report where id=i_report_id;
END;
$$;


ALTER FUNCTION reports.cdr_custom_report_remove(i_report_id integer) OWNER TO yeti;

--
-- TOC entry 811 (class 1255 OID 17204)
-- Name: cdr_interval_report(timestamp without time zone, timestamp without time zone, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: reports; Owner: yeti
--

CREATE FUNCTION cdr_interval_report(i_date_start timestamp without time zone, i_date_end timestamp without time zone, i_interval_length integer, i_agg_id integer, i_agg_by character varying, i_filter character varying, i_group_by character varying) RETURNS integer
    LANGUAGE plpgsql COST 3000
    AS $$
DECLARE
    v_rid integer;
    v_sql varchar;
    v_keys varchar:='';
    v_i integer:=0;
    v_field varchar;
    v_filter varchar;
    v_group_by varchar;
    v_agg varchar;
    v_tsp  varchar;
    v_tsp_ varchar;
BEGIN
    INSERT INTO reports.cdr_interval_report(created_at,date_start,date_end,
    filter,group_by,interval_length,aggregator_id,aggregate_by)
        values(now(),i_date_start,i_date_end,i_filter,i_group_by,i_interval_length,i_agg_id,i_agg_by) RETURNING id INTO v_rid;

    /* build aggregation function */
    select into v_agg "name"||'('||i_agg_by||')' from reports.cdr_interval_report_aggrerator where id=i_agg_id;
    IF NOT FOUND or v_agg is null THEN
        RAISE exception 'reports.cdr_interval_report: can`t build aggregate function';
    end if;

    --selecv_date_agg
    --floor( (UNIX_TIMESTAMP(date) + TIME_TO_SEC(time))/300)*300 as period

    v_tsp='(date_part(''epoch'',time_start)/date_part(''epoch'','''||i_interval_length||' minutes''::interval))::bigint';
    v_tsp_='timestamp ''epoch'' + ('''||i_interval_length||' minutes''::interval * (date_part(''epoch'',time_start)/date_part(''epoch'','''||i_interval_length||' minutes''::interval))::bigint)';

    --SELECT TIMESTAMP 'epoch' + 1195374767 * INTERVAL '1 second'.

    For v_field in select * from regexp_split_to_table(i_group_by,',') LOOP
        v_i:=v_i+1;
        --IF regexp_match(v_field','w');
        v_keys:=v_keys||'key'||v_i::varchar||',';
    end loop;


    v_group_by=COALESCE(', '||NULLIF(i_group_by,''),'');
    v_filter=COALESCE('AND '||NULLIF(i_filter,''),'');
    
    v_sql:='
        INSERT INTO reports.cdr_interval_report_data(report_id,timestamp'||v_group_by||',aggregated_value) 
        SELECT '||v_rid::varchar||','||v_tsp_||v_group_by||','||v_agg||'
            from class4.cdrs
            WHERE 
                time_start>='''||i_date_start::varchar||'''
                AND time_start<'''||i_date_end::varchar||''' '||v_filter||'
            GROUP BY '||v_tsp||v_group_by;
            
    RAISE WARNING 'SQL: %',v_sql;
    EXECUTE v_sql;
    RETURN v_rid;

END;
$$;


ALTER FUNCTION reports.cdr_interval_report(i_date_start timestamp without time zone, i_date_end timestamp without time zone, i_interval_length integer, i_agg_id integer, i_agg_by character varying, i_filter character varying, i_group_by character varying) OWNER TO yeti;

--
-- TOC entry 812 (class 1255 OID 17205)
-- Name: cdr_interval_report_remove(integer); Type: FUNCTION; Schema: reports; Owner: yeti
--

CREATE FUNCTION cdr_interval_report_remove(i_report_id integer) RETURNS void
    LANGUAGE plpgsql COST 3000
    AS $$
DECLARE

BEGIN
    delete from reports.cdr_interval_report_data where report_id=i_report_id;
    delete from reports.cdr_interval_report where id=i_report_id;
END;
$$;


ALTER FUNCTION reports.cdr_interval_report_remove(i_report_id integer) OWNER TO yeti;

SET search_path = runtime_stats, pg_catalog;

--
-- TOC entry 869 (class 1255 OID 19118)
-- Name: update_dp(bigint, bigint, boolean, integer); Type: FUNCTION; Schema: runtime_stats; Owner: yeti
--

CREATE FUNCTION update_dp(i_destination_id bigint, i_dialpeer_id bigint, i_success boolean, i_duration integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$

DECLARE
i integer;
v_id bigint;
v_success integer;
v_duration integer;
BEGIN
        if i_destination_id is null or i_dialpeer_id is null or i_destination_id=0 or i_dialpeer_id =0 then
            return;
        end if;
        
        v_success=i_success::integer;
        IF i_success THEN
                v_duration=i_duration;
        ELSE
                v_duration=0;
        END IF;
        UPDATE runtime_stats.dialpeers_stats SET
                calls=calls+1,calls_success=calls_success+v_success,calls_fail=calls_fail+(1-v_success),
                total_duration=total_duration+v_duration,
                acd=(total_duration+v_duration)::real/(calls+1)::real,
                asr=(calls_success+v_success)::real/(calls+1)::real
        WHERE dialpeer_id=i_dialpeer_id;
        IF NOT FOUND THEN
                -- we can get lost update in this case if row deleted in concurrent transaction. but this is minor issue;
                BEGIN
                        INSERT into runtime_stats.dialpeers_stats(dialpeer_id,calls,calls_success,calls_fail,total_duration,acd,asr) 
                        VALUES(i_dialpeer_id,1,v_success,1-v_success,v_duration,v_duration::real/1,v_success::real/1);
                EXCEPTION
                        WHEN unique_violation THEN
                                UPDATE runtime_stats.dialpeers_stats SET
                                calls=calls+1,calls_success=calls_success+v_success,calls_fail=calls_fail+(1-v_success),
                                total_duration=total_duration+v_duration,
                                acd=(total_duration+v_duration)::real/(calls+1)::real,
                                asr=(calls_success+v_success)::real/(calls+1)::real
                                WHERE dialpeer_id=i_dialpeer_id;
                END;
        END IF;
END;
$$;


ALTER FUNCTION runtime_stats.update_dp(i_destination_id bigint, i_dialpeer_id bigint, i_success boolean, i_duration integer) OWNER TO yeti;

--
-- TOC entry 1077 (class 1255 OID 19119)
-- Name: update_gw(integer, integer, boolean, integer); Type: FUNCTION; Schema: runtime_stats; Owner: yeti
--

CREATE FUNCTION update_gw(i_orig_gw_id integer, i_term_gw_id integer, i_success boolean, i_duration integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$

DECLARE
i integer;
v_id bigint;
v_success integer;
v_duration integer;
BEGIN
    if i_term_gw_id is null or i_term_gw_id is null then
        return;
    end if;
        v_success=i_success::integer;
        IF i_success THEN
                v_duration=i_duration;
        ELSE
                v_duration=0;
        END IF;
        UPDATE runtime_stats.gateways_stats SET
                calls=calls+1,calls_success=calls_success+v_success,calls_fail=calls_fail+(1-v_success),
                total_duration=total_duration+v_duration,
                acd=(total_duration+v_duration)::real/(calls+1)::real,
                asr=(calls_success+v_success)::real/(calls+1)::real
        WHERE gateway_id=i_term_gw_id;
        IF NOT FOUND THEN
                -- we can get lost update in this case if row deleted in concurrent transaction. but this is minor issue;
                BEGIN
                        INSERT into runtime_stats.gateways_stats(gateway_id,calls,calls_success,calls_fail,total_duration,acd,asr) 
                        VALUES(i_term_gw_id,1,v_success,1-v_success,v_duration,v_duration::real/1,v_success::real/1);
                EXCEPTION
                        WHEN unique_violation THEN
                                UPDATE runtime_stats.gateways_stats SET
                                calls=calls+1,calls_success=calls_success+v_success,calls_fail=calls_fail+(1-v_success),
                                total_duration=total_duration+v_duration,
                                acd=(total_duration+v_duration)::real/(calls+1)::real,
                                asr=(calls_success+v_success)::real/(calls+1)::real
                                WHERE gateway_id=i_term_gw_id;
                END;
        END IF;

END;
$$;


ALTER FUNCTION runtime_stats.update_gw(i_orig_gw_id integer, i_term_gw_id integer, i_success boolean, i_duration integer) OWNER TO yeti;

SET search_path = switch2, pg_catalog;

--
-- TOC entry 902 (class 1255 OID 19585)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch2.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 898 (class 1255 OID 19586)
-- Name: debugprofile_f(inet, integer, character varying, character varying, integer, character varying); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) RETURNS SETOF callprofile34_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/
    
    FOR v_r IN (SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        ''::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch2.debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) OWNER TO yeti;

SET search_path = sys, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 322 (class 1259 OID 19550)
-- Name: network_prefixes; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE network_prefixes (
    id integer NOT NULL,
    prefix character varying NOT NULL,
    network_id integer NOT NULL,
    country_id integer
);


ALTER TABLE sys.network_prefixes OWNER TO yeti;

SET search_path = switch2, pg_catalog;

--
-- TOC entry 899 (class 1255 OID 19587)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc 
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch2.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 900 (class 1255 OID 19588)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT 
        cgc.id, 
        cgc.codec_group_id, 
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch2.load_codecs() OWNER TO yeti;

SET search_path = class4, pg_catalog;

--
-- TOC entry 190 (class 1259 OID 17217)
-- Name: disconnect_code_namespace; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE disconnect_code_namespace (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.disconnect_code_namespace OWNER TO yeti;

SET search_path = switch2, pg_catalog;

--
-- TOC entry 901 (class 1255 OID 19589)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 903 (class 1255 OID 19590)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 904 (class 1255 OID 19591)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT code,stop_hunting 
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 905 (class 1255 OID 19592)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting 
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id          
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 906 (class 1255 OID 19593)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason 
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 907 (class 1255 OID 19594)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 908 (class 1255 OID 19595)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch2.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 909 (class 1255 OID 19596)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch2.load_interface_in() OWNER TO yeti;

--
-- TOC entry 910 (class 1255 OID 19597)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch2.load_interface_out() OWNER TO yeti;

--
-- TOC entry 850 (class 1255 OID 19598)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch2.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 327 (class 1259 OID 19599)
-- Name: resource_type; Type: TABLE; Schema: switch2; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch2.resource_type OWNER TO yeti;

--
-- TOC entry 851 (class 1255 OID 19606)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch2.load_resource_types() OWNER TO yeti;

--
-- TOC entry 852 (class 1255 OID 19607)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch2.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 853 (class 1255 OID 19608)
-- Name: new_profile(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile37_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch2.callprofile37_ty;
BEGIN    
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';
    
    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';
    
    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;
    
    
    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;

    --newly added fields. got from RS database
    
    v_ret.try_avoid_transcoding:=FALSE;
    
    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;
    
    v_ret.patch_ruri_next_hop:=FALSE;
    
    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;
    
    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;
    
    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;
    
    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;
    
    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;
    
    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH
    
    v_ret.trusted_hdrs_gw:=FALSE;
    
    --v_ret.aleg_append_headers_reply:='';
    v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';
    
    v_ret.relay_reinvite:=TRUE;
    
    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT
    
    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch2.new_profile() OWNER TO yeti;

--
-- TOC entry 854 (class 1255 OID 19609)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition 
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p 
        JOIN pg_namespace n 
        ON p.pronamespace = n.oid 
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;
    
IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- create function debug version
EXECUTE v_sql_debug;
-- create function release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch2.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 855 (class 1255 OID 19610)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch2','route',false);
    PERFORM preprocess('switch2','process_dp',false);
    PERFORM preprocess('switch2','process_gw',false);
END;
$$;


ALTER FUNCTION switch2.preprocess_all() OWNER TO yeti;

SET search_path = billing, pg_catalog;

--
-- TOC entry 191 (class 1259 OID 17245)
-- Name: accounts; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE accounts (
    id integer NOT NULL,
    contractor_id integer NOT NULL,
    balance numeric NOT NULL,
    min_balance numeric NOT NULL,
    max_balance numeric NOT NULL,
    name character varying NOT NULL,
    origination_capacity integer DEFAULT 0 NOT NULL,
    termination_capacity integer DEFAULT 0 NOT NULL,
    customer_invoice_period_id smallint,
    customer_invoice_template_id integer,
    vendor_invoice_template_id integer,
    vendor_invoice_period_id smallint,
    next_customer_invoice_at timestamp with time zone,
    next_vendor_invoice_at timestamp with time zone,
    send_invoices_to integer[],
    timezone_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE billing.accounts OWNER TO yeti;

SET search_path = class4, pg_catalog;

--
-- TOC entry 192 (class 1259 OID 17253)
-- Name: destinations; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE destinations (
    id bigint NOT NULL,
    enabled boolean NOT NULL,
    prefix character varying NOT NULL,
    rateplan_id integer NOT NULL,
    next_rate numeric NOT NULL,
    connect_fee numeric DEFAULT 0.0,
    initial_interval integer DEFAULT 1 NOT NULL,
    next_interval integer DEFAULT 1 NOT NULL,
    dp_margin_fixed numeric DEFAULT 0 NOT NULL,
    dp_margin_percent numeric DEFAULT 0 NOT NULL,
    rate_policy_id integer DEFAULT 1 NOT NULL,
    initial_rate numeric NOT NULL,
    reject_calls boolean DEFAULT false NOT NULL,
    use_dp_intervals boolean DEFAULT false NOT NULL,
    test character varying,
    valid_from timestamp with time zone NOT NULL,
    valid_till timestamp with time zone NOT NULL,
    profit_control_mode_id smallint,
    network_prefix_id integer,
    CONSTRAINT destinations_non_zero_initial_interval CHECK ((initial_interval > 0)),
    CONSTRAINT destinations_non_zero_next_interval CHECK ((next_interval > 0))
);


ALTER TABLE class4.destinations OWNER TO yeti;

--
-- TOC entry 193 (class 1259 OID 17271)
-- Name: dialpeers; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE dialpeers (
    id bigint NOT NULL,
    enabled boolean NOT NULL,
    prefix character varying NOT NULL,
    src_rewrite_rule character varying,
    dst_rewrite_rule character varying,
    acd_limit real DEFAULT 0 NOT NULL,
    asr_limit real DEFAULT 0.0 NOT NULL,
    gateway_id integer,
    routing_group_id integer NOT NULL,
    next_rate numeric NOT NULL,
    connect_fee numeric DEFAULT 0.0 NOT NULL,
    vendor_id integer NOT NULL,
    account_id integer NOT NULL,
    src_rewrite_result character varying,
    dst_rewrite_result character varying,
    locked boolean DEFAULT false NOT NULL,
    priority integer DEFAULT 100 NOT NULL,
    capacity integer DEFAULT 0 NOT NULL,
    lcr_rate_multiplier numeric DEFAULT 1 NOT NULL,
    initial_rate numeric NOT NULL,
    initial_interval integer DEFAULT 1 NOT NULL,
    next_interval integer DEFAULT 1 NOT NULL,
    valid_from timestamp with time zone NOT NULL,
    valid_till timestamp with time zone NOT NULL,
    gateway_group_id integer,
    test character varying,
    force_hit_rate double precision,
    network_prefix_id integer,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    short_calls_limit real DEFAULT 1 NOT NULL,
    external_id bigint,
    current_rate_id bigint,
    CONSTRAINT dialpeers_non_zero_initial_interval CHECK ((initial_interval > 0)),
    CONSTRAINT dialpeers_non_zero_next_interval CHECK ((next_interval > 0))
);


ALTER TABLE class4.dialpeers OWNER TO yeti;

--
-- TOC entry 194 (class 1259 OID 17290)
-- Name: gateways; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE gateways (
    id integer NOT NULL,
    host character varying NOT NULL,
    port integer,
    src_rewrite_rule character varying,
    dst_rewrite_rule character varying,
    acd_limit real DEFAULT 0 NOT NULL,
    asr_limit real DEFAULT 0 NOT NULL,
    enabled boolean NOT NULL,
    name character varying NOT NULL,
    auth_enabled boolean DEFAULT false NOT NULL,
    auth_user character varying,
    auth_password character varying,
    term_outbound_proxy character varying,
    term_next_hop_for_replies boolean DEFAULT false NOT NULL,
    term_use_outbound_proxy boolean DEFAULT false NOT NULL,
    contractor_id integer NOT NULL,
    allow_termination boolean DEFAULT true NOT NULL,
    allow_origination boolean DEFAULT true NOT NULL,
    anonymize_sdp boolean DEFAULT true NOT NULL,
    proxy_media boolean DEFAULT false NOT NULL,
    transparent_seqno boolean DEFAULT false NOT NULL,
    transparent_ssrc boolean DEFAULT false NOT NULL,
    sst_enabled boolean DEFAULT false,
    sst_minimum_timer integer DEFAULT 50 NOT NULL,
    sst_maximum_timer integer DEFAULT 50 NOT NULL,
    sst_accept501 boolean DEFAULT true NOT NULL,
    session_refresh_method_id integer DEFAULT 3 NOT NULL,
    sst_session_expires integer DEFAULT 50,
    term_force_outbound_proxy boolean DEFAULT false NOT NULL,
    locked boolean DEFAULT false NOT NULL,
    codecs_payload_order character varying DEFAULT ''::character varying,
    codecs_prefer_transcoding_for character varying DEFAULT ''::character varying,
    src_rewrite_result character varying,
    dst_rewrite_result character varying,
    capacity integer DEFAULT 0 NOT NULL,
    term_next_hop character varying,
    orig_next_hop character varying,
    orig_append_headers_req character varying,
    term_append_headers_req character varying,
    dialog_nat_handling boolean DEFAULT true NOT NULL,
    orig_force_outbound_proxy boolean DEFAULT false NOT NULL,
    orig_use_outbound_proxy boolean DEFAULT false NOT NULL,
    orig_outbound_proxy character varying,
    prefer_existing_codecs boolean DEFAULT true NOT NULL,
    force_symmetric_rtp boolean DEFAULT true NOT NULL,
    transparent_dialog_id boolean DEFAULT false NOT NULL,
    sdp_alines_filter_type_id integer DEFAULT 0 NOT NULL,
    sdp_alines_filter_list character varying,
    gateway_group_id integer,
    orig_disconnect_policy_id integer,
    term_disconnect_policy_id integer,
    diversion_policy_id integer DEFAULT 1 NOT NULL,
    diversion_rewrite_rule character varying,
    diversion_rewrite_result character varying,
    src_name_rewrite_rule character varying,
    src_name_rewrite_result character varying,
    priority integer DEFAULT 100 NOT NULL,
    pop_id integer,
    codec_group_id integer DEFAULT 1 NOT NULL,
    single_codec_in_200ok boolean DEFAULT false NOT NULL,
    ringing_timeout integer,
    symmetric_rtp_nonstop boolean DEFAULT false NOT NULL,
    symmetric_rtp_ignore_rtcp boolean DEFAULT false NOT NULL,
    resolve_ruri boolean DEFAULT false NOT NULL,
    force_dtmf_relay boolean DEFAULT false NOT NULL,
    relay_options boolean DEFAULT false NOT NULL,
    rtp_ping boolean DEFAULT false NOT NULL,
    filter_noaudio_streams boolean DEFAULT false NOT NULL,
    relay_reinvite boolean DEFAULT false NOT NULL,
    sdp_c_location_id integer DEFAULT 2 NOT NULL,
    auth_from_user character varying,
    auth_from_domain character varying,
    relay_hold boolean DEFAULT false NOT NULL,
    rtp_timeout integer DEFAULT 30 NOT NULL,
    relay_prack boolean DEFAULT false NOT NULL,
    rtp_relay_timestamp_aligning boolean DEFAULT false NOT NULL,
    allow_1xx_without_to_tag boolean DEFAULT false NOT NULL,
    sip_timer_b integer DEFAULT 8000 NOT NULL,
    dns_srv_failover_timer integer DEFAULT 2000 NOT NULL,
    rtp_force_relay_cn boolean DEFAULT true NOT NULL,
    sensor_id smallint,
    sensor_level_id smallint DEFAULT 1 NOT NULL,
    dtmf_receive_mode_id smallint DEFAULT 1 NOT NULL,
    dtmf_send_mode_id smallint DEFAULT 1 NOT NULL,
    relay_update boolean DEFAULT false NOT NULL,
    suppress_early_media boolean DEFAULT false NOT NULL,
    send_lnp_information boolean DEFAULT false NOT NULL,
    short_calls_limit real DEFAULT 1 NOT NULL
);


ALTER TABLE class4.gateways OWNER TO yeti;

SET search_path = switch2, pg_catalog;

--
-- TOC entry 856 (class 1255 OID 19611)
-- Name: process_dp(callprofile37_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile37_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) RETURNS SETOF callprofile37_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}rel*/
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch2.process_dp(i_profile callprofile37_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) OWNER TO yeti;

--
-- TOC entry 857 (class 1255 OID 19612)
-- Name: process_gw(callprofile37_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile37_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) RETURNS callprofile37_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    
    
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch2.process_gw(i_profile callprofile37_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) OWNER TO yeti;

--
-- TOC entry 858 (class 1255 OID 19614)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch2.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 864 (class 1255 OID 19615)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile37_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch2.callprofile37_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rg class4.routing_groups%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch2.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;
    
    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND 
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    
    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_group_id:=v_customer_auth.routing_group_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

   
    /* 
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch2.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE 
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /* 
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rg * from class4.routing_groups WHERE id=v_customer_auth.routing_group_id;
    CASE v_rg.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,  
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE 
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch2.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 861 (class 1255 OID 19617)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO'switch2.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch2.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 862 (class 1255 OID 19618)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch2; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO 'switch2.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch2.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch3, pg_catalog;

--
-- TOC entry 859 (class 1255 OID 20104)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch3.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 920 (class 1255 OID 20105)
-- Name: debugprofile_f(inet, integer, character varying, character varying, integer, character varying); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/
    
    FOR v_r IN (SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        ''::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch3.debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) OWNER TO yeti;

--
-- TOC entry 921 (class 1255 OID 20106)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc 
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch3.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 922 (class 1255 OID 20107)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT 
        cgc.id, 
        cgc.codec_group_id, 
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch3.load_codecs() OWNER TO yeti;

--
-- TOC entry 923 (class 1255 OID 20108)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 924 (class 1255 OID 20109)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 925 (class 1255 OID 20110)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT code,stop_hunting 
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 926 (class 1255 OID 20111)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting 
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id          
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 927 (class 1255 OID 20112)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason 
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 928 (class 1255 OID 20113)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 929 (class 1255 OID 20114)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch3.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 930 (class 1255 OID 20115)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch3.load_interface_in() OWNER TO yeti;

--
-- TOC entry 931 (class 1255 OID 20116)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch3.load_interface_out() OWNER TO yeti;

--
-- TOC entry 865 (class 1255 OID 20117)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch3.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 342 (class 1259 OID 20118)
-- Name: resource_type; Type: TABLE; Schema: switch3; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch3.resource_type OWNER TO yeti;

--
-- TOC entry 866 (class 1255 OID 20125)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch3.load_resource_types() OWNER TO yeti;

--
-- TOC entry 867 (class 1255 OID 20126)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT   
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch3.load_sensor() OWNER TO yeti;

--
-- TOC entry 868 (class 1255 OID 20127)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch3.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 932 (class 1255 OID 20128)
-- Name: new_profile(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile38_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch3.callprofile38_ty;
BEGIN    
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';
    
    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';
    
    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;
    
    
    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;

    --newly added fields. got from RS database
    
    v_ret.try_avoid_transcoding:=FALSE;
    
    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;
    
    v_ret.patch_ruri_next_hop:=FALSE;
    
    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;
    
    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;
    
    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;
    
    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;
    
    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;
    
    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH
    
    v_ret.trusted_hdrs_gw:=FALSE;
    
    --v_ret.aleg_append_headers_reply:='';
    v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';
    
    v_ret.relay_reinvite:=TRUE;
    
    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT
    
    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch3.new_profile() OWNER TO yeti;

--
-- TOC entry 933 (class 1255 OID 20129)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition 
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p 
        JOIN pg_namespace n 
        ON p.pronamespace = n.oid 
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;
    
IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- create function debug version
EXECUTE v_sql_debug;
-- create function release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch3.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 934 (class 1255 OID 20130)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch3','route',false);
    PERFORM preprocess('switch3','process_dp',false);
    PERFORM preprocess('switch3','process_gw',false);
END;
$$;


ALTER FUNCTION switch3.preprocess_all() OWNER TO yeti;

--
-- TOC entry 935 (class 1255 OID 20131)
-- Name: process_dp(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}rel*/
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch3.process_dp(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) OWNER TO yeti;

--
-- TOC entry 936 (class 1255 OID 20132)
-- Name: process_dp_debug(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch3.process_dp_debug(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) OWNER TO yeti;

--
-- TOC entry 937 (class 1255 OID 20133)
-- Name: process_dp_release(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN

    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch3.process_dp_release(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer) OWNER TO yeti;

--
-- TOC entry 871 (class 1255 OID 20134)
-- Name: process_gw(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) RETURNS callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;
    
    
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch3.process_gw(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) OWNER TO yeti;

--
-- TOC entry 872 (class 1255 OID 20136)
-- Name: process_gw_debug(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) RETURNS callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;
    
    
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch3.process_gw_debug(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) OWNER TO yeti;

--
-- TOC entry 873 (class 1255 OID 20138)
-- Name: process_gw_release(callprofile38_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) RETURNS callprofile38_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN

    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;
    
    

    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch3.process_gw_release(i_profile callprofile38_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways) OWNER TO yeti;

--
-- TOC entry 874 (class 1255 OID 20140)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch3.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 870 (class 1255 OID 20141)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch3.callprofile38_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rg class4.routing_groups%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch3.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;
    
    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND 
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    
    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_group_id:=v_customer_auth.routing_group_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

   
    /* 
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch3.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE 
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /* 
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rg * from class4.routing_groups WHERE id=v_customer_auth.routing_group_id;
    CASE v_rg.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,  
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE 
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch3.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 875 (class 1255 OID 20143)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch3.callprofile38_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rg class4.routing_groups%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch3.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;
    
    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND 
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    
    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_group_id:=v_customer_auth.routing_group_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

   
    /* 
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch3.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE 
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /* 
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rg * from class4.routing_groups WHERE id=v_customer_auth.routing_group_id;
    CASE v_rg.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,  
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE 
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY 
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}dbg*/
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch3.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 879 (class 1255 OID 20145)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch3.callprofile38_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rg class4.routing_groups%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch3.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;
    
    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND 
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    
    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_group_id:=v_customer_auth.routing_group_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

   
    /* 
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;



--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl 
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;


    v_network:=switch3.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE 
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /* 
                FIND dialpeers logic. Queries must use prefix index for best performance
    */

    SELECT INTO v_rg * from class4.routing_groups WHERE id=v_customer_auth.routing_group_id;
    CASE v_rg.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.priority as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rg.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,  
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT 
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rg.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                        WHERE 
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out) 
                            AND t_dp.routing_group_id=v_customer_auth.routing_group_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY 
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id);/*}rel*/
                    
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch3.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 880 (class 1255 OID 20147)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO'switch3.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch3.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 884 (class 1255 OID 20148)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch3; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO 'switch3.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch3.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch4, pg_catalog;

--
-- TOC entry 886 (class 1255 OID 20463)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch4.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 967 (class 1255 OID 20730)
-- Name: debug(inet, integer, character varying, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    set local search_path to switch4,sys,public;
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/
    
    FOR v_r IN (SELECT * from switch4.route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        i_x_yeti_auth::varchar,            --i_x_yeti_auth
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch4.debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) OWNER TO yeti;

--
-- TOC entry 887 (class 1255 OID 20464)
-- Name: debugprofile_f(inet, integer, character varying, character varying, integer, character varying); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/
    
    FOR v_r IN (SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        ''::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch4.debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) OWNER TO yeti;

--
-- TOC entry 888 (class 1255 OID 20465)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc 
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch4.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 889 (class 1255 OID 20466)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT 
        cgc.id, 
        cgc.codec_group_id, 
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch4.load_codecs() OWNER TO yeti;

--
-- TOC entry 890 (class 1255 OID 20467)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 891 (class 1255 OID 20468)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 892 (class 1255 OID 20469)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT code,stop_hunting 
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 893 (class 1255 OID 20470)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN    
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting 
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id          
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 894 (class 1255 OID 20471)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason 
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 885 (class 1255 OID 20472)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 895 (class 1255 OID 20473)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason 
    from class4.disconnect_policy_code dpc 
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch4.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 896 (class 1255 OID 20474)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch4.load_interface_in() OWNER TO yeti;

--
-- TOC entry 897 (class 1255 OID 20475)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch4.load_interface_out() OWNER TO yeti;

--
-- TOC entry 914 (class 1255 OID 20476)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch4.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 359 (class 1259 OID 20477)
-- Name: resource_type; Type: TABLE; Schema: switch4; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch4.resource_type OWNER TO yeti;

--
-- TOC entry 915 (class 1255 OID 20484)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN    
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch4.load_resource_types() OWNER TO yeti;

--
-- TOC entry 916 (class 1255 OID 20485)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RETURN 
    QUERY SELECT   
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch4.load_sensor() OWNER TO yeti;

--
-- TOC entry 917 (class 1255 OID 20486)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch4.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 938 (class 1255 OID 20699)
-- Name: new_profile(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile40_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch4.callprofile40_ty;
BEGIN    
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';
    
    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';
    
    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;
    
    
    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;

    --newly added fields. got from RS database
    
    v_ret.try_avoid_transcoding:=FALSE;
    
    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;
    
    v_ret.patch_ruri_next_hop:=FALSE;
    
    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;
    
    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;
    
    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;
    
    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;
    
    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;
    
    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH
    
    v_ret.trusted_hdrs_gw:=FALSE;
    
    --v_ret.aleg_append_headers_reply:='';
    v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';
    
    v_ret.relay_reinvite:=TRUE;
    
    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT
    
    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch4.new_profile() OWNER TO yeti;

--
-- TOC entry 918 (class 1255 OID 20488)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition 
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p 
        JOIN pg_namespace n 
        ON p.pronamespace = n.oid 
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;
    
IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- create function debug version
EXECUTE v_sql_debug;
-- create function release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch4.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 919 (class 1255 OID 20489)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch4','route',false);
    PERFORM preprocess('switch4','process_dp',false);
    PERFORM preprocess('switch4','process_gw',false);
END;
$$;


ALTER FUNCTION switch4.preprocess_all() OWNER TO yeti;

--
-- TOC entry 939 (class 1255 OID 20700)
-- Name: process_dp(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch4.process_dp(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 949 (class 1255 OID 20712)
-- Name: process_dp_debug(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch4.process_dp_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 950 (class 1255 OID 20713)
-- Name: process_dp_release(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN

    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc, 
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch4.process_dp_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 943 (class 1255 OID 20703)
-- Name: process_gw(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.routing_group_id:=i_dp.routing_group_id;
    
    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;
        
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch4.process_gw(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 951 (class 1255 OID 20714)
-- Name: process_gw_debug(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/
    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.routing_group_id:=i_dp.routing_group_id;
    
    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;
        
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch4.process_gw_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 952 (class 1255 OID 20716)
-- Name: process_gw_release(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN

    
    --RAISE NOTICE 'process_dp dst: %',i_destination;
    
    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';
   
    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;
    
    i_profile.routing_group_id:=i_dp.routing_group_id;
    
    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;
    
    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;
    
    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /* 
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';
    
    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;
    
    i_profile.call_id:=''; -- Generation by sems
    
    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';
    
    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';

    
    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';
    
    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;
  
    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;
    
    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';
    
    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;
    
    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;
    
    
    
    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';
    
    
    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';
    
    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;
    
    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;
        

    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch4.process_gw_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 828 (class 1255 OID 20499)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch4.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 940 (class 1255 OID 20701)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch4.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch4.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch4.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            --(t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch4.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 941 (class 1255 OID 20708)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch4.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch4.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch4.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            --(t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch4.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 942 (class 1255 OID 20710)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch4.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch4.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;




--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;


    v_network:=switch4.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */

    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end loop;
           END IF;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
            ELSE
                FOR routedata IN (
                     WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end loop;
            END IF;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
            ELSE
               FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            --(t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                ) LOOp
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end loop;
            END IF;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
            IF v_rp.more_specific_per_vendor THEN
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE r=1
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
            ELSE
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY length(t_dp.prefix) ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2
                        from class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                            AND NOT t_dp.locked --ACD&ASR control for DP
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE r=1
                    oRDER BY r2 ASC LIMIT 10
                ) LOOP
                RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end loop;
           END IF;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch4.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 829 (class 1255 OID 20506)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO'switch4.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch4.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 830 (class 1255 OID 20507)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch4; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN    
    RAISE INFO 'switch4.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch4.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch5, pg_catalog;

--
-- TOC entry 970 (class 1255 OID 21155)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch5.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 1011 (class 1255 OID 21156)
-- Name: debug(inet, integer, character varying, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    set local search_path to switch5,sys,public;
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/

    FOR v_r IN (SELECT * from switch5.route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        i_x_yeti_auth::varchar,            --i_x_yeti_auth
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch5.debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) OWNER TO yeti;

--
-- TOC entry 1012 (class 1255 OID 21157)
-- Name: debugprofile_f(inet, integer, character varying, character varying, integer, character varying); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) RETURNS SETOF callprofile38_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/

    FOR v_r IN (SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        ''::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        )) LOOP
            v_end:=clock_timestamp(); /*DBG*/
            RAISE NOTICE '% ms -> DBG. ROUTING RESULT: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_r); /*DBG*/
        end loop;
END;
$$;


ALTER FUNCTION switch5.debugprofile_f(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying) OWNER TO yeti;

--
-- TOC entry 997 (class 1255 OID 21158)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch5.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 1013 (class 1255 OID 21159)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        cgc.id,
        cgc.codec_group_id,
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch5.load_codecs() OWNER TO yeti;

--
-- TOC entry 1014 (class 1255 OID 21160)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 1015 (class 1255 OID 21161)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 1016 (class 1255 OID 21162)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT code,stop_hunting
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 1017 (class 1255 OID 21163)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 1018 (class 1255 OID 21164)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 1019 (class 1255 OID 21165)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 953 (class 1255 OID 21166)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch5.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 1020 (class 1255 OID 21167)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch5.load_interface_in() OWNER TO yeti;

--
-- TOC entry 1021 (class 1255 OID 21168)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch5.load_interface_out() OWNER TO yeti;

--
-- TOC entry 1022 (class 1255 OID 21169)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch5.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 380 (class 1259 OID 21170)
-- Name: resource_type; Type: TABLE; Schema: switch5; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch5.resource_type OWNER TO yeti;

--
-- TOC entry 1023 (class 1255 OID 21177)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch5.load_resource_types() OWNER TO yeti;

--
-- TOC entry 1024 (class 1255 OID 21178)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch5.load_sensor() OWNER TO yeti;

--
-- TOC entry 831 (class 1255 OID 21179)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch5.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 1001 (class 1255 OID 21180)
-- Name: new_profile(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile40_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch5.callprofile40_ty;
BEGIN
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';

    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';

    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;


    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;

    --newly added fields. got from RS database

    v_ret.try_avoid_transcoding:=FALSE;

    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;

    v_ret.patch_ruri_next_hop:=FALSE;

    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;

    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;

    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;

    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;

    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;

    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH

    v_ret.trusted_hdrs_gw:=FALSE;

    --v_ret.aleg_append_headers_reply:='';
    v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';

    v_ret.relay_reinvite:=TRUE;

    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT

    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch5.new_profile() OWNER TO yeti;

--
-- TOC entry 832 (class 1255 OID 21181)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p
        JOIN pg_namespace n
        ON p.pronamespace = n.oid
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;

IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- CREATE OR REPLACE FUNCTION  debug version
EXECUTE v_sql_debug;
-- CREATE OR REPLACE FUNCTION  release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch5.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 1002 (class 1255 OID 21182)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch5','route',false);
    PERFORM preprocess('switch5','process_dp',false);
    PERFORM preprocess('switch5','process_gw',false);
END;
$$;


ALTER FUNCTION switch5.preprocess_all() OWNER TO yeti;

--
-- TOC entry 833 (class 1255 OID 21183)
-- Name: process_dp(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch5.process_dp(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1004 (class 1255 OID 21311)
-- Name: process_dp_debug(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch5.process_dp_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1010 (class 1255 OID 21312)
-- Name: process_dp_release(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch5.process_dp_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1005 (class 1255 OID 21186)
-- Name: process_gw(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch5.process_gw(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1008 (class 1255 OID 21313)
-- Name: process_gw_debug(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch5.process_gw_debug(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1009 (class 1255 OID 21315)
-- Name: process_gw_release(callprofile40_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile40_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;


    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch5.process_gw_release(i_profile callprofile40_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1006 (class 1255 OID 21192)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch5.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 881 (class 1255 OID 21193)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch5.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch5.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch5.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr 
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id 
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch5.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 1003 (class 1255 OID 21307)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch5.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch5.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/
    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch5.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr 
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id 
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch5.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 836 (class 1255 OID 21309)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile40_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch5.callprofile40_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth record;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;

BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch5.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*,acc.origination_capacity as acc_capacity, acc.id as acc_id from class4.customers_auth ca
        JOIN billing.accounts acc
            ON acc.id=ca.account_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            acc.balance-acc.min_balance>0
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

        -- log_rtp log_sip dumplevel description (must be the same in UI)
    --   f      f        0        nothing
    --   f      t        1        only sip
    --   t      f        2        only rtp
    --   t      t        3        both

    v_ret.dump_level_id:=v_customer_auth.dump_level_id;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.acc_id::varchar||':'||v_customer_auth.acc_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    -- feel customer data
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;


    /*
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;




--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=115; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=116; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;


    v_network:=switch5.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */

    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr 
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id 
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch5.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 834 (class 1255 OID 21199)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO'switch5.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch5.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 835 (class 1255 OID 21200)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch5; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO 'switch5.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch5.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch6, pg_catalog;

--
-- TOC entry 1046 (class 1255 OID 22956)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch6.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 1062 (class 1255 OID 23263)
-- Name: debug(inet, integer, character varying, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    set local search_path to switch6,sys,public;
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/

    return query SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        i_x_yeti_auth::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        );
END;
$$;


ALTER FUNCTION switch6.debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) OWNER TO yeti;

--
-- TOC entry 1047 (class 1255 OID 22959)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch6.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 1048 (class 1255 OID 22960)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        cgc.id,
        cgc.codec_group_id,
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch6.load_codecs() OWNER TO yeti;

--
-- TOC entry 1049 (class 1255 OID 22961)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 1050 (class 1255 OID 22962)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 1051 (class 1255 OID 22963)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT code,stop_hunting
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 1052 (class 1255 OID 22964)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 1053 (class 1255 OID 22965)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 1054 (class 1255 OID 22966)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 944 (class 1255 OID 22967)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch6.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 945 (class 1255 OID 22968)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch6.load_interface_in() OWNER TO yeti;

--
-- TOC entry 946 (class 1255 OID 22969)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch6.load_interface_out() OWNER TO yeti;

--
-- TOC entry 947 (class 1255 OID 22970)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch6.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 404 (class 1259 OID 22971)
-- Name: resource_type; Type: TABLE; Schema: switch6; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch6.resource_type OWNER TO yeti;

--
-- TOC entry 948 (class 1255 OID 22978)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch6.load_resource_types() OWNER TO yeti;

--
-- TOC entry 954 (class 1255 OID 22979)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch6.load_sensor() OWNER TO yeti;

--
-- TOC entry 955 (class 1255 OID 22980)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch6.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 956 (class 1255 OID 22981)
-- Name: new_profile(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile41_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch6.callprofile41_ty;
BEGIN
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';

    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';

    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;


    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;

    --newly added fields. got from RS database

    v_ret.try_avoid_transcoding:=FALSE;

    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;

    v_ret.patch_ruri_next_hop:=FALSE;

    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;

    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;

    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;

    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;

    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;

    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH

    v_ret.trusted_hdrs_gw:=FALSE;

    --v_ret.aleg_append_headers_reply:='';
    v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';

    v_ret.relay_reinvite:=TRUE;

    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT

    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch6.new_profile() OWNER TO yeti;

--
-- TOC entry 1055 (class 1255 OID 22982)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p
        JOIN pg_namespace n
        ON p.pronamespace = n.oid
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;

IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- CREATE OR REPLACE FUNCTION  debug version
EXECUTE v_sql_debug;
-- CREATE OR REPLACE FUNCTION  release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch6.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 1056 (class 1255 OID 22983)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch6','route',false);
    PERFORM preprocess('switch6','process_dp',false);
    PERFORM preprocess('switch6','process_gw',false);
END;
$$;


ALTER FUNCTION switch6.preprocess_all() OWNER TO yeti;

--
-- TOC entry 1057 (class 1255 OID 22984)
-- Name: process_dp(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch6.process_dp(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1025 (class 1255 OID 22985)
-- Name: process_dp_debug(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch6.process_dp_debug(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1026 (class 1255 OID 22986)
-- Name: process_dp_release(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch6.process_dp_release(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1058 (class 1255 OID 22987)
-- Name: process_gw(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch6.process_gw(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1027 (class 1255 OID 22989)
-- Name: process_gw_debug(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch6.process_gw_debug(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 1028 (class 1255 OID 22991)
-- Name: process_gw_release(callprofile41_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) RETURNS callprofile41_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=10800;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=10800;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,10800)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.relay_reinvite = i_vendor_gw.relay_reinvite OR i_customer_gw.relay_reinvite;
    i_profile.relay_hold= i_vendor_gw.relay_hold OR i_customer_gw.relay_hold;
    i_profile.relay_prack= i_vendor_gw.relay_prack OR i_customer_gw.relay_prack;

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;


    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch6.process_gw_release(i_profile callprofile41_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean) OWNER TO yeti;

--
-- TOC entry 957 (class 1255 OID 22993)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch6.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 1007 (class 1255 OID 23236)
-- Name: replace_random(character varying); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION replace_random(i_str character varying) RETURNS character varying
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_length integer;
    v_random varchar;
BEGIN
    -- rand(11)
    -- parsing
    v_length=to_number(regexp_replace('i_str','(.*)rand\((.*)\)(.*)','\1'),'99');
    -- generating
    v_random=left(replace((random()*10)::varchar,'.',''),v_length);
    -- replacing
    return null;

END;
$$;


ALTER FUNCTION switch6.replace_random(i_str character varying) OWNER TO yeti;

--
-- TOC entry 964 (class 1255 OID 22994)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch6.callprofile41_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch6.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch6.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch6.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch6.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 965 (class 1255 OID 22996)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch6.callprofile41_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch6.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch6.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch6.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch6.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 960 (class 1255 OID 22998)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile41_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch6.callprofile41_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;

BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch6.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;



    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;




--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;


    v_network:=switch6.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */

    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch6.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information);/*}rel*/
                    
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch6.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 958 (class 1255 OID 23000)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO'switch6.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch6.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 959 (class 1255 OID 23001)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch6; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO 'switch6.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch6.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch7, pg_catalog;

--
-- TOC entry 1079 (class 1255 OID 23748)
-- Name: cache_lnp_data(smallint, character varying, character varying, character varying); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION cache_lnp_data(i_database_id smallint, i_dst character varying, i_lrn character varying, i_data character varying) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    begin
        insert into class4.lnp_cache(dst,lrn,created_at,updated_at,expires_at,database_id) values( i_dst, i_lrn, now(),now(),now()+'1 week'::interval,i_database_id);
    Exception
        when unique_violation then
            update class4.lnp_cache set lrn=i_lrn, updated_at=now(), expires_at=(now()+'1 week'::interval), database_id=i_database_id WHERE dst=i_dst;
    end;
END;
$$;


ALTER FUNCTION switch7.cache_lnp_data(i_database_id smallint, i_dst character varying, i_lrn character varying, i_data character varying) OWNER TO yeti;

--
-- TOC entry 1061 (class 1255 OID 23355)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch7.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 1073 (class 1255 OID 23486)
-- Name: debug(inet, integer, character varying, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    set local search_path to switch7,sys,public;
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/

    return query SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        i_x_yeti_auth::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        );
END;
$$;


ALTER FUNCTION switch7.debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) OWNER TO yeti;

--
-- TOC entry 1031 (class 1255 OID 23357)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch7.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 1032 (class 1255 OID 23358)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        cgc.id,
        cgc.codec_group_id,
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch7.load_codecs() OWNER TO yeti;

--
-- TOC entry 1033 (class 1255 OID 23359)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 1034 (class 1255 OID 23360)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 1035 (class 1255 OID 23361)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT code,stop_hunting
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 1036 (class 1255 OID 23362)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 1037 (class 1255 OID 23363)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 1038 (class 1255 OID 23364)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 1039 (class 1255 OID 23365)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch7.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 1040 (class 1255 OID 23366)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch7.load_interface_in() OWNER TO yeti;

--
-- TOC entry 1041 (class 1255 OID 23367)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch7.load_interface_out() OWNER TO yeti;

--
-- TOC entry 1078 (class 1255 OID 23729)
-- Name: load_lnp_databases(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_lnp_databases() RETURNS TABLE(o_id smallint, o_name character varying, o_driver_id smallint, o_host character varying, o_port integer)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id, name, driver_id, host, port from class4.lnp_databases;
END;
$$;


ALTER FUNCTION switch7.load_lnp_databases() OWNER TO yeti;

--
-- TOC entry 1042 (class 1255 OID 23368)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch7.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 426 (class 1259 OID 23369)
-- Name: resource_type; Type: TABLE; Schema: switch7; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch7.resource_type OWNER TO yeti;

--
-- TOC entry 1043 (class 1255 OID 23376)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch7.load_resource_types() OWNER TO yeti;

--
-- TOC entry 1044 (class 1255 OID 23377)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch7.load_sensor() OWNER TO yeti;

--
-- TOC entry 1045 (class 1255 OID 23378)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch7.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 1063 (class 1255 OID 23468)
-- Name: new_profile(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile42_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch7.callprofile42_ty;
BEGIN
    --v_ret.anonymize_sdp:=false;
    v_ret.append_headers:='User-Agent: YETI SBC \r\nMax-Forwars: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';

    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';

    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;


    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
/*
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;
*/
    --newly added fields. got from RS database

    v_ret.try_avoid_transcoding:=FALSE;

    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;

    v_ret.patch_ruri_next_hop:=FALSE;

    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;

    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;

    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;

    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;

    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;

    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH

    v_ret.trusted_hdrs_gw:=FALSE;

    --v_ret.aleg_append_headers_reply:='';
    --v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';


    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT

    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch7.new_profile() OWNER TO yeti;

--
-- TOC entry 1029 (class 1255 OID 23380)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p
        JOIN pg_namespace n
        ON p.pronamespace = n.oid
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;

IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- CREATE OR REPLACE FUNCTION  debug version
EXECUTE v_sql_debug;
-- CREATE OR REPLACE FUNCTION  release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch7.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 1030 (class 1255 OID 23381)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch7','route',false);
    PERFORM preprocess('switch7','process_dp',false);
    PERFORM preprocess('switch7','process_gw',false);
END;
$$;


ALTER FUNCTION switch7.preprocess_all() OWNER TO yeti;

--
-- TOC entry 1075 (class 1255 OID 23515)
-- Name: process_dp(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from 
                process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}rel*/
            /*dbg{*/
            return query select * from 
                process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch7.process_dp(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 961 (class 1255 OID 23525)
-- Name: process_dp_debug(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from 
                process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch7.process_dp_debug(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 962 (class 1255 OID 23526)
-- Name: process_dp_release(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from 
                process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch7.process_dp_release(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1074 (class 1255 OID 23511)
-- Name: process_gw(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch7.process_gw(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 963 (class 1255 OID 23527)
-- Name: process_gw_debug(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch7.process_gw_debug(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 966 (class 1255 OID 23529)
-- Name: process_gw_release(callprofile42_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile42_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Customer balance too low');
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        v_vendor_allowtime:=i_dp.initial_interval;
        i_profile:=refuse_call_f(i_profile,'403','Vendor balance too hight');
        RETURN i_profile;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='1'; -- blacklist TODO: Switch to whitelist and hardcode all transit headers;
    i_profile.header_filter_list:='X-Yeti-Auth,Diversion,X-UID,X-ORIG-IP,X-ORIG-PORT,User-Agent,X-Asterisk-HangupCause,X-Asterisk-HangupCauseCode';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='always';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;


    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch7.process_gw_release(i_profile callprofile42_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 840 (class 1255 OID 23391)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch7.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 841 (class 1255 OID 23392)
-- Name: replace_random(character varying); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION replace_random(i_str character varying) RETURNS character varying
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_length integer;
    v_random varchar;
BEGIN
    -- rand(11)
    -- parsing
    v_length=to_number(regexp_replace('i_str','(.*)rand\((.*)\)(.*)','\1'),'99');
    -- generating
    v_random=left(replace((random()*10)::varchar,'.',''),v_length);
    -- replacing
    return null;

END;
$$;


ALTER FUNCTION switch7.replace_random(i_str character varying) OWNER TO yeti;

--
-- TOC entry 1068 (class 1255 OID 23469)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch7.callprofile42_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch7.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch7.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;

    select into v_max_call_length max_call_duration from sys.guiconfig limit 1;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch7.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch7.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 1076 (class 1255 OID 23521)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch7.callprofile42_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;

BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch7.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_network:=switch7.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/
    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;

    select into v_max_call_length max_call_duration from sys.guiconfig limit 1;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch7.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch7.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 882 (class 1255 OID 23523)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile42_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch7.callprofile42_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;

BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch7.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.* 
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled 
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;



    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';
    
    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;




--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;


    v_network:=switch7.detect_network(v_ret.dst_prefix_out);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_ret.dst_prefix_out)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;

    select into v_max_call_length max_call_duration from sys.guiconfig limit 1;

    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */

    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\1')::integer;
            v_ret.dst_prefix_routing=regexp_replace(v_ret.dst_prefix_out,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_ret.dst_prefix_routing;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch7.detect_network(v_ret.dst_prefix_routing);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        AND t_dp.enabled
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_ret.dst_prefix_out)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_ret.dst_prefix_out)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            AND t_dp.enabled
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch7.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 842 (class 1255 OID 23399)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO'switch7.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch7.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 843 (class 1255 OID 23400)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch7; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO 'switch7.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch7.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = switch8, pg_catalog;

--
-- TOC entry 878 (class 1255 OID 23765)
-- Name: cache_lnp_data(smallint, character varying, character varying, character varying); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION cache_lnp_data(i_database_id smallint, i_dst character varying, i_lrn character varying, i_data character varying) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
declare
v_ttl integer;
v_expire timestamptz;
BEGIN
    select into v_ttl lnp_cache_ttl from sys.guiconfig;
    v_expire=now()+v_ttl*'1 minute'::interval;
    begin
        insert into class4.lnp_cache(dst,lrn,created_at,updated_at,expires_at,database_id,data) values( i_dst, i_lrn, now(),now(),v_expire,i_database_id,i_data);
    Exception
        when unique_violation then
            update class4.lnp_cache set lrn=i_lrn, updated_at=now(), expires_at=v_expire, data=i_data WHERE dst=i_dst and database_id=i_database_id;
    end;
END;
$$;


ALTER FUNCTION switch8.cache_lnp_data(i_database_id smallint, i_dst character varying, i_lrn character varying, i_data character varying) OWNER TO yeti;

--
-- TOC entry 1080 (class 1255 OID 23766)
-- Name: check_event(integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION check_event(i_event_id integer) RETURNS boolean
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    PERFORM id from sys.events where id=i_event_id;
    return FOUND;
END;
$$;


ALTER FUNCTION switch8.check_event(i_event_id integer) OWNER TO yeti;

--
-- TOC entry 1086 (class 1255 OID 23885)
-- Name: debug(inet, integer, character varying, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_r record;
v_start  timestamp;
v_end timestamp;
BEGIN
    set local search_path to switch8,sys,public;
    v_start:=now();
    v_end:=clock_timestamp(); /*DBG*/
    RAISE NOTICE '% ms -> DBG. Start',EXTRACT(MILLISECOND from v_end-v_start); /*DBG*/

    return query SELECT * from route_debug(
        1,              --i_node_id
        i_pop_id,              --i_pop_id
        i_remote_ip::inet,
        i_remote_port::int,
        '127.0.0.1'::inet,    --i_local_ip
        '5060'::int,         --i_local_port
        'from_name'::varchar,
        i_src_prefix::varchar,   --i_from_name
        '127.0.0.1'::varchar,    --i_from_domain
        '5060'::int,         --i_from_port
        i_dst_prefix::varchar,   --i_to_name
        '127.0.0.1'::varchar,    --i_to_domain
        '5060'::int,         --i_to_port
        i_src_prefix::varchar,   --i_contact_name
        i_remote_ip::varchar,    --i_contact_domain
        i_remote_port::int,  --i_contact_port
        i_dst_prefix::varchar,   --i_user,
        i_uri_domain::varchar,   -- URI domain
        i_x_yeti_auth::varchar,            --i_headers,
        NULL, --diversion
        NULL, --X-ORIG-IP
        NULL --X-ORIG-PORT
        );
END;
$$;


ALTER FUNCTION switch8.debug(i_remote_ip inet, i_remote_port integer, i_src_prefix character varying, i_dst_prefix character varying, i_pop_id integer, i_uri_domain character varying, i_x_yeti_auth character varying) OWNER TO yeti;

--
-- TOC entry 1069 (class 1255 OID 23768)
-- Name: detect_network(character varying); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION detect_network(i_dst character varying) RETURNS sys.network_prefixes
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_ret sys.network_prefixes%rowtype;
BEGIN

    select into v_ret *
    from sys.network_prefixes
    where prefix_range(prefix)@>prefix_range(i_dst)
    order by length(prefix) desc
    limit 1;

    return v_ret;
END;
$$;


ALTER FUNCTION switch8.detect_network(i_dst character varying) OWNER TO yeti;

--
-- TOC entry 1087 (class 1255 OID 24287)
-- Name: init(integer, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION init(i_node_id integer, i_pop_id integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
declare
    v_lnp_sockets text[];
    v_timeout integer:=1000;
BEGIN
    select into v_lnp_sockets array_agg('tcp://'||address||':'||port::varchar) from sys.lnp_resolvers;-- where 0=1;
    RAISE WARNING 'Adding LNP resolvers sockets: %. Resolver timeout: %ms', v_lnp_sockets, v_timeout;
    perform yeti_ext.lnp_endpoints_set(ARRAY[]::text[]);
    perform yeti_ext.lnp_endpoints_set(v_lnp_sockets);
    perform yeti_ext.lnp_set_timeout(v_timeout);
    RETURN;
end;
$$;


ALTER FUNCTION switch8.init(i_node_id integer, i_pop_id integer) OWNER TO yeti;

--
-- TOC entry 1097 (class 1255 OID 24423)
-- Name: lnp_resolve(smallint, character varying); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION lnp_resolve(i_database_id smallint, i_dst character varying) RETURNS character varying
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    return yeti_ext.lnp_resolve(i_database_id::int, i_dst);
END;
$$;


ALTER FUNCTION switch8.lnp_resolve(i_database_id smallint, i_dst character varying) OWNER TO yeti;

--
-- TOC entry 1070 (class 1255 OID 23769)
-- Name: load_codecs(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_codecs() RETURNS TABLE(o_id integer, o_codec_group_id integer, o_codec_name character varying, o_priority integer, o_dynamic_payload_id integer, o_format_params character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        cgc.id,
        cgc.codec_group_id,
        c.name ,
        cgc.priority,
        NULL::INTEGER,
        NULL::VARCHAR
    from class4.codec_group_codecs cgc
        JOIN class4.codecs c ON c.id=cgc.codec_id
    order by cgc.codec_group_id,cgc.priority desc ,c.name;
END;
$$;


ALTER FUNCTION switch8.load_codecs() OWNER TO yeti;

--
-- TOC entry 1064 (class 1255 OID 23770)
-- Name: load_disconnect_code_namespace(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_namespace() RETURNS SETOF class4.disconnect_code_namespace
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from class4.disconnect_code_namespace order by id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_namespace() OWNER TO yeti;

--
-- TOC entry 1065 (class 1255 OID 23771)
-- Name: load_disconnect_code_refuse(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_refuse() RETURNS TABLE(o_id integer, o_code integer, o_reason character varying, o_rewrited_code integer, o_rewrited_reason character varying, o_store_cdr boolean, o_silently_drop boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id,code,reason,rewrited_code,rewrited_reason,store_cdr,silently_drop
    from class4.disconnect_code
    where namespace_id=0 or namespace_id=1
    order by id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_refuse() OWNER TO yeti;

--
-- TOC entry 1066 (class 1255 OID 23772)
-- Name: load_disconnect_code_rerouting(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting() RETURNS TABLE(received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT code,stop_hunting
    from class4.disconnect_code
    WHERE namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_rerouting() OWNER TO yeti;

--
-- TOC entry 1067 (class 1255 OID 23773)
-- Name: load_disconnect_code_rerouting_overrides(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rerouting_overrides() RETURNS TABLE(policy_id integer, received_code integer, stop_rerouting boolean)
    LANGUAGE plpgsql COST 10
    AS $$

BEGIN
    RETURN QUERY SELECT dpc.policy_id,dc.code,dpc.stop_hunting
    from class4.disconnect_policy_code dpc
    join class4.disconnect_code dc
        ON dpc.code_id=dc.id
    WHERE dc.namespace_id=2 -- SIP ONLY
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_rerouting_overrides() OWNER TO yeti;

--
-- TOC entry 1071 (class 1255 OID 23774)
-- Name: load_disconnect_code_rewrite(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite() RETURNS TABLE(o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT code,reason,pass_reason_to_originator,rewrited_code,rewrited_reason
    from class4.disconnect_code
    where namespace_id=2
    order by id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_rewrite() OWNER TO yeti;

--
-- TOC entry 1072 (class 1255 OID 23775)
-- Name: load_disconnect_code_rewrite_override(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_override() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_rewrite_override() OWNER TO yeti;

--
-- TOC entry 839 (class 1255 OID 23776)
-- Name: load_disconnect_code_rewrite_overrides(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_disconnect_code_rewrite_overrides() RETURNS TABLE(o_policy_id integer, o_code integer, o_reason character varying, o_pass_reason_to_originator boolean, o_rewrited_code integer, o_rewrited_reason character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT dpc.policy_id,dc.code,dc.reason,dpc.pass_reason_to_originator,dpc.rewrited_code,dpc.rewrited_reason
    from class4.disconnect_policy_code dpc
    JOIN class4.disconnect_code dc
        ON dc.id=dpc.code_id
    where dc.namespace_id=2 -- ONLY SIP
    order by dpc.id;
END;
$$;


ALTER FUNCTION switch8.load_disconnect_code_rewrite_overrides() OWNER TO yeti;

--
-- TOC entry 837 (class 1255 OID 23777)
-- Name: load_interface_in(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_interface_in() RETURNS TABLE(varname character varying, vartype character varying, varformat character varying, varhashkey boolean, varparam character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","format","hashkey","param" from switch_interface_in order by rank asc;
END;
$$;


ALTER FUNCTION switch8.load_interface_in() OWNER TO yeti;

--
-- TOC entry 838 (class 1255 OID 23778)
-- Name: load_interface_out(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_interface_out() RETURNS TABLE(varname character varying, vartype character varying, forcdr boolean)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN QUERY SELECT "name","type","custom" from switch_interface_out order by rank asc;
END;
$$;


ALTER FUNCTION switch8.load_interface_out() OWNER TO yeti;

--
-- TOC entry 1093 (class 1255 OID 24414)
-- Name: load_lnp_databases(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_lnp_databases() RETURNS TABLE(o_id smallint, o_name character varying, o_driver_id smallint, o_host character varying, o_port integer, o_thinq_username character varying, o_thinq_token character varying)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT id, name, driver_id, host, port, thinq_username, thinq_token from class4.lnp_databases;
END;
$$;


ALTER FUNCTION switch8.load_lnp_databases() OWNER TO yeti;

--
-- TOC entry 844 (class 1255 OID 23780)
-- Name: load_registrations_out(integer, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_registrations_out(i_pop_id integer, i_node_id integer) RETURNS TABLE(o_id integer, o_domain character varying, o_user character varying, o_display_name character varying, o_auth_user character varying, o_auth_password character varying, o_proxy character varying, o_contact character varying, o_expire integer, o_force_expire boolean)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
RETURN QUERY
    SELECT
        id,"domain","username","display_username",auth_user,auth_password,proxy,contact,expire,force_expire
    FROM class4.registrations r
    WHERE
        r.enabled and
        (r.pop_id=i_pop_id OR r.pop_id is null) AND
        (r.node_id=i_node_id OR r.node_id IS NULL);
end;
$$;


ALTER FUNCTION switch8.load_registrations_out(i_pop_id integer, i_node_id integer) OWNER TO yeti;

--
-- TOC entry 452 (class 1259 OID 23781)
-- Name: resource_type; Type: TABLE; Schema: switch8; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_type (
    id integer NOT NULL,
    name character varying NOT NULL,
    reject_code integer,
    reject_reason character varying,
    action_id integer DEFAULT 1 NOT NULL
);


ALTER TABLE switch8.resource_type OWNER TO yeti;

--
-- TOC entry 845 (class 1255 OID 23788)
-- Name: load_resource_types(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_resource_types() RETURNS SETOF resource_type
    LANGUAGE plpgsql COST 10 ROWS 10
    AS $$

BEGIN
    RETURN QUERY SELECT * from resource_type;
END;
$$;


ALTER FUNCTION switch8.load_resource_types() OWNER TO yeti;

--
-- TOC entry 846 (class 1255 OID 23789)
-- Name: load_sensor(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_sensor() RETURNS TABLE(o_id smallint, o_name character varying, o_mode_id integer, o_source_interface character varying, o_target_mac macaddr, o_use_routing boolean, o_target_ip inet, o_source_ip inet)
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RETURN
    QUERY SELECT
        id,
        name,
        mode_id,
        source_interface,
        target_mac macaddr,
        use_routing,
        target_ip,
        source_ip from sys.sensors;
END;
$$;


ALTER FUNCTION switch8.load_sensor() OWNER TO yeti;

--
-- TOC entry 847 (class 1255 OID 23790)
-- Name: load_trusted_headers(integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION load_trusted_headers(i_node_id integer) RETURNS TABLE(o_name character varying)
    LANGUAGE plpgsql COST 10 ROWS 100
    AS $$
BEGIN
    RETURN QUERY    SELECT "name" from trusted_headers order by rank asc;
end;
$$;


ALTER FUNCTION switch8.load_trusted_headers(i_node_id integer) OWNER TO yeti;

--
-- TOC entry 1159 (class 1255 OID 23879)
-- Name: new_profile(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION new_profile() RETURNS callprofile43_ty
    LANGUAGE plpgsql COST 10
    AS $_$
DECLARE
    v_ret switch8.callprofile43_ty;
BEGIN
    --v_ret.anonymize_sdp:=false;
    --v_ret.append_headers:='Max-Forwards: 70\r\n';
    v_ret.enable_auth:=false;
    v_ret.auth_user:='';
    v_ret.auth_pwd:='';
    v_ret.enable_aleg_auth:=false;
    v_ret.auth_aleg_user:='';
    v_ret.auth_aleg_pwd:='';
    v_ret.call_id:='$ci_leg43';
--    v_ret.contact:='<sip:$Ri>';
    v_ret."from":='$f';
    v_ret."to":='$t';
    v_ret.ruri:='$r';
    v_ret.ruri_host:='';
    v_ret.force_outbound_proxy:=false;
    v_ret.outbound_proxy:='';
    v_ret.next_hop:='';
--    v_ret.next_hop_for_replies:='';
    v_ret.next_hop_1st_req:=false;
    v_ret.anonymize_sdp:=TRUE;
    v_ret.header_filter_type_id:=0; -- transparent
    v_ret.header_filter_list:='';
    v_ret.message_filter_type_id:=0; -- transparent
    v_ret.message_filter_list:='';

    v_ret.sdp_filter_type_id:=0; -- transparent
    v_ret.sdp_filter_list:='';
    v_ret.sdp_alines_filter_type_id:=0; -- transparent
    v_ret.sdp_alines_filter_list:='';

    v_ret.enable_session_timer:=false;
    v_ret.session_expires ='150';
    v_ret.minimum_timer:='30';
    v_ret.minimum_timer:='60';
    v_ret.session_refresh_method_id:=1;
    v_ret.accept_501_reply:=true;
    v_ret.enable_aleg_session_timer=false;
    v_ret.aleg_session_expires:='180';
    v_ret.aleg_minimum_timer:='30';
    v_ret.aleg_maximum_timer:='60';
    v_ret.aleg_session_refresh_method_id:=1;
    v_ret.aleg_accept_501_reply:='';
    v_ret.reply_translations:='';

    v_ret.enable_rtprelay:=false;
    v_ret.rtprelay_msgflags_symmetric_rtp:=false;


    v_ret.rtprelay_interface:='';
    v_ret.aleg_rtprelay_interface:='';
    v_ret.rtprelay_transparent_seqno:=false;
    v_ret.rtprelay_transparent_ssrc:=false;
    v_ret.outbound_interface:='';
    v_ret.dtmf_transcoding:='';
    v_ret.lowfi_codecs:='';
/*
    v_ret.customer_id:=0;
    v_ret.vendor_id:=0;
    v_ret.customer_acc_id:=0;
    v_ret.vendor_acc_id:=0;
    v_ret.customer_auth_id:=0;
    v_ret.destination_id:=0;
    v_ret.dialpeer_id:=0;
    v_ret.orig_gw_id:=0;
    v_ret.term_gw_id:=0;
    v_ret.routing_group_id:=0;
    v_ret.rateplan_id:=0;
    v_ret.destination_next_rate:=0;
    v_ret.destination_initial_rate:=0;
    v_ret.destination_fee:=0;
    v_ret.destination_initial_interval:=60;
    v_ret.destination_next_interval:=60;
    v_ret.destination_rate_policy_id:=1; -- FIXED rate policy
    v_ret.dialpeer_next_rate:=0;
    v_ret.dialpeer_initial_rate:=0;
    v_ret.dialpeer_fee:=0;
    v_ret.dialpeer_initial_interval:=60;
    v_ret.dialpeer_next_interval:=60;
    v_ret.time_limit:=0;
    v_ret.resources:='';
    v_ret.dump_level_id=0;
    v_ret.aleg_policy_id:=0;
    v_ret.bleg_policy_id:=0;
*/
    --newly added fields. got from RS database

    v_ret.try_avoid_transcoding:=FALSE;

    v_ret.rtprelay_dtmf_filtering:=TRUE;
    v_ret.rtprelay_dtmf_detection:=TRUE;
    v_ret.rtprelay_force_dtmf_relay:=FALSE;

    v_ret.patch_ruri_next_hop:=FALSE;

    v_ret.aleg_force_symmetric_rtp:=TRUE;
    v_ret.bleg_force_symmetric_rtp:=TRUE;

    v_ret.aleg_symmetric_rtp_nonstop:=FALSE;
    v_ret.bleg_symmetric_rtp_nonstop:=FALSE;

    v_ret.aleg_symmetric_rtp_ignore_rtcp:=TRUE;
    v_ret.bleg_symmetric_rtp_ignore_rtcp:=TRUE;

    v_ret.aleg_rtp_ping:=FALSE;
    v_ret.bleg_rtp_ping:=FALSE;

    v_ret.aleg_relay_options:=FALSE;
    v_ret.bleg_relay_options:=FALSE;

    v_ret.filter_noaudio_streams:=FALSE;

    /* enum conn_location {
     *   BOTH = 0,
     *   SESSION_ONLY,
     *   MEDIA_ONLY
     * } */
    v_ret.aleg_sdp_c_location_id:=0; --BOTH
    v_ret.bleg_sdp_c_location_id:=0; --BOTH

    v_ret.trusted_hdrs_gw:=FALSE;

    --v_ret.aleg_append_headers_reply:='';
    --v_ret.aleg_append_headers_reply=E'X-VND-INIT-INT:60\r\nX-VND-NEXT-INT:60\r\nX-VND-INIT-RATE:0\r\nX-VND-NEXT-RATE:0\r\nX-VND-CF:0';


    /*
     *  #define FILTER_TYPE_TRANSPARENT     0
     *  #define FILTER_TYPE_BLACKLIST       1
     *  #define FILTER_TYPE_WHITELIST       2
     */
    v_ret.bleg_sdp_alines_filter_list:='';
    v_ret.bleg_sdp_alines_filter_type_id:=0; --FILTER_TYPE_TRANSPARENT

    RETURN v_ret;
END;
$_$;


ALTER FUNCTION switch8.new_profile() OWNER TO yeti;

--
-- TOC entry 848 (class 1255 OID 23792)
-- Name: preprocess(character varying, character varying, boolean); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN

-- get function oiriginal definition
SELECT INTO v_sql
    pg_get_functiondef(p.oid)
    FROM pg_proc p
        JOIN pg_namespace n
        ON p.pronamespace = n.oid
    WHERE n.nspname = i_namespace AND p.proname = i_funcname;

IF v_sql IS NULL THEN
    RAISE EXCEPTION 'no such fucntion';
END IF;

--change function name for debug
SELECT into v_sql_debug regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_dbg_suffix);
--change function name for release
SELECT into v_sql_release regexp_replace(v_sql,'(CREATE OR REPLACE FUNCTION '||i_namespace||')\.('||i_funcname||')','\1.'||i_funcname||v_rel_suffix);

IF i_comment THEN
    --comment debug stuff in release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'(/\*dbg{\*/)(.*?)(/\*}dbg\*/)','\1/*\2*/\3','g');
    --comment release stuff in debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'(/\*rel{\*/)(.*?)(/\*}rel\*/)','\1/*\2*/\3','g');
ELSE
    --remove debug stuff from release code
    SELECT into v_sql_release regexp_replace(v_sql_release,'/\*dbg{\*/.*?/\*}dbg\*/','','g');
    --remove release stuff from debug code
    SELECT into v_sql_debug regexp_replace(v_sql_debug,'/\*rel{\*/.*?/\*}rel\*/','','g');
END IF;

--RAISE NOTICE 'v_sql = "%"', v_sql;
--RAISE NOTICE 'v_sql_debug = "%"', v_sql_debug;
--RAISE NOTICE 'v_sql_release = "%"', v_sql_release;

-- CREATE OR REPLACE FUNCTION  debug version
EXECUTE v_sql_debug;
-- CREATE OR REPLACE FUNCTION  release version
EXECUTE v_sql_release;

END;
$$;


ALTER FUNCTION switch8.preprocess(i_namespace character varying, i_funcname character varying, i_comment boolean) OWNER TO yeti;

--
-- TOC entry 849 (class 1255 OID 23793)
-- Name: preprocess_all(); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION preprocess_all() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_sql VARCHAR;
v_sql_debug VARCHAR;
v_sql_release VARCHAR;
v_dbg_suffix VARCHAR = '_debug';
v_rel_suffix VARCHAR = '_release';
BEGIN
    PERFORM preprocess('switch8','route',false);
    PERFORM preprocess('switch8','process_dp',false);
    PERFORM preprocess('switch8','process_gw',false);
END;
$$;


ALTER FUNCTION switch8.preprocess_all() OWNER TO yeti;

--
-- TOC entry 1085 (class 1255 OID 23882)
-- Name: process_dp(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_dp(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from 
                process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}rel*/
            /*dbg{*/
            return query select * from 
                process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch8.process_dp(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1160 (class 1255 OID 23890)
-- Name: process_dp_debug(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_dp_debug(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
    v_gw class4.gateways%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;5
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> process-DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        else
            
            /*dbg{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}dbg*/
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            
            /*dbg{*/
            return query select * from 
                process_gw_debug(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}dbg*/
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch8.process_dp_debug(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1161 (class 1255 OID 23891)
-- Name: process_dp_release(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, integer, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_dp_release(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 10000
    AS $$
DECLARE

    v_gw class4.gateways%rowtype;
BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;
    if i_dp.gateway_id is null then
        PERFORM id from class4.gateway_groups where id=i_dp.gateway_group_id and prefer_same_pop;
        IF FOUND THEN
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.pop_id=i_pop_id desc,cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            
        else
            /*rel{*/
            FOr v_gw in  select * from class4.gateways cg where cg.gateway_group_id=i_dp.gateway_group_id and cg.enabled ORDER BY cg.priority desc LOOP
                return query select * from process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,
                            i_customer_gw, i_vendor_acc , v_gw, i_send_billing_information,i_max_call_length);
            end loop;
            /*}rel*/
            
        end if;
    else
        select into v_gw * from class4.gateways cg where cg.id=i_dp.gateway_id and cg.enabled;
        if FOUND THEN
            /*rel{*/
            return query select * from 
                process_gw_release(i_profile, i_destination, i_dp, i_customer_acc,i_customer_gw, i_vendor_acc, v_gw, i_send_billing_information,i_max_call_length);
            /*}rel*/
            
        else
            return;
        end if;
    end if;
END;
$$;


ALTER FUNCTION switch8.process_dp_release(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_pop_id integer, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1094 (class 1255 OID 23883)
-- Name: process_gw(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_gw(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_prefix=i_dp.prefix;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        return null;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        return null;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    --i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    
    if i_vendor_gw.send_lnp_information and i_profile.lrn is not null then
        if i_profile.lrn=i_profile.dst_prefix_routing then -- number not ported, but request was successf we musr add ;npdi=yes;
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
            i_profile.lrn=nullif(i_profile.dst_prefix_routing,i_profile.lrn); -- clear lnr field if number not ported;
        else -- if number ported
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';rn='||i_profile.lrn||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
        end if;
    else
        i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,''); -- no fucking porting
    end if;
    
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='2'; -- whitelist
    i_profile.header_filter_list:='X-GTAG';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='never';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch8.process_gw(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1084 (class 1255 OID 23892)
-- Name: process_gw_debug(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_gw_debug(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
BEGIN
/*dbg{*/
    v_start:=now();
    --RAISE NOTICE 'process_dp in: %',i_profile;
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Found dialpeer: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_dp);
/*}dbg*/

    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_prefix=i_dp.prefix;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        return null;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        return null;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/
    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> GW. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),i_profile.src_prefix_out,i_profile.dst_prefix_out;
/*}dbg*/

    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    --i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    
    if i_vendor_gw.send_lnp_information and i_profile.lrn is not null then
        if i_profile.lrn=i_profile.dst_prefix_routing then -- number not ported, but request was successf we musr add ;npdi=yes;
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
            i_profile.lrn=nullif(i_profile.dst_prefix_routing,i_profile.lrn); -- clear lnr field if number not ported;
        else -- if number ported
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';rn='||i_profile.lrn||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
        end if;
    else
        i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,''); -- no fucking porting
    end if;
    
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='2'; -- whitelist
    i_profile.header_filter_list:='X-GTAG';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='never';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. Finished: % ',EXTRACT(MILLISECOND from v_end-v_start),hstore(i_profile);
/*}dbg*/
    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch8.process_gw_debug(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 913 (class 1255 OID 23894)
-- Name: process_gw_release(callprofile43_ty, class4.destinations, class4.dialpeers, billing.accounts, class4.gateways, billing.accounts, class4.gateways, boolean, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION process_gw_release(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) RETURNS callprofile43_ty
    LANGUAGE plpgsql STABLE SECURITY DEFINER COST 100000
    AS $_$
DECLARE
i integer;
v_customer_allowtime real;
v_vendor_allowtime real;
v_route_found boolean:=false;

BEGIN


    --RAISE NOTICE 'process_dp dst: %',i_destination;

    i_profile.destination_id:=i_destination.id;
--    i_profile.destination_initial_interval:=i_destination.initial_interval;
    i_profile.destination_fee:=i_destination.connect_fee::varchar;
    --i_profile.destination_next_interval:=i_destination.next_interval;
    i_profile.destination_rate_policy_id:=i_destination.rate_policy_id;

    --vendor account capacity limit;
    i_profile.resources:=i_profile.resources||'2:'||i_dp.account_id::varchar||':'||i_vendor_acc.termination_capacity::varchar||':1;';
    -- dialpeer account capacity limit;
    i_profile.resources:=i_profile.resources||'6:'||i_dp.id::varchar||':'||i_dp.capacity::varchar||':1;';

    /* */
    i_profile.dialpeer_id=i_dp.id;
    i_profile.dialpeer_prefix=i_dp.prefix;
    i_profile.dialpeer_next_rate=i_dp.next_rate::varchar;
    i_profile.dialpeer_initial_rate=i_dp.initial_rate::varchar;
    i_profile.dialpeer_initial_interval=i_dp.initial_interval;
    i_profile.dialpeer_next_interval=i_dp.next_interval;
    i_profile.dialpeer_fee=i_dp.connect_fee::varchar;
    i_profile.vendor_id=i_dp.vendor_id;
    i_profile.vendor_acc_id=i_dp.account_id;
    i_profile.term_gw_id=i_vendor_gw.id;

    i_profile.routing_group_id:=i_dp.routing_group_id;

    if i_send_billing_information then
        i_profile.aleg_append_headers_reply=E'X-VND-INIT-INT:'||i_profile.dialpeer_initial_interval||E'\r\nX-VND-NEXT-INT:'||i_profile.dialpeer_next_interval||E'\r\nX-VND-INIT-RATE:'||i_profile.dialpeer_initial_rate||E'\r\nX-VND-NEXT-RATE:'||i_profile.dialpeer_next_rate||E'\r\nX-VND-CF:'||i_profile.dialpeer_fee;
    end if;

    if i_destination.use_dp_intervals THEN
        i_profile.destination_initial_interval:=i_dp.initial_interval;
        i_profile.destination_next_interval:=i_dp.next_interval;
    ELSE
        i_profile.destination_initial_interval:=i_destination.initial_interval;
        i_profile.destination_next_interval:=i_destination.next_interval;
    end if;

    CASE i_profile.destination_rate_policy_id
        WHEN 1 THEN -- fixed
            i_profile.destination_next_rate:=i_destination.next_rate::varchar;
            i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
        WHEN 2 THEN -- based on dialpeer
            i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
        WHEN 3 THEN -- min
            IF i_dp.next_rate >= i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; -- FIXED least
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        WHEN 4 THEN -- max
            IF i_dp.next_rate < i_destination.next_rate THEN
                i_profile.destination_next_rate:=i_destination.next_rate::varchar; --FIXED
                i_profile.destination_initial_rate:=i_destination.initial_rate::varchar;
            ELSE
                i_profile.destination_next_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.next_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar; -- DYNAMIC
                i_profile.destination_initial_rate:=(COALESCE(i_destination.dp_margin_fixed,0)+i_dp.initial_rate*(1+COALESCE(i_destination.dp_margin_percent,0)))::varchar;
            END IF;
        ELSE
            --
    end case;



    /* time limiting START */
    --SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    --SELECT INTO STRICT v_v_acc * FROM billing.accounts  WHERE id=v_dialpeer.account_id;

    IF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee <0 THEN
        v_customer_allowtime:=0;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF (i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate*i_destination.initial_interval<0 THEN
        v_customer_allowtime:=i_destination.initial_interval;
        i_profile.disconnect_code_id=8000; --Not enough customer balance
        RETURN i_profile;
    ELSIF i_destination.next_rate!=0 AND i_destination.next_interval!=0 THEN
        v_customer_allowtime:=i_destination.initial_interval+
        LEAST(FLOOR(((i_customer_acc.balance-i_customer_acc.min_balance)-i_destination.connect_fee-i_destination.initial_rate/60*i_destination.initial_interval)/
        (i_destination.next_rate/60*i_destination.next_interval)),24e6)::integer*i_destination.next_interval;
    ELSE
        v_customer_allowtime:=i_max_call_length;
    end IF;

    IF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee <0 THEN
        v_vendor_allowtime:=0;
        return null;
    ELSIF (i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate*i_dp.initial_interval<0 THEN
        return null;
    ELSIF i_dp.next_rate!=0 AND i_dp.next_interval!=0 THEN
        v_vendor_allowtime:=i_dp.initial_interval+
        LEAST(FLOOR(((i_vendor_acc.max_balance-i_vendor_acc.balance)-i_dp.connect_fee-i_dp.initial_rate/60*i_dp.initial_interval)/
        (i_dp.next_rate/60*i_dp.next_interval)),24e6)::integer*i_dp.next_interval;
    ELSE
        v_vendor_allowtime:=i_max_call_length;
    end IF;

    i_profile.time_limit=LEAST(v_vendor_allowtime,v_customer_allowtime,i_max_call_length)::integer;
    /* time limiting END */


    /* number rewriting _After_ routing */

    IF (i_dp.dst_rewrite_rule IS NOT NULL AND i_dp.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_dp.dst_rewrite_rule,i_dp.dst_rewrite_result);
    END IF;

    IF (i_dp.src_rewrite_rule IS NOT NULL AND i_dp.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_dp.src_rewrite_rule,i_dp.src_rewrite_result);
    END IF;


    /*
        get termination gw data
    */
    --SELECT into v_dst_gw * from class4.gateways WHERE id=v_dialpeer.gateway_id;
    --SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;
    --vendor gw
    i_profile.resources:=i_profile.resources||'5:'||i_vendor_gw.id::varchar||':'||i_vendor_gw.capacity::varchar||':1;';
    --customer gw
    i_profile.resources:=i_profile.resources||'4:'||i_customer_gw.id::varchar||':'||i_customer_gw.capacity::varchar||':1;';


    /*
        number rewriting _After_ routing _IN_ termination GW
    */

    IF (i_vendor_gw.dst_rewrite_rule IS NOT NULL AND i_vendor_gw.dst_rewrite_rule!='') THEN
        i_profile.dst_prefix_out=regexp_replace(i_profile.dst_prefix_out,i_vendor_gw.dst_rewrite_rule,i_vendor_gw.dst_rewrite_result);
    END IF;

    IF (i_vendor_gw.src_rewrite_rule IS NOT NULL AND i_vendor_gw.src_rewrite_rule!='') THEN
        i_profile.src_prefix_out=regexp_replace(i_profile.src_prefix_out,i_vendor_gw.src_rewrite_rule,i_vendor_gw.src_rewrite_result);
    END IF;


    i_profile.anonymize_sdp:=i_vendor_gw.anonymize_sdp OR i_customer_gw.anonymize_sdp;

    --i_profile.append_headers:='User-Agent: YETI SBC\r\n';
    i_profile.append_headers_req:=i_vendor_gw.term_append_headers_req;
    i_profile.aleg_append_headers_req=i_customer_gw.orig_append_headers_req;

    i_profile.enable_auth:=i_vendor_gw.auth_enabled;
    i_profile.auth_pwd:=i_vendor_gw.auth_password;
    i_profile.auth_user:=i_vendor_gw.auth_user;
    i_profile.enable_aleg_auth:=false;
    i_profile.auth_aleg_pwd:='';
    i_profile.auth_aleg_user:='';

    i_profile.next_hop_1st_req=i_vendor_gw.auth_enabled; -- use low delay dns srv if auth enabled
    i_profile.next_hop:=i_vendor_gw.term_next_hop;
    i_profile.aleg_next_hop:=i_customer_gw.orig_next_hop;
--    i_profile.next_hop_for_replies:=v_dst_gw.term_next_hop_for_replies;

    i_profile.dlg_nat_handling=i_customer_gw.dialog_nat_handling;
    i_profile.transparent_dlg_id=i_customer_gw.transparent_dialog_id;

    i_profile.call_id:=''; -- Generation by sems

    --i_profile."from":='$f';
    --i_profile."from":='<sip:'||i_profile.src_prefix_out||'@46.19.209.45>';
    i_profile."from":=COALESCE(i_profile.src_name_out||' ','')||'<sip:'||i_profile.src_prefix_out||'@$Oi>';

    i_profile."to":='<sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port||'>','>');
    
    if i_vendor_gw.send_lnp_information and i_profile.lrn is not null then
        if i_profile.lrn=i_profile.dst_prefix_routing then -- number not ported, but request was successf we musr add ;npdi=yes;
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
            i_profile.lrn=nullif(i_profile.dst_prefix_routing,i_profile.lrn); -- clear lnr field if number not ported;
        else -- if number ported
            i_profile.ruri:='sip:'||i_profile.dst_prefix_out||';rn='||i_profile.lrn||';npdi=yes@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');
        end if;
    else
        i_profile.ruri:='sip:'||i_profile.dst_prefix_out||'@'||i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,''); -- no fucking porting
    end if;
    
    i_profile.ruri_host:=i_vendor_gw.host::varchar||COALESCE(':'||i_vendor_gw.port,'');

    IF (i_vendor_gw.term_use_outbound_proxy ) THEN
        i_profile.outbound_proxy:='sip:'||i_vendor_gw.term_outbound_proxy;
        i_profile.force_outbound_proxy:=i_vendor_gw.term_force_outbound_proxy;
    ELSE
        i_profile.outbound_proxy:=NULL;
        i_profile.force_outbound_proxy:=false;
    END IF;

    IF (i_customer_gw.orig_use_outbound_proxy ) THEN
        i_profile.aleg_force_outbound_proxy:=i_customer_gw.orig_force_outbound_proxy;
        i_profile.aleg_outbound_proxy='sip:'||i_customer_gw.orig_outbound_proxy;
    else
        i_profile.aleg_force_outbound_proxy:=FALSE;
        i_profile.aleg_outbound_proxy=NULL;
    end if;

    i_profile.aleg_policy_id=i_customer_gw.orig_disconnect_policy_id;
    i_profile.bleg_policy_id=i_vendor_gw.term_disconnect_policy_id;

    --i_profile.header_filter_type_id:=i_vendor_gw.header_filter_type_id;
    --i_profile.header_filter_list:=i_vendor_gw.header_filter_list;
    i_profile.header_filter_type_id:='2'; -- whitelist
    i_profile.header_filter_list:='X-GTAG';


    i_profile.message_filter_type_id:=1;
    i_profile.message_filter_list:='';

    i_profile.sdp_filter_type_id:=0;
    i_profile.sdp_filter_list:='';

    i_profile.sdp_alines_filter_type_id:=i_vendor_gw.sdp_alines_filter_type_id;
    i_profile.sdp_alines_filter_list:=i_vendor_gw.sdp_alines_filter_list;

    i_profile.enable_session_timer=i_vendor_gw.sst_enabled;
    i_profile.session_expires =i_vendor_gw.sst_session_expires;
    i_profile.minimum_timer:=i_vendor_gw.sst_minimum_timer;
    i_profile.maximum_timer:=i_vendor_gw.sst_maximum_timer;
    i_profile.session_refresh_method_id:=i_vendor_gw.session_refresh_method_id;
    i_profile.accept_501_reply:=i_vendor_gw.sst_accept501;

    i_profile.enable_aleg_session_timer=i_customer_gw.sst_enabled;
    i_profile.aleg_session_expires:=i_customer_gw.sst_session_expires;
    i_profile.aleg_minimum_timer:=i_customer_gw.sst_minimum_timer;
    i_profile.aleg_maximum_timer:=i_customer_gw.sst_maximum_timer;
    i_profile.aleg_session_refresh_method_id:=i_customer_gw.session_refresh_method_id;
    i_profile.aleg_accept_501_reply:=i_customer_gw.sst_accept501;

    i_profile.reply_translations:='';
    i_profile.disconnect_code_id:=NULL;
    i_profile.enable_rtprelay:=i_vendor_gw.proxy_media OR i_customer_gw.proxy_media;
    i_profile.rtprelay_transparent_seqno:=i_vendor_gw.transparent_seqno OR i_customer_gw.transparent_seqno;
    i_profile.rtprelay_transparent_ssrc:=i_vendor_gw.transparent_ssrc OR i_customer_gw.transparent_ssrc;

    i_profile.rtprelay_interface:='';
    i_profile.aleg_rtprelay_interface:='';

    i_profile.outbound_interface:='';
    i_profile.aleg_outbound_interface:='';

    i_profile.rtprelay_msgflags_symmetric_rtp:=false;
    i_profile.bleg_force_symmetric_rtp:=i_vendor_gw.force_symmetric_rtp;
    i_profile.bleg_symmetric_rtp_nonstop=i_vendor_gw.symmetric_rtp_nonstop;
    i_profile.bleg_symmetric_rtp_ignore_rtcp=i_vendor_gw.symmetric_rtp_ignore_rtcp;

    i_profile.aleg_force_symmetric_rtp:=i_customer_gw.force_symmetric_rtp;
    i_profile.aleg_symmetric_rtp_nonstop=i_customer_gw.symmetric_rtp_nonstop;
    i_profile.aleg_symmetric_rtp_ignore_rtcp=i_customer_gw.symmetric_rtp_ignore_rtcp;

    i_profile.bleg_rtp_ping=i_vendor_gw.rtp_ping;
    i_profile.aleg_rtp_ping=i_customer_gw.rtp_ping;

    i_profile.bleg_relay_options = i_vendor_gw.relay_options;
    i_profile.aleg_relay_options = i_customer_gw.relay_options;


    i_profile.filter_noaudio_streams = i_vendor_gw.filter_noaudio_streams OR i_customer_gw.filter_noaudio_streams;
    i_profile.aleg_relay_reinvite = i_vendor_gw.relay_reinvite;
    i_profile.bleg_relay_reinvite = i_customer_gw.relay_reinvite;

    i_profile.aleg_relay_hold = i_vendor_gw.relay_hold;
    i_profile.bleg_relay_hold = i_customer_gw.relay_hold;
   
    i_profile.aleg_relay_prack = i_vendor_gw.relay_prack;
    i_profile.bleg_relay_prack = i_customer_gw.relay_prack;
    

    i_profile.rtp_relay_timestamp_aligning=i_vendor_gw.rtp_relay_timestamp_aligning OR i_customer_gw.rtp_relay_timestamp_aligning;
    i_profile.allow_1xx_wo2tag=i_vendor_gw.allow_1xx_without_to_tag OR i_customer_gw.allow_1xx_without_to_tag;

    i_profile.aleg_sdp_c_location_id=i_customer_gw.sdp_c_location_id;
    i_profile.bleg_sdp_c_location_id=i_vendor_gw.sdp_c_location_id;
    i_profile.trusted_hdrs_gw=false;



    i_profile.dtmf_transcoding:='never';-- always, lowfi_codec, never
    i_profile.lowfi_codecs:='';


    i_profile.enable_reg_caching=false;
    i_profile.min_reg_expires:='100500';
    i_profile.max_ua_expires:='100500';

    i_profile.aleg_codecs_group_id:=i_customer_gw.codec_group_id;
    i_profile.bleg_codecs_group_id:=i_vendor_gw.codec_group_id;
    i_profile.aleg_single_codec_in_200ok:=i_customer_gw.single_codec_in_200ok;
    i_profile.bleg_single_codec_in_200ok:=i_vendor_gw.single_codec_in_200ok;
    i_profile.ringing_timeout=i_vendor_gw.ringing_timeout;
    i_profile.dead_rtp_time=GREATEST(i_vendor_gw.rtp_timeout,i_customer_gw.rtp_timeout);
    i_profile.invite_timeout=i_vendor_gw.sip_timer_b;
    i_profile.srv_failover_timeout=i_vendor_gw.dns_srv_failover_timer;
    i_profile.rtp_force_relay_cn=i_vendor_gw.rtp_force_relay_cn OR i_customer_gw.rtp_force_relay_cn;
    i_profile.patch_ruri_next_hop=i_vendor_gw.resolve_ruri;

    i_profile.aleg_sensor_id=i_customer_gw.sensor_id;
    i_profile.aleg_sensor_level_id=i_customer_gw.sensor_level_id;
    i_profile.bleg_sensor_id=i_vendor_gw.sensor_id;
    i_profile.bleg_sensor_level_id=i_vendor_gw.sensor_level_id;

    i_profile.aleg_dtmf_send_mode_id=i_customer_gw.dtmf_send_mode_id;
    i_profile.aleg_dtmf_recv_modes=i_customer_gw.dtmf_receive_mode_id;
    i_profile.bleg_dtmf_send_mode_id=i_vendor_gw.dtmf_send_mode_id;
    i_profile.bleg_dtmf_recv_modes=i_vendor_gw.dtmf_receive_mode_id;

    i_profile.aleg_relay_update=i_customer_gw.relay_update;
    i_profile.bleg_relay_update=i_vendor_gw.relay_update;
    i_profile.suppress_early_media=i_customer_gw.suppress_early_media OR i_vendor_gw.suppress_early_media;


    RETURN i_profile;
END;
$_$;


ALTER FUNCTION switch8.process_gw_release(i_profile callprofile43_ty, i_destination class4.destinations, i_dp class4.dialpeers, i_customer_acc billing.accounts, i_customer_gw class4.gateways, i_vendor_acc billing.accounts, i_vendor_gw class4.gateways, i_send_billing_information boolean, i_max_call_length integer) OWNER TO yeti;

--
-- TOC entry 1081 (class 1255 OID 23803)
-- Name: recompile_interface(integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION recompile_interface(i_version integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_attr record;
v_sql varchar;
BEGIN
    v_sql:='CREATE TYPE callprofile'||i_version::varchar||'_ty AS (';
    FOR v_attr IN SELECT * from load_interface_out() LOOP
        v_sql:=v_sql||'"'||v_attr.varname::varchar||'" '||v_attr.vartype||',';
    END LOOP;
    v_sql:=left(v_sql,-1)||')'; --removing last ',' added in loop and add )
    EXECUTE v_sql;
END;
$$;


ALTER FUNCTION switch8.recompile_interface(i_version integer) OWNER TO yeti;

--
-- TOC entry 912 (class 1255 OID 23880)
-- Name: route(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch8.callprofile43_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;
v_routing_key varchar;
v_lnp_key varchar;
v_drop_call_if_lnp_fail boolean;
v_lnp_rule class4.routing_plan_lnp_rules%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch8.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;
    v_routing_key=v_ret.dst_prefix_out;


/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

    /*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Routing plan search start',EXTRACT(MILLISECOND from v_end-v_start);
    /*}dbg*/

    select into v_max_call_length,v_drop_call_if_lnp_fail max_call_duration,drop_call_if_lnp_fail from sys.guiconfig limit 1;

    v_routing_key=v_ret.dst_prefix_routing;
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    if v_rp.use_lnp then
        select into v_lnp_rule rules.*
            from class4.routing_plan_lnp_rules rules
            WHERE prefix_range(rules.dst_prefix)@>prefix_range(v_ret.dst_prefix_routing) and rules.routing_plan_id=v_rp.id
            order by length(rules.dst_prefix) limit 1;
        if found then
            v_ret.lnp_database_id=v_lnp_rule.database_id;
            v_lnp_key=v_ret.dst_prefix_routing;
            /*dbg{*/
            v_end:=clock_timestamp();
            RAISE NOTICE '% ms -> LNP. Need LNP lookup, LNP key: %',EXTRACT(MILLISECOND from v_end-v_start),v_lnp_key;
            /*}dbg*/
            IF (v_lnp_rule.req_dst_rewrite_rule IS NOT NULL AND v_lnp_rule.req_dst_rewrite_rule!='') THEN
                v_lnp_key=regexp_replace(v_lnp_key,v_lnp_rule.req_dst_rewrite_rule,v_lnp_rule.req_dst_rewrite_result);
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP key translation. LNP key: %',EXTRACT(MILLISECOND from v_end-v_start),v_lnp_key;
                /*}dbg*/
            END IF;
            -- try cache
            select into v_ret.lrn lrn from class4.lnp_cache where dst=v_lnp_key AND database_id=v_lnp_rule.database_id and expires_at>v_now;
            if found then
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP. Data found in cache, lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                /*}dbg*/
                -- TRANSLATING response from cache
                IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                    v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                END IF;
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP. Translation. lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                /*}dbg*/
                v_routing_key=v_ret.lrn;
            else
                v_ret.lrn=switch8.lnp_resolve(v_ret.lnp_database_id,v_lnp_key);
                if v_ret.lrn is null then -- fail
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Query failed',EXTRACT(MILLISECOND from v_end-v_start);
                    /*}dbg*/
                    if v_drop_call_if_lnp_fail then
                        /*dbg{*/
                        v_end:=clock_timestamp();
                        RAISE NOTICE '% ms -> LNP. Dropping call',EXTRACT(MILLISECOND from v_end-v_start);
                        /*}dbg*/
                        v_ret.disconnect_code_id=8003; --No response from LNP DB
                        RETURN NEXT v_ret;
                        RETURN;
                    end if;
                else
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Success, lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                    /*}dbg*/
                    -- TRANSLATING response from LNP DB
                    IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                        v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                    END IF;
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Translation. lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                    /*}dbg*/
                    v_routing_key=v_ret.lrn;
                end if;
            end if;
        end if;
    end if;


/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start. Routing key: %',EXTRACT(MILLISECOND from v_end-v_start), v_routing_key;
/*}dbg*/
    v_network:=switch8.detect_network(v_ret.dst_prefix_routing);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_routing_key)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_prefix=v_destination.prefix;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
    /*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start. Routing key: %',EXTRACT(MILLISECOND from v_end-v_start),v_routing_key;
    /*}dbg*/
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        AND dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        AND dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_routing_key,'(.*)\*(.*)','\1')::integer;
            v_routing_key=regexp_replace(v_routing_key,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_routing_key;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch8.detect_network(v_routing_key);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate,
                        t_dp.enabled as dp_enabled
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_routing_key)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch8.route(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 1095 (class 1255 OID 23886)
-- Name: route_debug(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch8.callprofile43_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;
/*dbg{*/
    v_start timestamp;
    v_end timestamp;
/*}dbg*/
v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;
v_routing_key varchar;
v_lnp_key varchar;
v_drop_call_if_lnp_fail boolean;
v_lnp_rule class4.routing_plan_lnp_rules%rowtype;
BEGIN
/*dbg{*/
    v_start:=now();
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Execution start',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/

    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from switch leg info',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        /*dbg{*/RAISE NOTICE '% ms -> Got originator address "%:%" from x-headers',EXTRACT(MILLISECOND from v_end-v_start), v_remote_ip,v_remote_port;/*}dbg*/
    END IF;

    v_now:=now();
    v_ret:=switch8.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. lookup started',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> AUTH.  disconnection with 110.Cant find customer or customer locked',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;

/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_customer_auth);
/*}dbg*/

    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. Before rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/
    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;
    v_routing_key=v_ret.dst_prefix_out;


/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> AUTH. After rewrite src_prefix: % , dst_prefix: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.src_prefix_out,v_ret.dst_prefix_out;
/*}dbg*/


--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

    /*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Routing plan search start',EXTRACT(MILLISECOND from v_end-v_start);
    /*}dbg*/

    select into v_max_call_length,v_drop_call_if_lnp_fail max_call_duration,drop_call_if_lnp_fail from sys.guiconfig limit 1;

    v_routing_key=v_ret.dst_prefix_routing;
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    if v_rp.use_lnp then
        select into v_lnp_rule rules.*
            from class4.routing_plan_lnp_rules rules
            WHERE prefix_range(rules.dst_prefix)@>prefix_range(v_ret.dst_prefix_routing) and rules.routing_plan_id=v_rp.id
            order by length(rules.dst_prefix) limit 1;
        if found then
            v_ret.lnp_database_id=v_lnp_rule.database_id;
            v_lnp_key=v_ret.dst_prefix_routing;
            /*dbg{*/
            v_end:=clock_timestamp();
            RAISE NOTICE '% ms -> LNP. Need LNP lookup, LNP key: %',EXTRACT(MILLISECOND from v_end-v_start),v_lnp_key;
            /*}dbg*/
            IF (v_lnp_rule.req_dst_rewrite_rule IS NOT NULL AND v_lnp_rule.req_dst_rewrite_rule!='') THEN
                v_lnp_key=regexp_replace(v_lnp_key,v_lnp_rule.req_dst_rewrite_rule,v_lnp_rule.req_dst_rewrite_result);
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP key translation. LNP key: %',EXTRACT(MILLISECOND from v_end-v_start),v_lnp_key;
                /*}dbg*/
            END IF;
            -- try cache
            select into v_ret.lrn lrn from class4.lnp_cache where dst=v_lnp_key AND database_id=v_lnp_rule.database_id and expires_at>v_now;
            if found then
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP. Data found in cache, lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                /*}dbg*/
                -- TRANSLATING response from cache
                IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                    v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                END IF;
                /*dbg{*/
                v_end:=clock_timestamp();
                RAISE NOTICE '% ms -> LNP. Translation. lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                /*}dbg*/
                v_routing_key=v_ret.lrn;
            else
                v_ret.lrn=switch8.lnp_resolve(v_ret.lnp_database_id,v_lnp_key);
                if v_ret.lrn is null then -- fail
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Query failed',EXTRACT(MILLISECOND from v_end-v_start);
                    /*}dbg*/
                    if v_drop_call_if_lnp_fail then
                        /*dbg{*/
                        v_end:=clock_timestamp();
                        RAISE NOTICE '% ms -> LNP. Dropping call',EXTRACT(MILLISECOND from v_end-v_start);
                        /*}dbg*/
                        v_ret.disconnect_code_id=8003; --No response from LNP DB
                        RETURN NEXT v_ret;
                        RETURN;
                    end if;
                else
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Success, lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                    /*}dbg*/
                    -- TRANSLATING response from LNP DB
                    IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                        v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                    END IF;
                    /*dbg{*/
                    v_end:=clock_timestamp();
                    RAISE NOTICE '% ms -> LNP. Translation. lrn: %',EXTRACT(MILLISECOND from v_end-v_start),v_ret.lrn;
                    /*}dbg*/
                    v_routing_key=v_ret.lrn;
                end if;
            end if;
        end if;
    end if;


/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. search start. Routing key: %',EXTRACT(MILLISECOND from v_end-v_start), v_routing_key;
/*}dbg*/
    v_network:=switch8.detect_network(v_ret.dst_prefix_routing);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_routing_key)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN
/*dbg{*/
        v_end:=clock_timestamp();
        RAISE NOTICE '% ms -> DST.  Destination not found',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DST. found: %',EXTRACT(MILLISECOND from v_end-v_start),hstore(v_destination);
/*}dbg*/

    v_ret.destination_id:=v_destination.id;
    v_ret.destination_prefix=v_destination.prefix;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
    /*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DP. search start. Routing key: %',EXTRACT(MILLISECOND from v_end-v_start),v_routing_key;
    /*}dbg*/
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        AND dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        AND dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_routing_key,'(.*)\*(.*)','\1')::integer;
            v_routing_key=regexp_replace(v_routing_key,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_routing_key;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch8.detect_network(v_routing_key);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate,
                        t_dp.enabled as dp_enabled
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                
                /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_routing_key)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    
                    /*dbg{*/SELECT * from process_dp_debug(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}dbg*/
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> Dialpeer search done',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;
/*dbg{*/
    v_end:=clock_timestamp();
    RAISE NOTICE '% ms -> DONE.',EXTRACT(MILLISECOND from v_end-v_start);
/*}dbg*/
    RETURN;
END;
$$;


ALTER FUNCTION switch8.route_debug(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 1096 (class 1255 OID 23888)
-- Name: route_release(integer, integer, inet, integer, inet, integer, character varying, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, integer, character varying, character varying, character varying, character varying, inet, integer); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) RETURNS SETOF callprofile43_ty
    LANGUAGE plpgsql SECURITY DEFINER ROWS 10
    AS $$
DECLARE
v_ret switch8.callprofile43_ty;
i integer;
v_ip inet;
v_remote_ip inet;
v_remote_port INTEGER;
v_customer_auth class4.customers_auth%rowtype;
v_destination class4.destinations%rowtype;
v_dialpeer record;
v_rateplan class4.rateplans%rowtype;
v_dst_gw class4.gateways%rowtype;
v_orig_gw class4.gateways%rowtype;
v_rp class4.routing_plans%rowtype;
v_customer_allowtime real;
v_vendor_allowtime real;
v_sorting_id integer;
v_customer_acc integer;
v_route_found boolean:=false;
v_c_acc billing.accounts%rowtype;
v_v_acc billing.accounts%rowtype;
v_network sys.network_prefixes%rowtype;
routedata record;

v_rate NUMERIC;
v_now timestamp;
v_x_yeti_auth varchar;
v_uri_domain varchar;
v_rate_limit float:='Infinity';
v_test_vendor_id integer;
v_random float;
v_max_call_length integer;
v_routing_key varchar;
v_lnp_key varchar;
v_drop_call_if_lnp_fail boolean;
v_lnp_rule class4.routing_plan_lnp_rules%rowtype;
BEGIN


    IF i_x_orig_ip IS NULL OR i_x_orig_port IS NULL THEN
        v_remote_ip:=i_remote_ip;
        v_remote_port:=i_remote_port;
        
    ELSE
        v_remote_ip:=i_x_orig_ip;
        v_remote_port:=i_x_orig_port;
        
    END IF;

    v_now:=now();
    v_ret:=switch8.new_profile();
    v_ret.cache_time = 10;

    v_ret.diversion_in:=i_diversion;
    v_ret.diversion_out:=i_diversion; -- FIXME

    v_ret.auth_orig_ip = v_remote_ip;
    v_ret.auth_orig_port = v_remote_port;

    v_ret.src_name_in:=i_from_dsp;
    v_ret.src_name_out:=i_from_dsp; --FIXME

    v_ret.src_prefix_in:=i_from_name;
    v_ret.dst_prefix_in:=i_uri_name;
    v_ret.dst_prefix_out:=v_ret.dst_prefix_in;
    v_ret.src_prefix_out:=v_ret.src_prefix_in;

    v_x_yeti_auth:=COALESCE(i_x_yeti_auth,'');
    v_uri_domain:=COALESCE(i_uri_domain,'');
    SELECT into v_customer_auth ca.*
    from class4.customers_auth ca
        JOIN public.contractors c ON c.id=ca.customer_id
        WHERE ca.enabled AND
            ca.ip>>=v_remote_ip AND
            prefix_range(ca.dst_prefix)@>prefix_range(v_ret.dst_prefix_in) AND
            prefix_range(ca.src_prefix)@>prefix_range(v_ret.src_prefix_in) AND
            (ca.pop_id=i_pop_id or ca.pop_id is null) and
            COALESCE(ca.x_yeti_auth,'')=v_x_yeti_auth AND
            COALESCE(nullif(ca.uri_domain,'')=v_uri_domain,true) AND
            c.enabled
            and c.customer
        ORDER BY masklen(ca.ip) DESC, length(ca.dst_prefix) DESC, length(ca.src_prefix) DESC
        LIMIT 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=110; --Cant find customer or customer locked
        RETURN NEXT v_ret;
        RETURN;
    END IF;



    -- feel customer data
    v_ret.dump_level_id:=v_customer_auth.dump_level_id;
    v_ret.customer_auth_id:=v_customer_auth.id;
    v_ret.customer_id:=v_customer_auth.customer_id;
    v_ret.rateplan_id:=v_customer_auth.rateplan_id;
    v_ret.routing_plan_id:=v_customer_auth.routing_plan_id;
    v_ret.customer_acc_id:=v_customer_auth.account_id;
    v_ret.orig_gw_id:=v_customer_auth.gateway_id;

    SELECT INTO STRICT v_c_acc * FROM billing.accounts  WHERE id=v_customer_auth.account_id;
    if v_c_acc.balance<=v_c_acc.min_balance then
        v_ret.disconnect_code_id=8000; --No enought customer balance
        RETURN NEXT v_ret;
        RETURN;
    end if;

    v_ret.resources:=v_ret.resources||'1:'||v_customer_auth.account_id::varchar||':'||v_c_acc.origination_capacity::varchar||':1;';
    v_ret.resources:=v_ret.resources||'3:'||v_customer_auth.id::varchar||':'||v_customer_auth.capacity::varchar||':1;';

    SELECT into v_orig_gw * from class4.gateways WHERE id=v_customer_auth.gateway_id;

    /*
        number rewriting _Before_ routing
    */

    IF (v_customer_auth.dst_rewrite_rule IS NOT NULL AND v_customer_auth.dst_rewrite_rule!='') THEN
        v_ret.dst_prefix_out=regexp_replace(v_ret.dst_prefix_out,v_customer_auth.dst_rewrite_rule,v_customer_auth.dst_rewrite_result);
    END IF;

    IF (v_customer_auth.src_rewrite_rule IS NOT NULL AND v_customer_auth.src_rewrite_rule!='') THEN
        v_ret.src_prefix_out=regexp_replace(v_ret.src_prefix_out,v_customer_auth.src_rewrite_rule,v_customer_auth.src_rewrite_result);
    END IF;
    --  setting numbers used for routing & billing
    v_ret.src_prefix_routing=v_ret.src_prefix_out;
    v_ret.dst_prefix_routing=v_ret.dst_prefix_out;
    v_routing_key=v_ret.dst_prefix_out;





--- Blacklist processing
    if v_customer_auth.dst_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.dst_blacklist_id and bl.key=v_ret.dst_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8001; --destination blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;
    if v_customer_auth.src_blacklist_id is not null then
        perform * from class4.blacklist_items bl
        where bl.blacklist_id=v_customer_auth.src_blacklist_id and bl.key=v_ret.src_prefix_out;
        IF FOUND then
            v_ret.disconnect_code_id=8002; --source blacklisted
            RETURN NEXT v_ret;
            RETURN;
        end if;
    end if;

    

    select into v_max_call_length,v_drop_call_if_lnp_fail max_call_duration,drop_call_if_lnp_fail from sys.guiconfig limit 1;

    v_routing_key=v_ret.dst_prefix_routing;
    SELECT INTO v_rp * from class4.routing_plans WHERE id=v_customer_auth.routing_plan_id;
    if v_rp.use_lnp then
        select into v_lnp_rule rules.*
            from class4.routing_plan_lnp_rules rules
            WHERE prefix_range(rules.dst_prefix)@>prefix_range(v_ret.dst_prefix_routing) and rules.routing_plan_id=v_rp.id
            order by length(rules.dst_prefix) limit 1;
        if found then
            v_ret.lnp_database_id=v_lnp_rule.database_id;
            v_lnp_key=v_ret.dst_prefix_routing;
            
            IF (v_lnp_rule.req_dst_rewrite_rule IS NOT NULL AND v_lnp_rule.req_dst_rewrite_rule!='') THEN
                v_lnp_key=regexp_replace(v_lnp_key,v_lnp_rule.req_dst_rewrite_rule,v_lnp_rule.req_dst_rewrite_result);
                
            END IF;
            -- try cache
            select into v_ret.lrn lrn from class4.lnp_cache where dst=v_lnp_key AND database_id=v_lnp_rule.database_id and expires_at>v_now;
            if found then
                
                -- TRANSLATING response from cache
                IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                    v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                END IF;
                
                v_routing_key=v_ret.lrn;
            else
                v_ret.lrn=switch8.lnp_resolve(v_ret.lnp_database_id,v_lnp_key);
                if v_ret.lrn is null then -- fail
                    
                    if v_drop_call_if_lnp_fail then
                        
                        v_ret.disconnect_code_id=8003; --No response from LNP DB
                        RETURN NEXT v_ret;
                        RETURN;
                    end if;
                else
                    
                    -- TRANSLATING response from LNP DB
                    IF (v_lnp_rule.lrn_rewrite_rule IS NOT NULL AND v_lnp_rule.lrn_rewrite_rule!='') THEN
                        v_ret.lrn=regexp_replace(v_ret.lrn,v_lnp_rule.lrn_rewrite_rule,v_lnp_rule.lrn_rewrite_result);
                    END IF;
                    
                    v_routing_key=v_ret.lrn;
                end if;
            end if;
        end if;
    end if;



    v_network:=switch8.detect_network(v_ret.dst_prefix_routing);
    v_ret.dst_network_id=v_network.network_id;
    v_ret.dst_country_id=v_network.country_id;

    SELECT into v_destination d.*/*,switch.tracelog(d.*)*/ from class4.destinations d
    WHERE
        prefix_range(prefix)@>prefix_range(v_routing_key)
        AND rateplan_id=v_customer_auth.rateplan_id
        AND enabled
        AND valid_from <= v_now
        AND valid_till >= v_now
    ORDER BY length(prefix) DESC limit 1;
    IF NOT FOUND THEN

        v_ret.disconnect_code_id=111; --Cant find destination prefix
        RETURN NEXT v_ret;
        RETURN;
    END IF;


    v_ret.destination_id:=v_destination.id;
    v_ret.destination_prefix=v_destination.prefix;
    v_ret.destination_initial_interval:=v_destination.initial_interval;
    v_ret.destination_fee:=v_destination.connect_fee::varchar;
    v_ret.destination_next_interval:=v_destination.next_interval;
    v_ret.destination_rate_policy_id:=v_destination.rate_policy_id;
    IF v_destination.reject_calls THEN
        v_ret.disconnect_code_id=112; --Rejected by destination
        RETURN NEXT v_ret;
        RETURN;
    END IF;
    select into v_rateplan * from class4.rateplans where id=v_customer_auth.rateplan_id;
    if COALESCE(v_destination.profit_control_mode_id,v_rateplan.profit_control_mode_id)=2 then -- per call
        v_rate_limit=v_destination.next_rate::float;
    end if;


    /*
                FIND dialpeers logic. Queries must use prefix index for best performance
    */
    
    CASE v_rp.sorting_id
        WHEN'1' THEN -- LCR,Prio, ACD&ASR control
            FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.lcr_rate_multiplier AS dp_lcr_rate_multiplier,
                            t_dp.priority AS dp_priority,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        AND dp_next_rate<v_rate_limit
                        AND dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY dp_next_rate*dp_lcr_rate_multiplier, dp_priority DESC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                end LOOP;
        WHEN '2' THEN --LCR, no prio, No ACD&ASR control
                FOR routedata IN (
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                          --  (t_vendor_gateway.*)::class4.gateways as s1_vendor_gateway,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        AND dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                END LOOP;
        WHEN '3' THEN --Prio, LCR, ACD&ASR control
                FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
                )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                END LOOP;
        WHEN'4' THEN -- LCRD, Prio, ACD&ACR control
                FOR routedata IN (
                    WITH step1 AS(
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            ((t_dp.next_rate - first_value(t_dp.next_rate) OVER(ORDER BY t_dp.next_rate ASC)) > v_rp.rate_delta_max)::INTEGER *(t_dp.next_rate + t_dp.priority) - t_dp.priority AS r2,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id = t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    from step1
                    WHERE
                        r=1
                        and dp_next_rate < v_rate_limit
                        and dp_enabled
                        and not dp_locked --ACD&ASR control for DP
                    ORDER BY r2 ASC limit 10
                ) LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
                end LOOP;
         WHEN'5' THEN -- Route test
            v_test_vendor_id=regexp_replace(v_routing_key,'(.*)\*(.*)','\1')::integer;
            v_routing_key=regexp_replace(v_routing_key,'(.*)\*(.*)','\2');
            v_ret.dst_prefix_out=v_routing_key;
            -- cheat( Prefix changed by regexp, we need recalculate destination)
            v_network:=switch8.detect_network(v_routing_key);
            v_ret.dst_network_id=v_network.network_id;
            v_ret.dst_country_id=v_network.country_id;
            FOR routedata IN (
                WITH step1 AS( -- filtering
                    SELECT
                        (t_dp.*)::class4.dialpeers as s1_dialpeer,
                        (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                        rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                        t_dp.priority as dp_metric_priority,
                        t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                        t_dp.next_rate as dp_next_rate,
                        t_dp.enabled as dp_enabled
                    FROM class4.dialpeers t_dp
                        JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                        JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                    WHERE
                        prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                        AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                        and t_dp.valid_from<=v_now
                        and t_dp.valid_till>=v_now
                        AND t_vendor_account.balance<t_vendor_account.max_balance
                        and t_dp.vendor_id=v_test_vendor_id
                )
                SELECT s1_dialpeer as s2_dialpeer,
                       s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and dp_enabled
                        and dp_next_rate<v_rate_limit
                    ORDER BY dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                RETURN QUERY
                /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                
            END LOOP;
        WHEN'6' THEN -- QD.Static,LCR,ACD&ACR control
            v_random:=random();
            FOR routedata in(
                    WITH step1 AS( -- filtering
                        SELECT
                            (t_dp.*)::class4.dialpeers as s1_dialpeer,
                            (t_vendor_account.*)::billing.accounts as s1_vendor_account,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(t_dp.prefix) desc) as r,
                            rank() OVER (PARTITION BY t_dp.vendor_id ORDER BY length(coalesce(rpsr.prefix,'')) desc) as r2,
                            t_dp.priority as dp_metric_priority,
                            t_dp.next_rate*t_dp.lcr_rate_multiplier as dp_metric,
                            t_dp.next_rate as dp_next_rate,
                            t_dp.locked as dp_locked,
                            t_dp.enabled as dp_enabled,
                            t_dp.force_hit_rate as dp_force_hit_rate
                        FROM class4.dialpeers t_dp
                            JOIN billing.accounts t_vendor_account ON t_dp.account_id=t_vendor_account.id
                            JOIN class4.routing_plan_groups t_rpg ON t_dp.routing_group_id=t_rpg.routing_group_id
                            left join class4.routing_plan_static_routes rpsr
                                ON rpsr.routing_plan_id=v_customer_auth.routing_plan_id
                                and rpsr.vendor_id=t_dp.vendor_id
                                AND prefix_range(rpsr.prefix)@>prefix_range(v_routing_key)
                        WHERE
                            prefix_range(t_dp.prefix)@>prefix_range(v_routing_key)
                            AND t_rpg.routing_plan_id=v_customer_auth.routing_plan_id
                            and t_dp.valid_from<=v_now
                            and t_dp.valid_till>=v_now
                            AND t_vendor_account.balance<t_vendor_account.max_balance
                    )
                    SELECT s1_dialpeer as s2_dialpeer,
                           s1_vendor_account as s2_vendor_account
                    FROM step1
                    WHERE
                        r=1
                        and r2=1
                        and dp_next_rate<v_rate_limit
                        and dp_enabled
                        and not dp_locked
                    ORDER BY coalesce(v_random<=dp_force_hit_rate,false) desc, dp_metric_priority DESC, dp_metric limit 10
            )LOOP
                    RETURN QUERY
                    /*rel{*/SELECT * from process_dp_release(v_ret,v_destination,routedata.s2_dialpeer,v_c_acc,v_orig_gw,routedata.s2_vendor_account,i_pop_id,v_customer_auth.send_billing_information,v_max_call_length);/*}rel*/
                    
            END LOOP;
        ELSE
                RAISE NOTICE 'BUG: unknown sorting_id';
        END CASE;

    v_ret.disconnect_code_id=113; --No routes
    RETURN NEXT v_ret;

    RETURN;
END;
$$;


ALTER FUNCTION switch8.route_release(i_node_id integer, i_pop_id integer, i_remote_ip inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp character varying, i_from_name character varying, i_from_domain character varying, i_from_port integer, i_to_name character varying, i_to_domain character varying, i_to_port integer, i_contact_name character varying, i_contact_domain character varying, i_contact_port integer, i_uri_name character varying, i_uri_domain character varying, i_x_yeti_auth character varying, i_diversion character varying, i_x_orig_ip inet, i_x_orig_port integer) OWNER TO yeti;

--
-- TOC entry 1082 (class 1255 OID 23811)
-- Name: tracelog(class4.destinations); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.destinations) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO'switch8.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch8.tracelog(i_in class4.destinations) OWNER TO yeti;

--
-- TOC entry 1083 (class 1255 OID 23812)
-- Name: tracelog(class4.dialpeers); Type: FUNCTION; Schema: switch8; Owner: yeti
--

CREATE FUNCTION tracelog(i_in class4.dialpeers) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
BEGIN
    RAISE INFO 'switch8.tracelog: % : %',clock_timestamp()::char(25),i_in;
END;
$$;


ALTER FUNCTION switch8.tracelog(i_in class4.dialpeers) OWNER TO yeti;

SET search_path = sys, pg_catalog;

--
-- TOC entry 813 (class 1255 OID 17346)
-- Name: cdr_createtable(integer); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdr_createtable(i_offset integer) RETURNS void
    LANGUAGE plpgsql COST 10000
    AS $$
DECLARE
v_tbname varchar;
v_ftbname varchar;
v_tdate varchar;
v_start varchar;
v_end varchar;
v_c integer;
v_sql varchar;

BEGIN
        -- get tablename for next month;
        v_tdate:=to_char(now()+'1 month'::interval - i_offset * '1 month'::interval ,'YYYYMM');
        v_start:=to_char(now()+'1 month'::interval - i_offset * '1 month'::interval ,'YYYY-MM-01');
        v_end:=to_char(now()+'2 month'::interval - i_offset * '1 month'::interval,'YYYY-MM-01');

        v_tbname:='cdrs_'||v_tdate;
        v_ftbname:='class4.'||v_tbname::varchar;
        
        -- CHECK if table exists
        SELECT into v_c count(*) from pg_tables where schemaname='class4' and tablename=v_tbname;
        IF v_c>0 THEN
                RAISE NOTICE 'sys.cdr_createtable: next table % already created',v_tbname;
                RETURN;
        ELSE
                v_sql:='CREATE TABLE '||v_ftbname||'(
                CONSTRAINT '||v_tbname||'_time_start_check CHECK (
                        time_start >= '''||v_start||'''::date
                        AND time_start < '''||v_end||'''::date
                )
                ) INHERITS (class4.cdrs)';
                EXECUTE v_sql;
                v_sql:='ALTER TABLE '||v_ftbname||' ADD PRIMARY KEY(id)';
                EXECUTE v_sql;
                RAISE NOTICE 'sys.cdr_createtable: next table % creating started',v_tbname;
                PERFORM sys.cdr_reindex(v_tbname);
                -- update trigger
                INSERT INTO sys.cdr_tables(date_start,date_stop,"name",writable,readable) VALUES (v_start,v_end,v_ftbname,'t','t');
                PERFORM sys.cdrtable_tgr_reload();
        END IF;
END;
$$;


ALTER FUNCTION sys.cdr_createtable(i_offset integer) OWNER TO yeti;

--
-- TOC entry 814 (class 1255 OID 17347)
-- Name: cdr_drop_table(character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdr_drop_table(i_tbname character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
v_t record;
BEGIN
    SELECT INTO v_t * from sys.cdr_tables WHERE "name"=i_tbname;
    IF FOUND THEN
        if v_t.writable THEN
            RAISE EXCEPTION 'sys.cdr_drop_table: table used, cant drop.';
        ELSE
            EXECUTE 'DROP TABLE '||v_t.name;
            DELETE FROM sys.cdr_tables where id=v_t.id;
            PERFORM cdrtable_tgr_reload();
        END IF;
    END IF;
END;
$$;


ALTER FUNCTION sys.cdr_drop_table(i_tbname character varying) OWNER TO yeti;

--
-- TOC entry 815 (class 1255 OID 17348)
-- Name: cdr_export_data(character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdr_export_data(i_tbname character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_file varchar:='/var/spool/yeti-rs/';
BEGIN
    v_file:=v_file||i_tbname||'-'||now()::varchar;
    execute 'COPY '||i_tbname||' TO '''||v_file||''' WITH CSV HEADER QUOTE AS ''"'' FORCE QUOTE *';
END;
$$;


ALTER FUNCTION sys.cdr_export_data(i_tbname character varying) OWNER TO yeti;

--
-- TOC entry 816 (class 1255 OID 17349)
-- Name: cdr_export_data(character varying, character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdr_export_data(i_tbname character varying, i_dir character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_file varchar;
BEGIN
    v_file:=i_dir||'/'||i_tbname||'-'||now()::varchar;
    execute 'COPY '||i_tbname||' TO '''||v_file||''' WITH CSV HEADER QUOTE AS ''"'' FORCE QUOTE *';
END;
$$;


ALTER FUNCTION sys.cdr_export_data(i_tbname character varying, i_dir character varying) OWNER TO yeti;

--
-- TOC entry 817 (class 1255 OID 17350)
-- Name: cdr_reindex(character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdr_reindex(i_tbname character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
v_c integer;
v_sql varchar;
v_indname varchar;
v_chname varchar:='class4';
BEGIN
        SELECT into v_c count(*) from pg_tables where schemaname='class4' and tablename=i_tbname;
        IF v_c=0 THEN
                RAISE EXCEPTION 'sys.cdr_reindex: table % not exist',i_tbname;
        ELSE
                -- CHECK primary key
                SELECT into v_indname conname from pg_catalog.pg_constraint  where conname like i_tbname||'_pkey%';
                IF NOT FOUND THEN
                        v_sql:='ALTER TABLE '||i_tbname||' ADD PRIMARY KEY (id);';
                        EXECUTE v_sql;
                        RAISE NOTICE 'sys.cdr_reindex: % add primary key' ,i_tbname;
                END IF;
/*
                -- UNIQUE index on out_call_id;
                SELECT into v_indname indexname FROM pg_catalog.pg_indexes WHERE schemaname=v_chname AND tablename=i_tbname AND indexdef LIKE '%(out_call_id)%';
                IF NOT FOUND THEN
                        v_sql:='CREATE UNIQUE INDEX ON '||v_chname||'.'||i_tbname||' USING btree (out_call_id);';
                        RAISE NOTICE 'sys.cdr_reindex: % add index out_call_id' ,i_tbname;
                        EXECUTE v_sql;
                ELSE
                        v_sql:='CREATE UNIQUE INDEX ON '||v_chname||'.'||i_tbname||' USING btree (out_call_id);';
                        EXECUTE v_sql;
                        v_sql:='DROP INDEX cdrs.'||v_indname;
                        EXECUTE v_sql;
                        RAISE NOTICE 'sys.cdr_reindex: % reindex out_call_id' ,i_tbname;
                END IF;
*/
                -- index on time_inviteprocessed;
                SELECT into v_indname indexname FROM pg_catalog.pg_indexes WHERE schemaname=v_chname AND tablename=i_tbname AND indexdef LIKE '%(time_start)%';
                IF NOT FOUND THEN
                        v_sql:='CREATE INDEX ON '||v_chname||'.'||i_tbname||' USING btree (time_start);';
                        EXECUTE v_sql;
                        RAISE NOTICE 'sys.cdr_reindex: % add index time_start' ,i_tbname;
                ELSE
                        v_sql:='CREATE INDEX ON '||v_chname||'.'||i_tbname||' USING btree (time_start);';
                        EXECUTE v_sql;
                        v_sql:='DROP INDEX cdrs.'||v_indname;
                        EXECUTE v_sql;
                        RAISE NOTICE 'sys.cdr_reindex: % reindex time_invite' ,i_tbname;
                END IF;

        END IF;
        RETURN ;
END;
$$;


ALTER FUNCTION sys.cdr_reindex(i_tbname character varying) OWNER TO yeti;

--
-- TOC entry 818 (class 1255 OID 17351)
-- Name: cdrtable_tgr_reload(); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION cdrtable_tgr_reload() RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
v_tbname varchar;
v_sql1 varchar:='CREATE OR REPLACE FUNCTION class4.cdrs_i_tgf() RETURNS trigger AS $trg$ 
BEGIN  [MEAT]  
RETURN NULL; 
END; $trg$ LANGUAGE plpgsql VOLATILE COST 100';
--v_sql2 varchar:='ALTER FUNCTION cdrs.cdrs_i_tgf() OWNER TO accadmin;';
v_tb_row record;
v_meat varchar;
v_prfx varchar;
v_counter integer;
BEGIN
        v_meat:='';
        v_counter:='1';
        PERFORM * FROM sys.cdr_tables WHERE writable='t';
        IF NOT FOUND THEN
            RAISE EXCEPTION 'no tables for write data';
        end IF;
        FOR v_tb_row IN SELECT * FROM sys.cdr_tables WHERE writable='t' ORDER BY date_start LOOP
                IF v_counter=1 THEN
                        v_prfx='IF ';
                ELSE 
                        v_prfx='ELSIF ';
                END IF;
                v_meat:=v_meat||v_prfx||'( NEW.time_start >= DATE '''||v_tb_row.date_start||''' AND NEW.time_start < DATE '''||v_tb_row.date_stop||''' ) THEN INSERT INTO '||v_tb_row.name||' VALUES (NEW.*);'|| E'\n';
                v_counter:=v_counter+1;
        END LOOP;
        v_meat:=v_meat||' ELSE '|| E'\n'||' RAISE EXCEPTION ''class4.cdrs_i_tg: time_start out of range.''; '||E'\n'||' END IF;';
        v_sql1:=REPLACE(v_sql1,'[MEAT]',v_meat);
        set standard_conforming_strings=on;
        EXECUTE v_sql1;
      --  EXECUTE v_sql2;
        RAISE NOTICE 'sys.cdrtable_tgr_reload: CDR trigger reloaded';
       -- RETURN 'OK';
END;
$_$;


ALTER FUNCTION sys.cdrtable_tgr_reload() OWNER TO yeti;

--
-- TOC entry 819 (class 1255 OID 17352)
-- Name: checkcode(); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION checkcode() RETURNS TABLE(o_schema character varying, o_name character varying, o_hash character varying)
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
BEGIN 
RETURN QUERY
SELECT pn.nspname::varchar,
pp.proname::varchar,
md5(pp.prosrc)::varchar
from pg_proc pp 
join pg_namespace pn on pp.pronamespace=pn.oid
join pg_roles pa ON pa.oid=proowner
WHERE pn.nspname !~ '^pg_' AND 
pn.nspname <> 'information_schema' AND
pa.rolname=current_user
ORDER BY pn.nspname,pp.proname,pp.proargtypes;
END;
$$;


ALTER FUNCTION sys.checkcode() OWNER TO yeti;

--
-- TOC entry 820 (class 1255 OID 17353)
-- Name: checkstat(); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION checkstat() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
        v_lock record;
BEGIN 
        /* DP  locking*/
        FOR v_lock IN SELECT  dp.id AS id,
                                dp.asr_limit AS asr_limit,
                                dp.acd_limit as acd_limit,
                                dp.vendor_id as vendor_id,
                                st.asr as asr,
                                st.acd as acd
                        FROM class4.dialpeers dp LEFT JOIN runtime_stats.dialpeers_stats st
                        ON dp.id=st.dialpeer_id
                        WHERE   (dp.asr_limit>0 AND asr<asr_limit AND NOT dp.locked) OR
                                (dp.acd_limit>0 AND acd<acd_limit AND NOT dp.locked) OR
                                (dp.locked AND st.asr IS NULL)
        LOOP
                IF NOT v_lock.locked THEN
                        -- locking
                        IF v_lock.asr<v_lock.asr_limit THEN
                                --process asr
                                --sys.dplock_event(v_lock,asr);
                        ELSE 
                                --sys.dplock_event(v_lock,acd);
                                --process acd
                        END IF;
                        UPDATE runtime_stats.dialpeers_stats set locked_at=now() where id=v_lock.id;
                        UPDATE class4.dialpeers set locked='t' where id=v_lock.id;
                 ELSE
                        --unlocking if good quality or stats not found
                        IF v_lock.asr>=v_lock.asr_limit OR v_lock.acd>=v_lock.acd_limit OR v_lock.asr IS NULL THEN
                                UPDATE runtime_stats.dialpeers_stats set unlocked_at=now() where id=v_lock.id;
                                UPDATE class4.dialpeers set locked='f' where id=v_lock.id;
                        END IF;
                 END IF;
        END LOOP;

        /* GW locking */
        FOR v_lock IN SELECT    gw.id AS id,
                                gw.asr_limit AS asr_limit,
                                gw.acd_limit as acd_limit,
                                gw.contractor_id AS contractor_id,
                                st.asr as asr,
                                st.acd as acd
                        FROM class4.gateways gw JOIN runtime_stats.gateways_stats st
                        ON gw.id=st.gateway_id
                        WHERE acd<acd_limit OR acd<acd_limit and not gw.locked
        LOOP
                IF v_lock.asr<v_lock.asr_limit THEN
                        --process asr
                ELSE 
                        --process acd
                END IF;
                UPDATE runtime_stats.gateways_stats set locked_at=now() where id=v_lock.id;
                UPDATE class4.gateways set locked='t' where id=v_lock.id;
        END LOOP;

        --FOR v_id in SELECT id from runtime_stats.dialpeers_stats WHERE locked)

END;
$$;


ALTER FUNCTION sys.checkstat() OWNER TO yeti;

--
-- TOC entry 821 (class 1255 OID 17354)
-- Name: codecheck(); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION codecheck() RETURNS TABLE(o_schema character varying, o_name character varying, o_hash character varying)
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
BEGIN 
RETURN QUERY
SELECT pn.nspname::varchar,
pp.proname::varchar,
md5(pp.prosrc)::varchar
from pg_proc pp 
join pg_namespace pn on pp.pronamespace=pn.oid
join pg_roles pa ON pa.oid=proowner
WHERE pn.nspname !~ '^pg_' AND 
pn.nspname <> 'information_schema' AND
pa.rolname=current_user
ORDER BY pn.nspname,pp.proname;
END;
$$;


ALTER FUNCTION sys.codecheck() OWNER TO yeti;

--
-- TOC entry 822 (class 1255 OID 17355)
-- Name: codediff(character varying, smallint, character varying, character varying, character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION codediff(i_host character varying, i_port smallint, i_dbname character varying, i_username character varying, i_password character varying) RETURNS TABLE(o_schema character varying, o_name character varying, o_local_hash character varying, o_remote_hash character varying, o_need_update boolean)
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
    v_DBLINK_CONNECT text:= 'dbname=''[DBNAME]'' user=''[USER]'' password=''[PASS]'' port=''[PORT]'' host=''[HOST]''';
BEGIN 
    v_DBLINK_CONNECT:=replace(v_DBLINK_CONNECT,'[HOST]',i_host::text);
    v_DBLINK_CONNECT:=replace(v_DBLINK_CONNECT,'[PORT]',i_port::text);
    v_DBLINK_CONNECT:=replace(v_DBLINK_CONNECT,'[USER]',i_username::text);
    v_DBLINK_CONNECT:=replace(v_DBLINK_CONNECT,'[PASS]',i_password::text);
    v_DBLINK_CONNECT:=replace(v_DBLINK_CONNECT,'[DBNAME]',i_dbname::text);
    BEGIN
        PERFORM public.dblink_connect('dblink_connamenum',v_DBLINK_CONNECT);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE WARNING 'reconnecting datalink';
            PERFORM dblink_disconnect ('dblink_connamenum');
    END;

    BEGIn
        PERFORM public.dblink_connect('dblink_connamenum',v_DBLINK_CONNECT);
        RETURN QUERY
            WITH r AS (
                SELECT * from public.dblink('dblink_connamenum','SELECT o_schema,o_name,o_hash from sys.codecheck();') AS H(o_schema varchar ,o_name varchar,o_hash varchar)
            ),
            l as (
                SELECT * from sys.codecheck()
            )
            SELECT COALESCE(l.o_schema,r.o_schema)::varchar as o_schema ,
            COALESCE(l.o_name,r.o_name)::varchar as o_name, 
            l.o_hash::varchar as o_local_hash,
            r.o_hash::varchar as o_remote_hash,
            COALESCE(l.o_hash!=r.o_hash,true) as need_update
            FROM l FULL JOIN r ON l.o_schema=r.o_schema AND l.o_name=r.o_name;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE EXCEPTION 'Error';
    END;

END;
$$;


ALTER FUNCTION sys.codediff(i_host character varying, i_port smallint, i_dbname character varying, i_username character varying, i_password character varying) OWNER TO yeti;

--
-- TOC entry 823 (class 1255 OID 17356)
-- Name: hex_to_int(text); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION hex_to_int(i_hex text, OUT o_dec integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$ 
BEGIN 
    EXECUTE 'SELECT x''' || i_hex || '''::integer' INTO o_dec; 
    RETURN; 
END $$;


ALTER FUNCTION sys.hex_to_int(i_hex text, OUT o_dec integer) OWNER TO yeti;

--
-- TOC entry 824 (class 1255 OID 17357)
-- Name: logic_log(character varying, integer, character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION logic_log(i_source character varying, i_level integer, i_msg character varying) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
BEGIN
    --TODO: loglevel checking;
    INSERT INTO logs.logic_log(source,txid,"level",msg,"timestamp") values (i_source,txid_current(),i_level,i_msg,clock_timestamp());
END;
$$;


ALTER FUNCTION sys.logic_log(i_source character varying, i_level integer, i_msg character varying) OWNER TO yeti;

--
-- TOC entry 825 (class 1255 OID 17358)
-- Name: system_clean(); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION system_clean() RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
BEGIN 
    delete from class4.cdrs;
    delete from billing.invoices;
    delete from class4.customers_auth;
    delete from runtime_stats.dialpeers_stats;
    delete from runtime_stats.gateways_stats;
    delete from class4.dialpeers;
    delete from class4.gateways;
    delete from class4.destinations;
    delete from class4.rateplans;
    delete from class4.routing_groups;
    delete from billing.payments;
    delete from billing.accounts;
    delete from logs.logic_log;
END;
$$;


ALTER FUNCTION sys.system_clean() OWNER TO yeti;

--
-- TOC entry 826 (class 1255 OID 17359)
-- Name: version_check(integer); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION version_check(i_ver integer) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_num integer;
BEGIN 
    select into v_num "number" from sys.version ORDER BY "number" desc limit 1;
    if v_num=i_ver THEN
        RETURN;
    END IF;
    RAISE EXCEPTION 'Invalid version';
END;
$$;


ALTER FUNCTION sys.version_check(i_ver integer) OWNER TO yeti;

--
-- TOC entry 827 (class 1255 OID 17360)
-- Name: version_up(integer, character varying); Type: FUNCTION; Schema: sys; Owner: yeti
--

CREATE FUNCTION version_up(i_ver integer, i_comment character varying) RETURNS void
    LANGUAGE plpgsql COST 10
    AS $$
DECLARE
v_num integer;
BEGIN 
    select into v_num "number" from sys.version ORDER BY "number" desc limit 1;
    if NOT FOUND THEN
        RAISE WARNING 'first verstion';
    ELSE
        if v_num>i_ver THEN
            RAISE EXCEPTION 'database version too high';
        end if;
    END IF;
    INSERT INTO sys.version("number","comment") values(i_ver,i_comment);
END;
$$;


ALTER FUNCTION sys.version_up(i_ver integer, i_comment character varying) OWNER TO yeti;

SET search_path = billing, pg_catalog;

--
-- TOC entry 195 (class 1259 OID 17361)
-- Name: accounts_id_seq; Type: SEQUENCE; Schema: billing; Owner: yeti
--

CREATE SEQUENCE accounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE billing.accounts_id_seq OWNER TO yeti;

--
-- TOC entry 4738 (class 0 OID 0)
-- Dependencies: 195
-- Name: accounts_id_seq; Type: SEQUENCE OWNED BY; Schema: billing; Owner: yeti
--

ALTER SEQUENCE accounts_id_seq OWNED BY accounts.id;


--
-- TOC entry 312 (class 1259 OID 19093)
-- Name: cdr_batches; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_batches (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    size integer NOT NULL,
    raw_data text
);


ALTER TABLE billing.cdr_batches OWNER TO yeti;

--
-- TOC entry 376 (class 1259 OID 20733)
-- Name: invoice_periods; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE invoice_periods (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE billing.invoice_periods OWNER TO yeti;

--
-- TOC entry 375 (class 1259 OID 20731)
-- Name: invoice_periods_id_seq; Type: SEQUENCE; Schema: billing; Owner: yeti
--

CREATE SEQUENCE invoice_periods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE billing.invoice_periods_id_seq OWNER TO yeti;

--
-- TOC entry 4739 (class 0 OID 0)
-- Dependencies: 375
-- Name: invoice_periods_id_seq; Type: SEQUENCE OWNED BY; Schema: billing; Owner: yeti
--

ALTER SEQUENCE invoice_periods_id_seq OWNED BY invoice_periods.id;


--
-- TOC entry 307 (class 1259 OID 18876)
-- Name: invoice_templates; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE invoice_templates (
    id integer NOT NULL,
    name character varying NOT NULL,
    filename character varying NOT NULL,
    data bytea,
    sha1 character varying,
    created_at timestamp with time zone
);


ALTER TABLE billing.invoice_templates OWNER TO yeti;

--
-- TOC entry 196 (class 1259 OID 17363)
-- Name: invoices; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE invoices (
    id integer NOT NULL,
    account_id integer NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    amount numeric NOT NULL,
    vendor_invoice boolean DEFAULT false NOT NULL,
    cdrs bigint NOT NULL,
    first_cdr_date timestamp with time zone,
    last_cdr_date timestamp with time zone,
    contractor_id integer
);


ALTER TABLE billing.invoices OWNER TO yeti;

--
-- TOC entry 197 (class 1259 OID 17370)
-- Name: invoices_id_seq; Type: SEQUENCE; Schema: billing; Owner: yeti
--

CREATE SEQUENCE invoices_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE billing.invoices_id_seq OWNER TO yeti;

--
-- TOC entry 4740 (class 0 OID 0)
-- Dependencies: 197
-- Name: invoices_id_seq; Type: SEQUENCE OWNED BY; Schema: billing; Owner: yeti
--

ALTER SEQUENCE invoices_id_seq OWNED BY invoices.id;


--
-- TOC entry 306 (class 1259 OID 18874)
-- Name: invoices_templates_id_seq; Type: SEQUENCE; Schema: billing; Owner: yeti
--

CREATE SEQUENCE invoices_templates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE billing.invoices_templates_id_seq OWNER TO yeti;

--
-- TOC entry 4741 (class 0 OID 0)
-- Dependencies: 306
-- Name: invoices_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: billing; Owner: yeti
--

ALTER SEQUENCE invoices_templates_id_seq OWNED BY invoice_templates.id;


--
-- TOC entry 198 (class 1259 OID 17372)
-- Name: payments; Type: TABLE; Schema: billing; Owner: yeti; Tablespace: 
--

CREATE TABLE payments (
    account_id integer NOT NULL,
    amount numeric NOT NULL,
    notes character varying,
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE billing.payments OWNER TO yeti;

--
-- TOC entry 199 (class 1259 OID 17379)
-- Name: payments_id_seq; Type: SEQUENCE; Schema: billing; Owner: yeti
--

CREATE SEQUENCE payments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE billing.payments_id_seq OWNER TO yeti;

--
-- TOC entry 4742 (class 0 OID 0)
-- Dependencies: 199
-- Name: payments_id_seq; Type: SEQUENCE OWNED BY; Schema: billing; Owner: yeti
--

ALTER SEQUENCE payments_id_seq OWNED BY payments.id;


SET search_path = class4, pg_catalog;

--
-- TOC entry 305 (class 1259 OID 18857)
-- Name: blacklist_items; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE blacklist_items (
    id integer NOT NULL,
    blacklist_id integer NOT NULL,
    key character varying NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE class4.blacklist_items OWNER TO yeti;

--
-- TOC entry 304 (class 1259 OID 18855)
-- Name: blacklist_items_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE blacklist_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.blacklist_items_id_seq OWNER TO yeti;

--
-- TOC entry 4743 (class 0 OID 0)
-- Dependencies: 304
-- Name: blacklist_items_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE blacklist_items_id_seq OWNED BY blacklist_items.id;


--
-- TOC entry 303 (class 1259 OID 18843)
-- Name: blacklists; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE blacklists (
    id integer NOT NULL,
    name character varying NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE class4.blacklists OWNER TO yeti;

--
-- TOC entry 302 (class 1259 OID 18841)
-- Name: blacklists_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE blacklists_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.blacklists_id_seq OWNER TO yeti;

--
-- TOC entry 4744 (class 0 OID 0)
-- Dependencies: 302
-- Name: blacklists_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE blacklists_id_seq OWNED BY blacklists.id;


--
-- TOC entry 200 (class 1259 OID 17563)
-- Name: codec_group_codecs; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE codec_group_codecs (
    id integer NOT NULL,
    codec_group_id integer NOT NULL,
    codec_id integer NOT NULL,
    priority integer DEFAULT 100 NOT NULL,
    dynamic_payload_type integer,
    format_parameters character varying
);


ALTER TABLE class4.codec_group_codecs OWNER TO yeti;

--
-- TOC entry 201 (class 1259 OID 17567)
-- Name: codec_group_codecs_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE codec_group_codecs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.codec_group_codecs_id_seq OWNER TO yeti;

--
-- TOC entry 4745 (class 0 OID 0)
-- Dependencies: 201
-- Name: codec_group_codecs_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE codec_group_codecs_id_seq OWNED BY codec_group_codecs.id;


--
-- TOC entry 202 (class 1259 OID 17569)
-- Name: codec_groups; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE codec_groups (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.codec_groups OWNER TO yeti;

--
-- TOC entry 203 (class 1259 OID 17575)
-- Name: codec_groups_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE codec_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.codec_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4746 (class 0 OID 0)
-- Dependencies: 203
-- Name: codec_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE codec_groups_id_seq OWNED BY codec_groups.id;


--
-- TOC entry 204 (class 1259 OID 17577)
-- Name: codecs; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE codecs (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.codecs OWNER TO yeti;

--
-- TOC entry 205 (class 1259 OID 17583)
-- Name: codecs_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE codecs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.codecs_id_seq OWNER TO yeti;

--
-- TOC entry 4747 (class 0 OID 0)
-- Dependencies: 205
-- Name: codecs_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE codecs_id_seq OWNED BY codecs.id;


--
-- TOC entry 206 (class 1259 OID 17585)
-- Name: customers_auth; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE customers_auth (
    id integer NOT NULL,
    customer_id integer NOT NULL,
    rateplan_id integer NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    ip inet,
    account_id integer,
    gateway_id integer NOT NULL,
    src_rewrite_rule character varying,
    src_rewrite_result character varying,
    dst_rewrite_rule character varying,
    dst_rewrite_result character varying,
    src_prefix character varying DEFAULT ''::character varying NOT NULL,
    dst_prefix character varying DEFAULT ''::character varying NOT NULL,
    x_yeti_auth character varying,
    name character varying NOT NULL,
    dump_level_id integer DEFAULT 1 NOT NULL,
    capacity integer DEFAULT 0 NOT NULL,
    pop_id integer,
    uri_domain character varying,
    src_name_rewrite_rule character varying,
    src_name_rewrite_result character varying,
    diversion_policy_id integer DEFAULT 1 NOT NULL,
    diversion_rewrite_rule character varying,
    diversion_rewrite_result character varying,
    dst_blacklist_id integer,
    src_blacklist_id integer,
    routing_plan_id integer NOT NULL,
    allow_receive_rate_limit boolean DEFAULT false NOT NULL,
    send_billing_information boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.customers_auth OWNER TO yeti;

--
-- TOC entry 207 (class 1259 OID 17597)
-- Name: customers_auth_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE customers_auth_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.customers_auth_id_seq OWNER TO yeti;

--
-- TOC entry 4748 (class 0 OID 0)
-- Dependencies: 207
-- Name: customers_auth_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE customers_auth_id_seq OWNED BY customers_auth.id;


--
-- TOC entry 208 (class 1259 OID 17599)
-- Name: destination_rate_policy; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE destination_rate_policy (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.destination_rate_policy OWNER TO yeti;

--
-- TOC entry 209 (class 1259 OID 17605)
-- Name: destinations_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE destinations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.destinations_id_seq OWNER TO yeti;

--
-- TOC entry 4749 (class 0 OID 0)
-- Dependencies: 209
-- Name: destinations_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE destinations_id_seq OWNED BY destinations.id;


--
-- TOC entry 495 (class 1259 OID 32632)
-- Name: dialpeer_next_rates; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE dialpeer_next_rates (
    id bigint NOT NULL,
    dialpeer_id bigint NOT NULL,
    rate numeric NOT NULL,
    initial_interval smallint NOT NULL,
    next_interval smallint NOT NULL,
    connect_fee numeric NOT NULL,
    apply_time timestamp with time zone NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    applied boolean DEFAULT false NOT NULL,
    external_id bigint
);


ALTER TABLE class4.dialpeer_next_rates OWNER TO yeti;

--
-- TOC entry 494 (class 1259 OID 32630)
-- Name: dialpeer_next_rates_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE dialpeer_next_rates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.dialpeer_next_rates_id_seq OWNER TO yeti;

--
-- TOC entry 4750 (class 0 OID 0)
-- Dependencies: 494
-- Name: dialpeer_next_rates_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE dialpeer_next_rates_id_seq OWNED BY dialpeer_next_rates.id;


--
-- TOC entry 210 (class 1259 OID 17607)
-- Name: dialpeers_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE dialpeers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.dialpeers_id_seq OWNER TO yeti;

--
-- TOC entry 4751 (class 0 OID 0)
-- Dependencies: 210
-- Name: dialpeers_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE dialpeers_id_seq OWNED BY dialpeers.id;


--
-- TOC entry 211 (class 1259 OID 17609)
-- Name: disconnect_code; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE disconnect_code (
    id integer NOT NULL,
    namespace_id integer NOT NULL,
    stop_hunting boolean DEFAULT true NOT NULL,
    pass_reason_to_originator boolean DEFAULT false NOT NULL,
    code integer NOT NULL,
    reason character varying NOT NULL,
    rewrited_code integer,
    rewrited_reason character varying,
    success boolean DEFAULT false NOT NULL,
    successnozerolen boolean DEFAULT false NOT NULL,
    store_cdr boolean DEFAULT true NOT NULL,
    silently_drop boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.disconnect_code OWNER TO yeti;

--
-- TOC entry 212 (class 1259 OID 17621)
-- Name: disconnect_code_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE disconnect_code_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.disconnect_code_id_seq OWNER TO yeti;

--
-- TOC entry 4752 (class 0 OID 0)
-- Dependencies: 212
-- Name: disconnect_code_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE disconnect_code_id_seq OWNED BY disconnect_code.id;


--
-- TOC entry 213 (class 1259 OID 17623)
-- Name: disconnect_policy_code; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE disconnect_policy_code (
    id integer NOT NULL,
    policy_id integer NOT NULL,
    code_id integer NOT NULL,
    stop_hunting boolean DEFAULT true NOT NULL,
    pass_reason_to_originator boolean DEFAULT false NOT NULL,
    rewrited_code integer,
    rewrited_reason character varying
);


ALTER TABLE class4.disconnect_policy_code OWNER TO yeti;

--
-- TOC entry 214 (class 1259 OID 17631)
-- Name: disconnect_code_policy_codes_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE disconnect_code_policy_codes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.disconnect_code_policy_codes_id_seq OWNER TO yeti;

--
-- TOC entry 4753 (class 0 OID 0)
-- Dependencies: 214
-- Name: disconnect_code_policy_codes_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE disconnect_code_policy_codes_id_seq OWNED BY disconnect_policy_code.id;


--
-- TOC entry 215 (class 1259 OID 17633)
-- Name: disconnect_policy; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE disconnect_policy (
    id integer NOT NULL,
    name character varying
);


ALTER TABLE class4.disconnect_policy OWNER TO yeti;

--
-- TOC entry 216 (class 1259 OID 17639)
-- Name: disconnect_code_policy_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE disconnect_code_policy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.disconnect_code_policy_id_seq OWNER TO yeti;

--
-- TOC entry 4754 (class 0 OID 0)
-- Dependencies: 216
-- Name: disconnect_code_policy_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE disconnect_code_policy_id_seq OWNED BY disconnect_policy.id;


--
-- TOC entry 217 (class 1259 OID 17641)
-- Name: disconnect_initiators; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE disconnect_initiators (
    id integer NOT NULL,
    name character varying
);


ALTER TABLE class4.disconnect_initiators OWNER TO yeti;

--
-- TOC entry 218 (class 1259 OID 17647)
-- Name: diversion_policy; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE diversion_policy (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.diversion_policy OWNER TO yeti;

--
-- TOC entry 353 (class 1259 OID 20365)
-- Name: dtmf_receive_modes; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE dtmf_receive_modes (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.dtmf_receive_modes OWNER TO yeti;

--
-- TOC entry 352 (class 1259 OID 20355)
-- Name: dtmf_send_modes; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE dtmf_send_modes (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.dtmf_send_modes OWNER TO yeti;

--
-- TOC entry 219 (class 1259 OID 17653)
-- Name: dump_level; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE dump_level (
    id integer NOT NULL,
    name character varying NOT NULL,
    log_sip boolean DEFAULT false NOT NULL,
    log_rtp boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.dump_level OWNER TO yeti;

--
-- TOC entry 220 (class 1259 OID 17661)
-- Name: filter_types; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE filter_types (
    id integer NOT NULL,
    name character varying
);


ALTER TABLE class4.filter_types OWNER TO yeti;

--
-- TOC entry 221 (class 1259 OID 17667)
-- Name: gateway_groups; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE gateway_groups (
    id integer NOT NULL,
    vendor_id integer NOT NULL,
    name character varying NOT NULL,
    prefer_same_pop boolean DEFAULT true NOT NULL
);


ALTER TABLE class4.gateway_groups OWNER TO yeti;

--
-- TOC entry 222 (class 1259 OID 17674)
-- Name: gateway_groups_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE gateway_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.gateway_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4755 (class 0 OID 0)
-- Dependencies: 222
-- Name: gateway_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE gateway_groups_id_seq OWNED BY gateway_groups.id;


--
-- TOC entry 223 (class 1259 OID 17676)
-- Name: gateways_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE gateways_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.gateways_id_seq OWNER TO yeti;

--
-- TOC entry 4756 (class 0 OID 0)
-- Dependencies: 223
-- Name: gateways_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE gateways_id_seq OWNED BY gateways.id;


--
-- TOC entry 444 (class 1259 OID 23684)
-- Name: lnp_cache; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE lnp_cache (
    id integer NOT NULL,
    dst character varying NOT NULL,
    lrn character varying NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    expires_at timestamp with time zone,
    database_id smallint,
    data character varying
);


ALTER TABLE class4.lnp_cache OWNER TO yeti;

--
-- TOC entry 443 (class 1259 OID 23682)
-- Name: lnp_cache_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE lnp_cache_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.lnp_cache_id_seq OWNER TO yeti;

--
-- TOC entry 4757 (class 0 OID 0)
-- Dependencies: 443
-- Name: lnp_cache_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE lnp_cache_id_seq OWNED BY lnp_cache.id;


--
-- TOC entry 442 (class 1259 OID 23666)
-- Name: lnp_databases; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE lnp_databases (
    id smallint NOT NULL,
    name character varying NOT NULL,
    host character varying NOT NULL,
    port integer,
    driver_id smallint NOT NULL,
    created_at timestamp with time zone,
    thinq_token character varying,
    thinq_username character varying
);


ALTER TABLE class4.lnp_databases OWNER TO yeti;

--
-- TOC entry 441 (class 1259 OID 23664)
-- Name: lnp_databases_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE lnp_databases_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.lnp_databases_id_seq OWNER TO yeti;

--
-- TOC entry 4758 (class 0 OID 0)
-- Dependencies: 441
-- Name: lnp_databases_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE lnp_databases_id_seq OWNED BY lnp_databases.id;


--
-- TOC entry 417 (class 1259 OID 23183)
-- Name: number_list_items; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE number_list_items (
    id integer NOT NULL,
    list_id smallint NOT NULL,
    number character varying NOT NULL
);


ALTER TABLE class4.number_list_items OWNER TO yeti;

--
-- TOC entry 416 (class 1259 OID 23181)
-- Name: number_list_items_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE number_list_items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.number_list_items_id_seq OWNER TO yeti;

--
-- TOC entry 4759 (class 0 OID 0)
-- Dependencies: 416
-- Name: number_list_items_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE number_list_items_id_seq OWNED BY number_list_items.id;


--
-- TOC entry 415 (class 1259 OID 23170)
-- Name: number_lists; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE number_lists (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.number_lists OWNER TO yeti;

--
-- TOC entry 414 (class 1259 OID 23168)
-- Name: number_lists_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE number_lists_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.number_lists_id_seq OWNER TO yeti;

--
-- TOC entry 4760 (class 0 OID 0)
-- Dependencies: 414
-- Name: number_lists_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE number_lists_id_seq OWNED BY number_lists.id;


--
-- TOC entry 390 (class 1259 OID 21264)
-- Name: rate_profit_control_modes; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE rate_profit_control_modes (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.rate_profit_control_modes OWNER TO yeti;

--
-- TOC entry 224 (class 1259 OID 17678)
-- Name: rateplans; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE rateplans (
    id integer NOT NULL,
    name character varying,
    profit_control_mode_id smallint DEFAULT 1 NOT NULL
);


ALTER TABLE class4.rateplans OWNER TO yeti;

--
-- TOC entry 225 (class 1259 OID 17684)
-- Name: rateplans_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE rateplans_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.rateplans_id_seq OWNER TO yeti;

--
-- TOC entry 4761 (class 0 OID 0)
-- Dependencies: 225
-- Name: rateplans_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE rateplans_id_seq OWNED BY rateplans.id;


--
-- TOC entry 226 (class 1259 OID 17686)
-- Name: registrations; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE registrations (
    id integer NOT NULL,
    name character varying NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    pop_id integer,
    node_id integer,
    domain character varying,
    username character varying NOT NULL,
    display_username character varying,
    auth_user character varying,
    proxy character varying,
    contact character varying,
    auth_password character varying,
    expire integer,
    force_expire boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.registrations OWNER TO yeti;

--
-- TOC entry 227 (class 1259 OID 17694)
-- Name: registrations_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE registrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.registrations_id_seq OWNER TO yeti;

--
-- TOC entry 4762 (class 0 OID 0)
-- Dependencies: 227
-- Name: registrations_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE registrations_id_seq OWNED BY registrations.id;


--
-- TOC entry 228 (class 1259 OID 17696)
-- Name: routing_groups; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE routing_groups (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.routing_groups OWNER TO yeti;

--
-- TOC entry 229 (class 1259 OID 17705)
-- Name: routing_groups_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE routing_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.routing_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4763 (class 0 OID 0)
-- Dependencies: 229
-- Name: routing_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE routing_groups_id_seq OWNED BY routing_groups.id;


--
-- TOC entry 357 (class 1259 OID 20436)
-- Name: routing_plan_groups; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE routing_plan_groups (
    id integer NOT NULL,
    routing_plan_id integer NOT NULL,
    routing_group_id integer NOT NULL
);


ALTER TABLE class4.routing_plan_groups OWNER TO yeti;

--
-- TOC entry 356 (class 1259 OID 20434)
-- Name: routing_plan_groups_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE routing_plan_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.routing_plan_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4764 (class 0 OID 0)
-- Dependencies: 356
-- Name: routing_plan_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE routing_plan_groups_id_seq OWNED BY routing_plan_groups.id;


--
-- TOC entry 446 (class 1259 OID 23702)
-- Name: routing_plan_lnp_rules; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE routing_plan_lnp_rules (
    id integer NOT NULL,
    routing_plan_id integer NOT NULL,
    dst_prefix character varying NOT NULL,
    database_id smallint NOT NULL,
    created_at timestamp with time zone,
    lrn_rewrite_rule character varying,
    lrn_rewrite_result character varying,
    req_dst_rewrite_rule character varying,
    req_dst_rewrite_result character varying
);


ALTER TABLE class4.routing_plan_lnp_rules OWNER TO yeti;

--
-- TOC entry 445 (class 1259 OID 23700)
-- Name: routing_plan_lnp_rules_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE routing_plan_lnp_rules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.routing_plan_lnp_rules_id_seq OWNER TO yeti;

--
-- TOC entry 4765 (class 0 OID 0)
-- Dependencies: 445
-- Name: routing_plan_lnp_rules_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE routing_plan_lnp_rules_id_seq OWNED BY routing_plan_lnp_rules.id;


--
-- TOC entry 399 (class 1259 OID 22677)
-- Name: routing_plan_static_routes; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE routing_plan_static_routes (
    id integer NOT NULL,
    routing_plan_id integer NOT NULL,
    prefix character varying DEFAULT ''::character varying NOT NULL,
    vendor_id integer NOT NULL,
    priority integer DEFAULT 100 NOT NULL
);


ALTER TABLE class4.routing_plan_static_routes OWNER TO yeti;

--
-- TOC entry 398 (class 1259 OID 22675)
-- Name: routing_plan_static_routes_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE routing_plan_static_routes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.routing_plan_static_routes_id_seq OWNER TO yeti;

--
-- TOC entry 4766 (class 0 OID 0)
-- Dependencies: 398
-- Name: routing_plan_static_routes_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE routing_plan_static_routes_id_seq OWNED BY routing_plan_static_routes.id;


--
-- TOC entry 355 (class 1259 OID 20415)
-- Name: routing_plans; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE routing_plans (
    id integer NOT NULL,
    name character varying NOT NULL,
    sorting_id integer DEFAULT 1 NOT NULL,
    rate_delta_max numeric DEFAULT 0 NOT NULL,
    use_lnp boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.routing_plans OWNER TO yeti;

--
-- TOC entry 354 (class 1259 OID 20413)
-- Name: routing_plans_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE routing_plans_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.routing_plans_id_seq OWNER TO yeti;

--
-- TOC entry 4767 (class 0 OID 0)
-- Dependencies: 354
-- Name: routing_plans_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE routing_plans_id_seq OWNED BY routing_plans.id;


--
-- TOC entry 301 (class 1259 OID 18795)
-- Name: sdp_c_location; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE sdp_c_location (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE class4.sdp_c_location OWNER TO yeti;

--
-- TOC entry 230 (class 1259 OID 17707)
-- Name: session_refresh_methods; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE session_refresh_methods (
    id integer NOT NULL,
    value character varying NOT NULL,
    name character varying
);


ALTER TABLE class4.session_refresh_methods OWNER TO yeti;

--
-- TOC entry 231 (class 1259 OID 17713)
-- Name: session_refresh_methods_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE session_refresh_methods_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.session_refresh_methods_id_seq OWNER TO yeti;

--
-- TOC entry 4768 (class 0 OID 0)
-- Dependencies: 231
-- Name: session_refresh_methods_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE session_refresh_methods_id_seq OWNED BY session_refresh_methods.id;


--
-- TOC entry 232 (class 1259 OID 17715)
-- Name: sortings; Type: TABLE; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE TABLE sortings (
    id integer NOT NULL,
    name character varying,
    description character varying,
    use_static_routes boolean DEFAULT false NOT NULL
);


ALTER TABLE class4.sortings OWNER TO yeti;

--
-- TOC entry 233 (class 1259 OID 17721)
-- Name: sortings_id_seq; Type: SEQUENCE; Schema: class4; Owner: yeti
--

CREATE SEQUENCE sortings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE class4.sortings_id_seq OWNER TO yeti;

--
-- TOC entry 4769 (class 0 OID 0)
-- Dependencies: 233
-- Name: sortings_id_seq; Type: SEQUENCE OWNED BY; Schema: class4; Owner: yeti
--

ALTER SEQUENCE sortings_id_seq OWNED BY sortings.id;


SET search_path = data_import, pg_catalog;

--
-- TOC entry 234 (class 1259 OID 17723)
-- Name: import_accounts; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_accounts (
    id bigint NOT NULL,
    o_id integer,
    contractor_name character varying,
    contractor_id integer,
    balance numeric,
    min_balance numeric,
    max_balance numeric,
    name character varying,
    origination_capacity integer,
    termination_capacity integer,
    error_string character varying,
    invoice_period_id smallint,
    invoice_period_name character varying,
    autogenerate_vendor_invoices boolean DEFAULT false NOT NULL,
    autogenerate_customer_invoices boolean DEFAULT false NOT NULL
);


ALTER TABLE data_import.import_accounts OWNER TO yeti;

--
-- TOC entry 235 (class 1259 OID 17729)
-- Name: import_accounts_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_accounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_accounts_id_seq OWNER TO yeti;

--
-- TOC entry 4770 (class 0 OID 0)
-- Dependencies: 235
-- Name: import_accounts_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_accounts_id_seq OWNED BY import_accounts.id;


--
-- TOC entry 236 (class 1259 OID 17731)
-- Name: import_codec_group_codecs; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_codec_group_codecs (
    id bigint NOT NULL,
    o_id integer,
    codec_group_name character varying,
    codec_group_id integer,
    codec_name character varying,
    codec_id integer,
    priority integer,
    error_string character varying
);


ALTER TABLE data_import.import_codec_group_codecs OWNER TO yeti;

--
-- TOC entry 237 (class 1259 OID 17737)
-- Name: import_codec_group_codecs_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_codec_group_codecs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_codec_group_codecs_id_seq OWNER TO yeti;

--
-- TOC entry 4771 (class 0 OID 0)
-- Dependencies: 237
-- Name: import_codec_group_codecs_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_codec_group_codecs_id_seq OWNED BY import_codec_group_codecs.id;


--
-- TOC entry 238 (class 1259 OID 17739)
-- Name: import_codec_groups; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_codec_groups (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    error_string character varying
);


ALTER TABLE data_import.import_codec_groups OWNER TO yeti;

--
-- TOC entry 239 (class 1259 OID 17745)
-- Name: import_codec_groups_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_codec_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_codec_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4772 (class 0 OID 0)
-- Dependencies: 239
-- Name: import_codec_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_codec_groups_id_seq OWNED BY import_codec_groups.id;


--
-- TOC entry 240 (class 1259 OID 17747)
-- Name: import_contractors; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_contractors (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    vendor boolean,
    customer boolean,
    enabled boolean,
    error_string character varying,
    description character varying,
    address character varying,
    phones character varying,
    tech_contact character varying,
    fin_contact character varying
);


ALTER TABLE data_import.import_contractors OWNER TO yeti;

--
-- TOC entry 241 (class 1259 OID 17753)
-- Name: import_contractors_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_contractors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_contractors_id_seq OWNER TO yeti;

--
-- TOC entry 4773 (class 0 OID 0)
-- Dependencies: 241
-- Name: import_contractors_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_contractors_id_seq OWNED BY import_contractors.id;


--
-- TOC entry 242 (class 1259 OID 17755)
-- Name: import_customers_auth; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_customers_auth (
    id bigint NOT NULL,
    o_id bigint,
    customer_name character varying,
    customer_id integer,
    rateplan_name character varying,
    rateplan_id integer,
    enabled boolean,
    account_name character varying,
    account_id integer,
    gateway_name character varying,
    gateway_id integer,
    src_rewrite_rule character varying,
    src_rewrite_result character varying,
    dst_rewrite_rule character varying,
    dst_rewrite_result character varying,
    src_prefix character varying,
    dst_prefix character varying,
    x_yeti_auth character varying,
    name character varying,
    dump_level_id integer,
    dump_level_name character varying,
    capacity integer,
    ip inet,
    uri_domain character varying,
    pop_name character varying,
    pop_id integer,
    diversion_policy_id integer,
    diversion_policy_name character varying,
    diversion_rewrite_result character varying,
    diversion_rewrite_rule character varying,
    src_name_rewrite_result character varying,
    src_name_rewrite_rule character varying,
    error_string character varying,
    allow_receive_rate_limit boolean DEFAULT false NOT NULL,
    send_billing_information boolean DEFAULT false NOT NULL,
    dst_blacklist_id integer,
    dst_blacklist_name character varying,
    src_blacklist_id integer,
    src_blacklist_name character varying,
    routing_plan_id integer,
    routing_plan_name character varying,
    routing_group_id integer,
    routing_group_name character varying
);


ALTER TABLE data_import.import_customers_auth OWNER TO yeti;

--
-- TOC entry 243 (class 1259 OID 17761)
-- Name: import_customers_auth_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_customers_auth_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_customers_auth_id_seq OWNER TO yeti;

--
-- TOC entry 4774 (class 0 OID 0)
-- Dependencies: 243
-- Name: import_customers_auth_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_customers_auth_id_seq OWNED BY import_customers_auth.id;


--
-- TOC entry 244 (class 1259 OID 17763)
-- Name: import_destinations; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_destinations (
    id bigint NOT NULL,
    o_id bigint,
    prefix character varying,
    rateplan_name character varying,
    rateplan_id integer,
    connect_fee numeric,
    enabled boolean,
    reject_calls boolean,
    initial_interval integer,
    next_interval integer,
    initial_rate numeric,
    next_rate numeric,
    rate_policy_id integer,
    dp_margin_fixed numeric,
    dp_margin_percent numeric,
    rate_policy_name character varying,
    use_dp_intervals boolean,
    error_string character varying,
    valid_from timestamp with time zone,
    valid_till timestamp with time zone,
    profit_control_mode_id smallint,
    profit_control_mode_name character varying
);


ALTER TABLE data_import.import_destinations OWNER TO yeti;

--
-- TOC entry 245 (class 1259 OID 17769)
-- Name: import_destinations_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_destinations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_destinations_id_seq OWNER TO yeti;

--
-- TOC entry 4775 (class 0 OID 0)
-- Dependencies: 245
-- Name: import_destinations_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_destinations_id_seq OWNED BY import_destinations.id;


--
-- TOC entry 246 (class 1259 OID 17771)
-- Name: import_dialpeers; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_dialpeers (
    id bigint NOT NULL,
    o_id bigint,
    enabled boolean,
    prefix character varying,
    src_rewrite_rule character varying,
    dst_rewrite_rule character varying,
    gateway_id integer,
    gateway_name character varying,
    routing_group_id integer,
    routing_group_name character varying,
    connect_fee numeric,
    vendor_id integer,
    vendor_name character varying,
    account_id integer,
    account_name character varying,
    src_rewrite_result character varying,
    dst_rewrite_result character varying,
    locked boolean,
    priority integer,
    asr_limit real,
    acd_limit real,
    initial_interval integer,
    next_interval integer,
    initial_rate numeric,
    next_rate numeric,
    lcr_rate_multiplier numeric,
    capacity integer,
    valid_from timestamp without time zone,
    valid_till timestamp without time zone,
    gateway_group_name character varying,
    gateway_group_id integer,
    error_string character varying,
    created_at timestamp with time zone,
    short_calls_limit real DEFAULT 1 NOT NULL,
    force_hit_rate double precision
);


ALTER TABLE data_import.import_dialpeers OWNER TO yeti;

--
-- TOC entry 247 (class 1259 OID 17777)
-- Name: import_dialpeers_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_dialpeers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_dialpeers_id_seq OWNER TO yeti;

--
-- TOC entry 4776 (class 0 OID 0)
-- Dependencies: 247
-- Name: import_dialpeers_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_dialpeers_id_seq OWNED BY import_dialpeers.id;


--
-- TOC entry 248 (class 1259 OID 17779)
-- Name: import_disconnect_policies; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_disconnect_policies (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    error_string character varying
);


ALTER TABLE data_import.import_disconnect_policies OWNER TO yeti;

--
-- TOC entry 249 (class 1259 OID 17785)
-- Name: import_disconnect_policies_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_disconnect_policies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_disconnect_policies_id_seq OWNER TO yeti;

--
-- TOC entry 4777 (class 0 OID 0)
-- Dependencies: 249
-- Name: import_disconnect_policies_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_disconnect_policies_id_seq OWNED BY import_disconnect_policies.id;


--
-- TOC entry 250 (class 1259 OID 17787)
-- Name: import_gateway_groups; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_gateway_groups (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    vendor_name character varying,
    vendor_id integer,
    prefer_same_pop boolean,
    error_string character varying
);


ALTER TABLE data_import.import_gateway_groups OWNER TO yeti;

--
-- TOC entry 251 (class 1259 OID 17793)
-- Name: import_gateway_groups_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_gateway_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_gateway_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4778 (class 0 OID 0)
-- Dependencies: 251
-- Name: import_gateway_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_gateway_groups_id_seq OWNED BY import_gateway_groups.id;


--
-- TOC entry 372 (class 1259 OID 20644)
-- Name: import_gateways; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_gateways (
    id bigint NOT NULL,
    host character varying,
    port integer,
    src_rewrite_rule character varying,
    dst_rewrite_rule character varying,
    acd_limit real,
    asr_limit real,
    enabled boolean,
    name character varying,
    auth_enabled boolean,
    auth_user character varying,
    auth_password character varying,
    term_outbound_proxy character varying,
    term_next_hop_for_replies boolean,
    term_use_outbound_proxy boolean,
    contractor_id integer,
    allow_termination boolean,
    allow_origination boolean,
    anonymize_sdp boolean,
    proxy_media boolean,
    transparent_seqno boolean,
    transparent_ssrc boolean,
    sst_enabled boolean,
    sst_minimum_timer integer,
    sst_maximum_timer integer,
    sst_accept501 boolean,
    session_refresh_method_id integer,
    sst_session_expires integer,
    term_force_outbound_proxy boolean,
    locked boolean,
    codecs_payload_order character varying,
    codecs_prefer_transcoding_for character varying,
    src_rewrite_result character varying,
    dst_rewrite_result character varying,
    capacity integer,
    term_next_hop character varying,
    orig_next_hop character varying,
    orig_append_headers_req character varying,
    term_append_headers_req character varying,
    dialog_nat_handling boolean,
    orig_force_outbound_proxy boolean,
    orig_use_outbound_proxy boolean,
    orig_outbound_proxy character varying,
    prefer_existing_codecs boolean,
    force_symmetric_rtp boolean,
    transparent_dialog_id boolean,
    sdp_alines_filter_type_id integer,
    sdp_alines_filter_list character varying,
    gateway_group_id integer,
    orig_disconnect_policy_id integer,
    term_disconnect_policy_id integer,
    diversion_policy_id integer,
    diversion_rewrite_rule character varying,
    diversion_rewrite_result character varying,
    src_name_rewrite_rule character varying,
    src_name_rewrite_result character varying,
    priority integer,
    pop_id integer,
    o_id integer,
    gateway_group_name character varying,
    contractor_name character varying,
    pop_name character varying,
    session_refresh_method_name character varying,
    sdp_alines_filter_type_name character varying,
    orig_disconnect_policy_name character varying,
    term_disconnect_policy_name character varying,
    diversion_policy_name character varying,
    error_string character varying,
    codec_group_id integer,
    codec_group_name character varying,
    single_codec_in_200ok boolean,
    ringing_timeout integer,
    symmetric_rtp_nonstop boolean,
    symmetric_rtp_ignore_rtcp boolean,
    resolve_ruri boolean,
    force_dtmf_relay boolean,
    relay_options boolean,
    rtp_ping boolean,
    relay_reinvite boolean,
    sdp_c_location_id integer,
    sdp_c_location_name character varying,
    auth_from_user character varying,
    auth_from_domain character varying,
    relay_hold boolean,
    rtp_timeout integer,
    relay_prack boolean,
    rtp_relay_timestamp_aligning boolean,
    allow_1xx_without_to_tag boolean,
    sip_timer_b integer,
    dns_srv_failover_timer integer,
    rtp_force_relay_cn boolean,
    sensor_id smallint,
    sensor_name character varying,
    sensor_level_id smallint,
    sensor_level_name character varying,
    filter_noaudio_streams boolean,
    dtmf_send_mode_id integer,
    dtmf_send_mode_name character varying,
    dtmf_receive_mode_id integer,
    dtmf_receive_mode_name character varying
);


ALTER TABLE data_import.import_gateways OWNER TO yeti;

--
-- TOC entry 252 (class 1259 OID 17801)
-- Name: import_gateways_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_gateways_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_gateways_id_seq OWNER TO yeti;

--
-- TOC entry 371 (class 1259 OID 20642)
-- Name: import_gateways_id_seq1; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_gateways_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_gateways_id_seq1 OWNER TO yeti;

--
-- TOC entry 4779 (class 0 OID 0)
-- Dependencies: 371
-- Name: import_gateways_id_seq1; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_gateways_id_seq1 OWNED BY import_gateways.id;


--
-- TOC entry 253 (class 1259 OID 17805)
-- Name: import_rateplans; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_rateplans (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    error_string character varying
);


ALTER TABLE data_import.import_rateplans OWNER TO yeti;

--
-- TOC entry 254 (class 1259 OID 17811)
-- Name: import_rateplans_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_rateplans_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_rateplans_id_seq OWNER TO yeti;

--
-- TOC entry 4780 (class 0 OID 0)
-- Dependencies: 254
-- Name: import_rateplans_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_rateplans_id_seq OWNED BY import_rateplans.id;


--
-- TOC entry 255 (class 1259 OID 17813)
-- Name: import_registrations; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_registrations (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    enabled boolean,
    pop_name character varying,
    pop_id integer,
    node_name character varying,
    node_id integer,
    domain character varying,
    username character varying,
    display_username character varying,
    auth_user character varying,
    proxy character varying,
    contact character varying,
    auth_password character varying,
    expire integer,
    force_expire boolean,
    error_string character varying
);


ALTER TABLE data_import.import_registrations OWNER TO yeti;

--
-- TOC entry 256 (class 1259 OID 17819)
-- Name: import_registrations_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_registrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_registrations_id_seq OWNER TO yeti;

--
-- TOC entry 4781 (class 0 OID 0)
-- Dependencies: 256
-- Name: import_registrations_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_registrations_id_seq OWNED BY import_registrations.id;


--
-- TOC entry 257 (class 1259 OID 17821)
-- Name: import_routing_groups; Type: TABLE; Schema: data_import; Owner: yeti; Tablespace: 
--

CREATE TABLE import_routing_groups (
    id bigint NOT NULL,
    o_id integer,
    name character varying,
    sorting_name character varying,
    sorting_id integer,
    more_specific_per_vendor boolean,
    rate_delta_max numeric DEFAULT 0 NOT NULL,
    error_string character varying
);


ALTER TABLE data_import.import_routing_groups OWNER TO yeti;

--
-- TOC entry 258 (class 1259 OID 17828)
-- Name: import_routing_groups_id_seq; Type: SEQUENCE; Schema: data_import; Owner: yeti
--

CREATE SEQUENCE import_routing_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_import.import_routing_groups_id_seq OWNER TO yeti;

--
-- TOC entry 4782 (class 0 OID 0)
-- Dependencies: 258
-- Name: import_routing_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: data_import; Owner: yeti
--

ALTER SEQUENCE import_routing_groups_id_seq OWNED BY import_routing_groups.id;


SET search_path = gui, pg_catalog;

--
-- TOC entry 259 (class 1259 OID 17830)
-- Name: active_admin_comments; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE active_admin_comments (
    id integer NOT NULL,
    resource_id character varying(255) NOT NULL,
    resource_type character varying(255) NOT NULL,
    author_id integer,
    author_type character varying(255),
    body text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    namespace character varying(255)
);


ALTER TABLE gui.active_admin_comments OWNER TO yeti;

--
-- TOC entry 260 (class 1259 OID 17836)
-- Name: admin_notes_id_seq; Type: SEQUENCE; Schema: gui; Owner: yeti
--

CREATE SEQUENCE admin_notes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gui.admin_notes_id_seq OWNER TO yeti;

--
-- TOC entry 4783 (class 0 OID 0)
-- Dependencies: 260
-- Name: admin_notes_id_seq; Type: SEQUENCE OWNED BY; Schema: gui; Owner: yeti
--

ALTER SEQUENCE admin_notes_id_seq OWNED BY active_admin_comments.id;


--
-- TOC entry 261 (class 1259 OID 17838)
-- Name: admin_users; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE admin_users (
    id integer NOT NULL,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp with time zone,
    remember_created_at timestamp with time zone,
    sign_in_count integer DEFAULT 0,
    current_sign_in_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    "group" integer DEFAULT 0,
    enabled boolean DEFAULT true,
    username character varying NOT NULL,
    ssh_key text,
    stateful_filters boolean DEFAULT false NOT NULL
);


ALTER TABLE gui.admin_users OWNER TO yeti;

--
-- TOC entry 262 (class 1259 OID 17849)
-- Name: admin_users_id_seq; Type: SEQUENCE; Schema: gui; Owner: yeti
--

CREATE SEQUENCE admin_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gui.admin_users_id_seq OWNER TO yeti;

--
-- TOC entry 4784 (class 0 OID 0)
-- Dependencies: 262
-- Name: admin_users_id_seq; Type: SEQUENCE OWNED BY; Schema: gui; Owner: yeti
--

ALTER SEQUENCE admin_users_id_seq OWNED BY admin_users.id;


--
-- TOC entry 263 (class 1259 OID 17851)
-- Name: background_threads; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE background_threads (
    id integer NOT NULL,
    name character varying,
    num integer,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    data_count bigint,
    data_processed bigint,
    exception text
);


ALTER TABLE gui.background_threads OWNER TO yeti;

--
-- TOC entry 264 (class 1259 OID 17857)
-- Name: background_threads_id_seq; Type: SEQUENCE; Schema: gui; Owner: yeti
--

CREATE SEQUENCE background_threads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gui.background_threads_id_seq OWNER TO yeti;

--
-- TOC entry 4785 (class 0 OID 0)
-- Dependencies: 264
-- Name: background_threads_id_seq; Type: SEQUENCE OWNED BY; Schema: gui; Owner: yeti
--

ALTER SEQUENCE background_threads_id_seq OWNED BY background_threads.id;


--
-- TOC entry 265 (class 1259 OID 17859)
-- Name: schema_migrations; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE gui.schema_migrations OWNER TO yeti;

--
-- TOC entry 464 (class 1259 OID 24013)
-- Name: sessions; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE sessions (
    id integer NOT NULL,
    session_id character varying(255) NOT NULL,
    data text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE gui.sessions OWNER TO yeti;

--
-- TOC entry 463 (class 1259 OID 24011)
-- Name: sessions_id_seq; Type: SEQUENCE; Schema: gui; Owner: yeti
--

CREATE SEQUENCE sessions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gui.sessions_id_seq OWNER TO yeti;

--
-- TOC entry 4786 (class 0 OID 0)
-- Dependencies: 463
-- Name: sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: gui; Owner: yeti
--

ALTER SEQUENCE sessions_id_seq OWNED BY sessions.id;


--
-- TOC entry 266 (class 1259 OID 17862)
-- Name: versions; Type: TABLE; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE TABLE versions (
    id integer NOT NULL,
    item_type character varying(255) NOT NULL,
    item_id integer NOT NULL,
    event character varying(255) NOT NULL,
    whodunnit character varying(255),
    object text,
    created_at timestamp with time zone,
    ip character varying(255),
    object_changes text
);


ALTER TABLE gui.versions OWNER TO yeti;

--
-- TOC entry 267 (class 1259 OID 17868)
-- Name: versions_id_seq; Type: SEQUENCE; Schema: gui; Owner: yeti
--

CREATE SEQUENCE versions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gui.versions_id_seq OWNER TO yeti;

--
-- TOC entry 4787 (class 0 OID 0)
-- Dependencies: 267
-- Name: versions_id_seq; Type: SEQUENCE OWNED BY; Schema: gui; Owner: yeti
--

ALTER SEQUENCE versions_id_seq OWNED BY versions.id;


SET search_path = logs, pg_catalog;

--
-- TOC entry 466 (class 1259 OID 24063)
-- Name: api_requests; Type: TABLE; Schema: logs; Owner: yeti; Tablespace: 
--

CREATE TABLE api_requests (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    path character varying,
    method character varying,
    status integer,
    controller character varying,
    action character varying,
    page_duration real,
    db_duration real,
    params text,
    request_body text,
    response_body text,
    request_headers text,
    response_headers text
);


ALTER TABLE logs.api_requests OWNER TO yeti;

--
-- TOC entry 465 (class 1259 OID 24061)
-- Name: api_requests_id_seq; Type: SEQUENCE; Schema: logs; Owner: yeti
--

CREATE SEQUENCE api_requests_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE logs.api_requests_id_seq OWNER TO yeti;

--
-- TOC entry 4788 (class 0 OID 0)
-- Dependencies: 465
-- Name: api_requests_id_seq; Type: SEQUENCE OWNED BY; Schema: logs; Owner: yeti
--

ALTER SEQUENCE api_requests_id_seq OWNED BY api_requests.id;


--
-- TOC entry 268 (class 1259 OID 17870)
-- Name: logic_log; Type: TABLE; Schema: logs; Owner: yeti; Tablespace: 
--

CREATE TABLE logic_log (
    id bigint NOT NULL,
    source character varying NOT NULL,
    level integer NOT NULL,
    msg text,
    txid bigint DEFAULT txid_current() NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE logs.logic_log OWNER TO yeti;

--
-- TOC entry 269 (class 1259 OID 17878)
-- Name: logic_log_id_seq; Type: SEQUENCE; Schema: logs; Owner: yeti
--

CREATE SEQUENCE logic_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE logs.logic_log_id_seq OWNER TO yeti;

--
-- TOC entry 4789 (class 0 OID 0)
-- Dependencies: 269
-- Name: logic_log_id_seq; Type: SEQUENCE OWNED BY; Schema: logs; Owner: yeti
--

ALTER SEQUENCE logic_log_id_seq OWNED BY logic_log.id;


SET search_path = notifications, pg_catalog;

--
-- TOC entry 471 (class 1259 OID 24317)
-- Name: alerts; Type: TABLE; Schema: notifications; Owner: yeti; Tablespace: 
--

CREATE TABLE alerts (
    id integer NOT NULL,
    event character varying NOT NULL,
    send_to integer[]
);


ALTER TABLE notifications.alerts OWNER TO yeti;

--
-- TOC entry 470 (class 1259 OID 24315)
-- Name: alerts_id_seq; Type: SEQUENCE; Schema: notifications; Owner: yeti
--

CREATE SEQUENCE alerts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications.alerts_id_seq OWNER TO yeti;

--
-- TOC entry 4790 (class 0 OID 0)
-- Dependencies: 470
-- Name: alerts_id_seq; Type: SEQUENCE OWNED BY; Schema: notifications; Owner: yeti
--

ALTER SEQUENCE alerts_id_seq OWNED BY alerts.id;


--
-- TOC entry 438 (class 1259 OID 23537)
-- Name: attachments; Type: TABLE; Schema: notifications; Owner: yeti; Tablespace: 
--

CREATE TABLE attachments (
    id integer NOT NULL,
    filename character varying NOT NULL,
    data bytea
);


ALTER TABLE notifications.attachments OWNER TO yeti;

--
-- TOC entry 437 (class 1259 OID 23535)
-- Name: attachments_id_seq; Type: SEQUENCE; Schema: notifications; Owner: yeti
--

CREATE SEQUENCE attachments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications.attachments_id_seq OWNER TO yeti;

--
-- TOC entry 4791 (class 0 OID 0)
-- Dependencies: 437
-- Name: attachments_id_seq; Type: SEQUENCE OWNED BY; Schema: notifications; Owner: yeti
--

ALTER SEQUENCE attachments_id_seq OWNED BY attachments.id;


--
-- TOC entry 419 (class 1259 OID 23295)
-- Name: contacts; Type: TABLE; Schema: notifications; Owner: yeti; Tablespace: 
--

CREATE TABLE contacts (
    id integer NOT NULL,
    contractor_id integer,
    admin_user_id integer,
    email character varying NOT NULL,
    notes character varying,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE notifications.contacts OWNER TO yeti;

--
-- TOC entry 418 (class 1259 OID 23293)
-- Name: contacts_id_seq; Type: SEQUENCE; Schema: notifications; Owner: yeti
--

CREATE SEQUENCE contacts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications.contacts_id_seq OWNER TO yeti;

--
-- TOC entry 4792 (class 0 OID 0)
-- Dependencies: 418
-- Name: contacts_id_seq; Type: SEQUENCE OWNED BY; Schema: notifications; Owner: yeti
--

ALTER SEQUENCE contacts_id_seq OWNED BY contacts.id;


--
-- TOC entry 421 (class 1259 OID 23317)
-- Name: email_logs; Type: TABLE; Schema: notifications; Owner: yeti; Tablespace: 
--

CREATE TABLE email_logs (
    id bigint NOT NULL,
    batch_id bigint,
    created_at timestamp with time zone,
    sent_at timestamp with time zone,
    contact_id integer,
    smtp_connection_id integer,
    mail_to character varying NOT NULL,
    mail_from character varying NOT NULL,
    subject character varying NOT NULL,
    msg character varying,
    error character varying,
    attachment_id integer[]
);


ALTER TABLE notifications.email_logs OWNER TO yeti;

--
-- TOC entry 420 (class 1259 OID 23315)
-- Name: email_log_id_seq; Type: SEQUENCE; Schema: notifications; Owner: yeti
--

CREATE SEQUENCE email_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications.email_log_id_seq OWNER TO yeti;

--
-- TOC entry 4793 (class 0 OID 0)
-- Dependencies: 420
-- Name: email_log_id_seq; Type: SEQUENCE OWNED BY; Schema: notifications; Owner: yeti
--

ALTER SEQUENCE email_log_id_seq OWNED BY email_logs.id;


SET search_path = pgq, pg_catalog;

--
-- TOC entry 490 (class 1259 OID 24651)
-- Name: event_1; Type: TABLE; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE TABLE event_1 (
)
INHERITS (event_template);


ALTER TABLE pgq.event_1 OWNER TO yeti;

--
-- TOC entry 491 (class 1259 OID 24658)
-- Name: event_1_0; Type: TABLE; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE TABLE event_1_0 (
)
INHERITS (event_1)
WITH (fillfactor=100, autovacuum_enabled=off, toast.autovacuum_enabled=off);


ALTER TABLE pgq.event_1_0 OWNER TO yeti;

--
-- TOC entry 492 (class 1259 OID 24667)
-- Name: event_1_1; Type: TABLE; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE TABLE event_1_1 (
)
INHERITS (event_1)
WITH (fillfactor=100, autovacuum_enabled=off, toast.autovacuum_enabled=off);


ALTER TABLE pgq.event_1_1 OWNER TO yeti;

--
-- TOC entry 493 (class 1259 OID 24676)
-- Name: event_1_2; Type: TABLE; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE TABLE event_1_2 (
)
INHERITS (event_1)
WITH (fillfactor=100, autovacuum_enabled=off, toast.autovacuum_enabled=off);


ALTER TABLE pgq.event_1_2 OWNER TO yeti;

--
-- TOC entry 489 (class 1259 OID 24649)
-- Name: event_1_id_seq; Type: SEQUENCE; Schema: pgq; Owner: yeti
--

CREATE SEQUENCE event_1_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.event_1_id_seq OWNER TO yeti;

--
-- TOC entry 488 (class 1259 OID 24647)
-- Name: event_1_tick_seq; Type: SEQUENCE; Schema: pgq; Owner: yeti
--

CREATE SEQUENCE event_1_tick_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.event_1_tick_seq OWNER TO yeti;

SET search_path = public, pg_catalog;

--
-- TOC entry 270 (class 1259 OID 17880)
-- Name: contractors; Type: TABLE; Schema: public; Owner: yeti; Tablespace: 
--

CREATE TABLE contractors (
    id integer NOT NULL,
    name character varying,
    enabled boolean,
    vendor boolean,
    customer boolean,
    description character varying,
    address character varying,
    phones character varying,
    smtp_connection_id integer
);


ALTER TABLE public.contractors OWNER TO yeti;

--
-- TOC entry 271 (class 1259 OID 17886)
-- Name: contractors_id_seq; Type: SEQUENCE; Schema: public; Owner: yeti
--

CREATE SEQUENCE contractors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contractors_id_seq OWNER TO yeti;

--
-- TOC entry 4800 (class 0 OID 0)
-- Dependencies: 271
-- Name: contractors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: yeti
--

ALTER SEQUENCE contractors_id_seq OWNED BY contractors.id;


--
-- TOC entry 391 (class 1259 OID 21318)
-- Name: test; Type: TABLE; Schema: public; Owner: yeti; Tablespace: 
--

CREATE TABLE test (
    t timestamp without time zone,
    tz timestamp with time zone
);


ALTER TABLE public.test OWNER TO yeti;

SET search_path = reports, pg_catalog;

--
-- TOC entry 272 (class 1259 OID 17888)
-- Name: cdr_custom_report; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_custom_report (
    id integer NOT NULL,
    date_start timestamp without time zone,
    date_end timestamp without time zone,
    filter character varying,
    group_by character varying,
    created_at timestamp without time zone
);


ALTER TABLE reports.cdr_custom_report OWNER TO yeti;

--
-- TOC entry 273 (class 1259 OID 17894)
-- Name: cdr_custom_report_data; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_custom_report_data (
    customer_id integer,
    vendor_id integer,
    customer_acc_id integer,
    vendor_acc_id integer,
    customer_auth_id integer,
    destination_id integer,
    dialpeer_id integer,
    orig_gw_id integer,
    term_gw_id integer,
    routing_group_id integer,
    rateplan_id integer,
    destination_next_rate numeric,
    destination_fee numeric,
    dialpeer_next_rate numeric,
    dialpeer_fee numeric,
    time_limit character varying,
    internal_disconnect_code integer,
    internal_disconnect_reason character varying,
    disconnect_initiator_id integer,
    customer_price numeric,
    vendor_price numeric,
    duration integer,
    success boolean,
    vendor_billed boolean,
    customer_billed boolean,
    profit numeric,
    dst_prefix_in character varying,
    dst_prefix_out character varying,
    src_prefix_in character varying,
    src_prefix_out character varying,
    time_start timestamp without time zone,
    time_connect timestamp without time zone,
    time_end timestamp without time zone,
    sign_orig_ip character varying,
    sign_orig_port integer,
    sign_orig_local_ip character varying,
    sign_orig_local_port integer,
    sign_term_ip character varying,
    sign_term_port integer,
    sign_term_local_ip character varying,
    sign_term_local_port integer,
    orig_call_id character varying,
    term_call_id character varying,
    vendor_invoice_id integer,
    customer_invoice_id integer,
    local_tag character varying,
    log_sip boolean,
    log_rtp boolean,
    dump_file character varying,
    destination_initial_rate numeric,
    dialpeer_initial_rate numeric,
    destination_initial_interval integer,
    destination_next_interval integer,
    dialpeer_initial_interval integer,
    dialpeer_next_interval integer,
    destination_rate_policy_id integer,
    routing_attempt integer,
    is_last_cdr boolean,
    lega_disconnect_code integer,
    lega_disconnect_reason character varying,
    pop_id integer,
    node_id integer,
    src_name_in character varying,
    src_name_out character varying,
    diversion_in character varying,
    diversion_out character varying,
    lega_rx_payloads character varying,
    lega_tx_payloads character varying,
    legb_rx_payloads character varying,
    legb_tx_payloads character varying,
    id bigint NOT NULL,
    report_id integer NOT NULL,
    agg_calls_count bigint,
    agg_calls_duration bigint,
    agg_calls_acd numeric,
    agg_asr_origination numeric,
    agg_asr_termination numeric,
    agg_vendor_price numeric,
    agg_customer_price numeric,
    agg_profit numeric,
    legb_disconnect_code integer,
    legb_disconnect_reason character varying
);


ALTER TABLE reports.cdr_custom_report_data OWNER TO yeti;

--
-- TOC entry 274 (class 1259 OID 17900)
-- Name: cdr_custom_report_data_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE cdr_custom_report_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.cdr_custom_report_data_id_seq OWNER TO yeti;

--
-- TOC entry 4801 (class 0 OID 0)
-- Dependencies: 274
-- Name: cdr_custom_report_data_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE cdr_custom_report_data_id_seq OWNED BY cdr_custom_report_data.id;


--
-- TOC entry 275 (class 1259 OID 17902)
-- Name: cdr_custom_report_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE cdr_custom_report_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.cdr_custom_report_id_seq OWNER TO yeti;

--
-- TOC entry 4802 (class 0 OID 0)
-- Dependencies: 275
-- Name: cdr_custom_report_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE cdr_custom_report_id_seq OWNED BY cdr_custom_report.id;


--
-- TOC entry 276 (class 1259 OID 17904)
-- Name: cdr_interval_report; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_interval_report (
    id integer NOT NULL,
    date_start timestamp without time zone NOT NULL,
    date_end timestamp without time zone NOT NULL,
    filter character varying,
    group_by character varying,
    created_at timestamp without time zone NOT NULL,
    interval_length integer NOT NULL,
    aggregator_id integer NOT NULL,
    aggregate_by character varying NOT NULL
);


ALTER TABLE reports.cdr_interval_report OWNER TO yeti;

--
-- TOC entry 277 (class 1259 OID 17910)
-- Name: cdr_interval_report_aggrerator; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_interval_report_aggrerator (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE reports.cdr_interval_report_aggrerator OWNER TO yeti;

--
-- TOC entry 278 (class 1259 OID 17916)
-- Name: cdr_interval_report_data; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_interval_report_data (
    customer_id integer,
    vendor_id integer,
    customer_acc_id integer,
    vendor_acc_id integer,
    customer_auth_id integer,
    destination_id integer,
    dialpeer_id integer,
    orig_gw_id integer,
    term_gw_id integer,
    routing_group_id integer,
    rateplan_id integer,
    destination_next_rate numeric,
    destination_fee numeric,
    dialpeer_next_rate numeric,
    dialpeer_fee numeric,
    time_limit character varying,
    internal_disconnect_code integer,
    internal_disconnect_reason character varying,
    disconnect_initiator_id integer,
    customer_price numeric,
    vendor_price numeric,
    duration integer,
    success boolean,
    vendor_billed boolean,
    customer_billed boolean,
    profit numeric,
    dst_prefix_in character varying,
    dst_prefix_out character varying,
    src_prefix_in character varying,
    src_prefix_out character varying,
    time_start timestamp without time zone,
    time_connect timestamp without time zone,
    time_end timestamp without time zone,
    sign_orig_ip character varying,
    sign_orig_port integer,
    sign_orig_local_ip character varying,
    sign_orig_local_port integer,
    sign_term_ip character varying,
    sign_term_port integer,
    sign_term_local_ip character varying,
    sign_term_local_port integer,
    orig_call_id character varying,
    term_call_id character varying,
    vendor_invoice_id integer,
    customer_invoice_id integer,
    local_tag character varying,
    log_sip boolean,
    log_rtp boolean,
    dump_file character varying,
    destination_initial_rate numeric,
    dialpeer_initial_rate numeric,
    destination_initial_interval integer,
    destination_next_interval integer,
    dialpeer_initial_interval integer,
    dialpeer_next_interval integer,
    destination_rate_policy_id integer,
    routing_attempt integer,
    is_last_cdr boolean,
    lega_disconnect_code integer,
    lega_disconnect_reason character varying,
    pop_id integer,
    node_id integer,
    src_name_in character varying,
    src_name_out character varying,
    diversion_in character varying,
    diversion_out character varying,
    lega_rx_payloads character varying,
    lega_tx_payloads character varying,
    legb_rx_payloads character varying,
    legb_tx_payloads character varying,
    legb_disconnect_code integer,
    legb_disconnect_reason character varying,
    id bigint NOT NULL,
    report_id integer NOT NULL,
    "timestamp" timestamp without time zone,
    aggregated_value numeric
);


ALTER TABLE reports.cdr_interval_report_data OWNER TO yeti;

--
-- TOC entry 279 (class 1259 OID 17922)
-- Name: cdr_interval_report_data_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE cdr_interval_report_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.cdr_interval_report_data_id_seq OWNER TO yeti;

--
-- TOC entry 4803 (class 0 OID 0)
-- Dependencies: 279
-- Name: cdr_interval_report_data_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE cdr_interval_report_data_id_seq OWNED BY cdr_interval_report_data.id;


--
-- TOC entry 280 (class 1259 OID 17924)
-- Name: cdr_interval_report_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE cdr_interval_report_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.cdr_interval_report_id_seq OWNER TO yeti;

--
-- TOC entry 4804 (class 0 OID 0)
-- Dependencies: 280
-- Name: cdr_interval_report_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE cdr_interval_report_id_seq OWNED BY cdr_interval_report.id;


--
-- TOC entry 281 (class 1259 OID 17926)
-- Name: report_vendors; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE report_vendors (
    id integer NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL
);


ALTER TABLE reports.report_vendors OWNER TO yeti;

--
-- TOC entry 282 (class 1259 OID 17930)
-- Name: report_vendors_data; Type: TABLE; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE TABLE report_vendors_data (
    id bigint NOT NULL,
    report_id integer NOT NULL,
    calls_count bigint
);


ALTER TABLE reports.report_vendors_data OWNER TO yeti;

--
-- TOC entry 283 (class 1259 OID 17933)
-- Name: report_vendors_data_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE report_vendors_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.report_vendors_data_id_seq OWNER TO yeti;

--
-- TOC entry 4805 (class 0 OID 0)
-- Dependencies: 283
-- Name: report_vendors_data_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE report_vendors_data_id_seq OWNED BY report_vendors_data.id;


--
-- TOC entry 284 (class 1259 OID 17935)
-- Name: report_vendors_id_seq; Type: SEQUENCE; Schema: reports; Owner: yeti
--

CREATE SEQUENCE report_vendors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reports.report_vendors_id_seq OWNER TO yeti;

--
-- TOC entry 4806 (class 0 OID 0)
-- Dependencies: 284
-- Name: report_vendors_id_seq; Type: SEQUENCE OWNED BY; Schema: reports; Owner: yeti
--

ALTER SEQUENCE report_vendors_id_seq OWNED BY report_vendors.id;


SET search_path = runtime_stats, pg_catalog;

--
-- TOC entry 285 (class 1259 OID 17937)
-- Name: dialpeers_stats; Type: TABLE; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

CREATE UNLOGGED TABLE dialpeers_stats (
    dialpeer_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    calls bigint NOT NULL,
    calls_success bigint NOT NULL,
    calls_fail bigint NOT NULL,
    total_duration bigint NOT NULL,
    asr real,
    acd real,
    locked_at timestamp with time zone,
    unlocked_at timestamp with time zone,
    id bigint NOT NULL
);


ALTER TABLE runtime_stats.dialpeers_stats OWNER TO yeti;

--
-- TOC entry 286 (class 1259 OID 17942)
-- Name: dialpeers_stats_id_seq; Type: SEQUENCE; Schema: runtime_stats; Owner: yeti
--

CREATE SEQUENCE dialpeers_stats_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE runtime_stats.dialpeers_stats_id_seq OWNER TO yeti;

--
-- TOC entry 4807 (class 0 OID 0)
-- Dependencies: 286
-- Name: dialpeers_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: runtime_stats; Owner: yeti
--

ALTER SEQUENCE dialpeers_stats_id_seq OWNED BY dialpeers_stats.id;


--
-- TOC entry 287 (class 1259 OID 17944)
-- Name: gateways_stats; Type: TABLE; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

CREATE UNLOGGED TABLE gateways_stats (
    id integer NOT NULL,
    gateway_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    calls bigint NOT NULL,
    calls_success bigint NOT NULL,
    calls_fail bigint NOT NULL,
    total_duration bigint NOT NULL,
    asr real,
    acd real,
    locked_at timestamp with time zone,
    unlocked_at timestamp with time zone
);


ALTER TABLE runtime_stats.gateways_stats OWNER TO yeti;

--
-- TOC entry 288 (class 1259 OID 17949)
-- Name: gateways_stats_id_seq; Type: SEQUENCE; Schema: runtime_stats; Owner: yeti
--

CREATE SEQUENCE gateways_stats_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE runtime_stats.gateways_stats_id_seq OWNER TO yeti;

--
-- TOC entry 4808 (class 0 OID 0)
-- Dependencies: 288
-- Name: gateways_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: runtime_stats; Owner: yeti
--

ALTER SEQUENCE gateways_stats_id_seq OWNED BY gateways_stats.id;


SET search_path = switch2, pg_catalog;

--
-- TOC entry 328 (class 1259 OID 19619)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch2; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch2.events_id_seq OWNER TO yeti;

--
-- TOC entry 329 (class 1259 OID 19621)
-- Name: resource_action; Type: TABLE; Schema: switch2; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch2.resource_action OWNER TO yeti;

--
-- TOC entry 330 (class 1259 OID 19627)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch2; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch2.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4809 (class 0 OID 0)
-- Dependencies: 330
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch2; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 331 (class 1259 OID 19629)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch2; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch2.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 332 (class 1259 OID 19631)
-- Name: switch_interface_out; Type: TABLE; Schema: switch2; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch2.switch_interface_out OWNER TO yeti;

--
-- TOC entry 333 (class 1259 OID 19637)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch2; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch2.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4810 (class 0 OID 0)
-- Dependencies: 333
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch2; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 334 (class 1259 OID 19639)
-- Name: switch_interface_in; Type: TABLE; Schema: switch2; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch2.switch_interface_in OWNER TO yeti;

--
-- TOC entry 335 (class 1259 OID 19647)
-- Name: trusted_headers; Type: TABLE; Schema: switch2; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch2.trusted_headers OWNER TO yeti;

--
-- TOC entry 336 (class 1259 OID 19653)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch2; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch2.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4811 (class 0 OID 0)
-- Dependencies: 336
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch2; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch3, pg_catalog;

--
-- TOC entry 343 (class 1259 OID 20149)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch3; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch3.events_id_seq OWNER TO yeti;

--
-- TOC entry 344 (class 1259 OID 20151)
-- Name: resource_action; Type: TABLE; Schema: switch3; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch3.resource_action OWNER TO yeti;

--
-- TOC entry 345 (class 1259 OID 20157)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch3; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch3.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4812 (class 0 OID 0)
-- Dependencies: 345
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch3; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 346 (class 1259 OID 20159)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch3; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch3.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 347 (class 1259 OID 20161)
-- Name: switch_interface_out; Type: TABLE; Schema: switch3; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch3.switch_interface_out OWNER TO yeti;

--
-- TOC entry 348 (class 1259 OID 20167)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch3; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch3.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4813 (class 0 OID 0)
-- Dependencies: 348
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch3; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 349 (class 1259 OID 20169)
-- Name: switch_interface_in; Type: TABLE; Schema: switch3; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch3.switch_interface_in OWNER TO yeti;

--
-- TOC entry 350 (class 1259 OID 20177)
-- Name: trusted_headers; Type: TABLE; Schema: switch3; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch3.trusted_headers OWNER TO yeti;

--
-- TOC entry 351 (class 1259 OID 20183)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch3; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch3.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4814 (class 0 OID 0)
-- Dependencies: 351
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch3; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch4, pg_catalog;

--
-- TOC entry 360 (class 1259 OID 20508)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch4; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch4.events_id_seq OWNER TO yeti;

--
-- TOC entry 361 (class 1259 OID 20510)
-- Name: resource_action; Type: TABLE; Schema: switch4; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch4.resource_action OWNER TO yeti;

--
-- TOC entry 362 (class 1259 OID 20516)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch4; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch4.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4815 (class 0 OID 0)
-- Dependencies: 362
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch4; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 363 (class 1259 OID 20518)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch4; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch4.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 364 (class 1259 OID 20520)
-- Name: switch_interface_out; Type: TABLE; Schema: switch4; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch4.switch_interface_out OWNER TO yeti;

--
-- TOC entry 365 (class 1259 OID 20526)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch4; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch4.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4816 (class 0 OID 0)
-- Dependencies: 365
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch4; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 366 (class 1259 OID 20528)
-- Name: switch_interface_in; Type: TABLE; Schema: switch4; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch4.switch_interface_in OWNER TO yeti;

--
-- TOC entry 367 (class 1259 OID 20536)
-- Name: trusted_headers; Type: TABLE; Schema: switch4; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch4.trusted_headers OWNER TO yeti;

--
-- TOC entry 368 (class 1259 OID 20542)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch4; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch4.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4817 (class 0 OID 0)
-- Dependencies: 368
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch4; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch5, pg_catalog;

--
-- TOC entry 381 (class 1259 OID 21201)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch5; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch5.events_id_seq OWNER TO yeti;

--
-- TOC entry 382 (class 1259 OID 21203)
-- Name: resource_action; Type: TABLE; Schema: switch5; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch5.resource_action OWNER TO yeti;

--
-- TOC entry 383 (class 1259 OID 21209)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch5; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch5.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4818 (class 0 OID 0)
-- Dependencies: 383
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch5; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 384 (class 1259 OID 21211)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch5; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch5.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 385 (class 1259 OID 21213)
-- Name: switch_interface_out; Type: TABLE; Schema: switch5; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch5.switch_interface_out OWNER TO yeti;

--
-- TOC entry 386 (class 1259 OID 21219)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch5; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch5.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4819 (class 0 OID 0)
-- Dependencies: 386
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch5; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 387 (class 1259 OID 21221)
-- Name: switch_interface_in; Type: TABLE; Schema: switch5; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch5.switch_interface_in OWNER TO yeti;

--
-- TOC entry 388 (class 1259 OID 21229)
-- Name: trusted_headers; Type: TABLE; Schema: switch5; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch5.trusted_headers OWNER TO yeti;

--
-- TOC entry 389 (class 1259 OID 21235)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch5; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch5.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4820 (class 0 OID 0)
-- Dependencies: 389
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch5; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch6, pg_catalog;

--
-- TOC entry 405 (class 1259 OID 23002)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch6; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch6.events_id_seq OWNER TO yeti;

--
-- TOC entry 406 (class 1259 OID 23004)
-- Name: resource_action; Type: TABLE; Schema: switch6; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch6.resource_action OWNER TO yeti;

--
-- TOC entry 407 (class 1259 OID 23010)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch6; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch6.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4821 (class 0 OID 0)
-- Dependencies: 407
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch6; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 408 (class 1259 OID 23012)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch6; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch6.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 409 (class 1259 OID 23014)
-- Name: switch_interface_out; Type: TABLE; Schema: switch6; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch6.switch_interface_out OWNER TO yeti;

--
-- TOC entry 410 (class 1259 OID 23020)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch6; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch6.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4822 (class 0 OID 0)
-- Dependencies: 410
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch6; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 411 (class 1259 OID 23022)
-- Name: switch_interface_in; Type: TABLE; Schema: switch6; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch6.switch_interface_in OWNER TO yeti;

--
-- TOC entry 412 (class 1259 OID 23030)
-- Name: trusted_headers; Type: TABLE; Schema: switch6; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch6.trusted_headers OWNER TO yeti;

--
-- TOC entry 413 (class 1259 OID 23036)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch6; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch6.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4823 (class 0 OID 0)
-- Dependencies: 413
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch6; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch7, pg_catalog;

--
-- TOC entry 427 (class 1259 OID 23401)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch7; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch7.events_id_seq OWNER TO yeti;

--
-- TOC entry 428 (class 1259 OID 23403)
-- Name: resource_action; Type: TABLE; Schema: switch7; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch7.resource_action OWNER TO yeti;

--
-- TOC entry 429 (class 1259 OID 23409)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch7; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch7.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4824 (class 0 OID 0)
-- Dependencies: 429
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch7; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 430 (class 1259 OID 23411)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch7; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch7.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 431 (class 1259 OID 23413)
-- Name: switch_interface_out; Type: TABLE; Schema: switch7; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch7.switch_interface_out OWNER TO yeti;

--
-- TOC entry 432 (class 1259 OID 23419)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch7; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch7.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4825 (class 0 OID 0)
-- Dependencies: 432
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch7; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 433 (class 1259 OID 23421)
-- Name: switch_interface_in; Type: TABLE; Schema: switch7; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch7.switch_interface_in OWNER TO yeti;

--
-- TOC entry 434 (class 1259 OID 23429)
-- Name: trusted_headers; Type: TABLE; Schema: switch7; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch7.trusted_headers OWNER TO yeti;

--
-- TOC entry 435 (class 1259 OID 23435)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch7; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch7.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4826 (class 0 OID 0)
-- Dependencies: 435
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch7; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = switch8, pg_catalog;

--
-- TOC entry 453 (class 1259 OID 23813)
-- Name: events_id_seq; Type: SEQUENCE; Schema: switch8; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch8.events_id_seq OWNER TO yeti;

--
-- TOC entry 454 (class 1259 OID 23815)
-- Name: resource_action; Type: TABLE; Schema: switch8; Owner: yeti; Tablespace: 
--

CREATE TABLE resource_action (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE switch8.resource_action OWNER TO yeti;

--
-- TOC entry 455 (class 1259 OID 23821)
-- Name: resource_type_id_seq; Type: SEQUENCE; Schema: switch8; Owner: yeti
--

CREATE SEQUENCE resource_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch8.resource_type_id_seq OWNER TO yeti;

--
-- TOC entry 4827 (class 0 OID 0)
-- Dependencies: 455
-- Name: resource_type_id_seq; Type: SEQUENCE OWNED BY; Schema: switch8; Owner: yeti
--

ALTER SEQUENCE resource_type_id_seq OWNED BY resource_type.id;


--
-- TOC entry 456 (class 1259 OID 23823)
-- Name: switch_in_interface_id_seq; Type: SEQUENCE; Schema: switch8; Owner: yeti
--

CREATE SEQUENCE switch_in_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch8.switch_in_interface_id_seq OWNER TO yeti;

--
-- TOC entry 457 (class 1259 OID 23825)
-- Name: switch_interface_out; Type: TABLE; Schema: switch8; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_out (
    id integer NOT NULL,
    name character varying,
    type character varying,
    custom boolean NOT NULL,
    rank integer NOT NULL
);


ALTER TABLE switch8.switch_interface_out OWNER TO yeti;

--
-- TOC entry 458 (class 1259 OID 23831)
-- Name: switch_interface_id_seq; Type: SEQUENCE; Schema: switch8; Owner: yeti
--

CREATE SEQUENCE switch_interface_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch8.switch_interface_id_seq OWNER TO yeti;

--
-- TOC entry 4828 (class 0 OID 0)
-- Dependencies: 458
-- Name: switch_interface_id_seq; Type: SEQUENCE OWNED BY; Schema: switch8; Owner: yeti
--

ALTER SEQUENCE switch_interface_id_seq OWNED BY switch_interface_out.id;


--
-- TOC entry 459 (class 1259 OID 23833)
-- Name: switch_interface_in; Type: TABLE; Schema: switch8; Owner: yeti; Tablespace: 
--

CREATE TABLE switch_interface_in (
    id integer DEFAULT nextval('switch_in_interface_id_seq'::regclass) NOT NULL,
    name character varying,
    type character varying,
    rank integer NOT NULL,
    format character varying,
    hashkey boolean DEFAULT false NOT NULL,
    param character varying
);


ALTER TABLE switch8.switch_interface_in OWNER TO yeti;

--
-- TOC entry 460 (class 1259 OID 23841)
-- Name: trusted_headers; Type: TABLE; Schema: switch8; Owner: yeti; Tablespace: 
--

CREATE TABLE trusted_headers (
    id integer NOT NULL,
    name character varying,
    rank integer NOT NULL
);


ALTER TABLE switch8.trusted_headers OWNER TO yeti;

--
-- TOC entry 461 (class 1259 OID 23847)
-- Name: trusted_headers_id_seq; Type: SEQUENCE; Schema: switch8; Owner: yeti
--

CREATE SEQUENCE trusted_headers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE switch8.trusted_headers_id_seq OWNER TO yeti;

--
-- TOC entry 4829 (class 0 OID 0)
-- Dependencies: 461
-- Name: trusted_headers_id_seq; Type: SEQUENCE OWNED BY; Schema: switch8; Owner: yeti
--

ALTER SEQUENCE trusted_headers_id_seq OWNED BY trusted_headers.id;


SET search_path = sys, pg_catalog;

--
-- TOC entry 397 (class 1259 OID 22613)
-- Name: active_currencies; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE active_currencies (
    id integer NOT NULL,
    currency_id smallint NOT NULL,
    is_base boolean DEFAULT false NOT NULL,
    enable_autoupdate boolean DEFAULT true NOT NULL,
    description character varying,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    rate numeric
);


ALTER TABLE sys.active_currencies OWNER TO yeti;

--
-- TOC entry 396 (class 1259 OID 22611)
-- Name: active_currencies_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE active_currencies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.active_currencies_id_seq OWNER TO yeti;

--
-- TOC entry 4830 (class 0 OID 0)
-- Dependencies: 396
-- Name: active_currencies_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE active_currencies_id_seq OWNED BY active_currencies.id;


--
-- TOC entry 311 (class 1259 OID 19079)
-- Name: api_log_config; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE api_log_config (
    id integer NOT NULL,
    controller character varying NOT NULL,
    debug boolean DEFAULT true NOT NULL
);


ALTER TABLE sys.api_log_config OWNER TO yeti;

--
-- TOC entry 310 (class 1259 OID 19077)
-- Name: api_log_config_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE api_log_config_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.api_log_config_id_seq OWNER TO yeti;

--
-- TOC entry 4831 (class 0 OID 0)
-- Dependencies: 310
-- Name: api_log_config_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE api_log_config_id_seq OWNED BY api_log_config.id;


--
-- TOC entry 289 (class 1259 OID 17987)
-- Name: cdr_tables; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE cdr_tables (
    id integer NOT NULL,
    name character varying NOT NULL,
    readable boolean DEFAULT true NOT NULL,
    writable boolean DEFAULT false NOT NULL,
    date_start character varying NOT NULL,
    date_stop character varying NOT NULL
);


ALTER TABLE sys.cdr_tables OWNER TO yeti;

--
-- TOC entry 290 (class 1259 OID 17995)
-- Name: cdrtables_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE cdrtables_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.cdrtables_id_seq OWNER TO yeti;

--
-- TOC entry 4832 (class 0 OID 0)
-- Dependencies: 290
-- Name: cdrtables_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE cdrtables_id_seq OWNED BY cdr_tables.id;


--
-- TOC entry 320 (class 1259 OID 19537)
-- Name: countries; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE countries (
    id integer NOT NULL,
    name character varying NOT NULL,
    iso2 character varying(2) NOT NULL
);


ALTER TABLE sys.countries OWNER TO yeti;

--
-- TOC entry 319 (class 1259 OID 19535)
-- Name: countries_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE countries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.countries_id_seq OWNER TO yeti;

--
-- TOC entry 4833 (class 0 OID 0)
-- Dependencies: 319
-- Name: countries_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE countries_id_seq OWNED BY countries.id;


--
-- TOC entry 395 (class 1259 OID 22595)
-- Name: currencies; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE currencies (
    id smallint NOT NULL,
    name character varying NOT NULL,
    country_id integer,
    code character varying(3) NOT NULL,
    num_code character varying(3) NOT NULL
);


ALTER TABLE sys.currencies OWNER TO yeti;

--
-- TOC entry 394 (class 1259 OID 22593)
-- Name: currencies_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE currencies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.currencies_id_seq OWNER TO yeti;

--
-- TOC entry 4834 (class 0 OID 0)
-- Dependencies: 394
-- Name: currencies_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE currencies_id_seq OWNED BY currencies.id;


--
-- TOC entry 370 (class 1259 OID 20628)
-- Name: delayed_jobs; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE delayed_jobs (
    id integer NOT NULL,
    priority integer DEFAULT 0 NOT NULL,
    attempts integer DEFAULT 0 NOT NULL,
    handler text NOT NULL,
    last_error text,
    run_at timestamp with time zone,
    locked_at timestamp with time zone,
    failed_at timestamp with time zone,
    locked_by character varying(255),
    queue character varying(255),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL
);


ALTER TABLE sys.delayed_jobs OWNER TO yeti;

--
-- TOC entry 369 (class 1259 OID 20626)
-- Name: delayed_jobs_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE delayed_jobs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.delayed_jobs_id_seq OWNER TO yeti;

--
-- TOC entry 4835 (class 0 OID 0)
-- Dependencies: 369
-- Name: delayed_jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE delayed_jobs_id_seq OWNED BY delayed_jobs.id;


--
-- TOC entry 314 (class 1259 OID 19261)
-- Name: events_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.events_id_seq OWNER TO yeti;

--
-- TOC entry 291 (class 1259 OID 17997)
-- Name: events; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE events (
    id integer DEFAULT nextval('events_id_seq'::regclass) NOT NULL,
    command character varying NOT NULL,
    retries integer DEFAULT 0 NOT NULL,
    node_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    last_error character varying
);


ALTER TABLE sys.events OWNER TO yeti;

--
-- TOC entry 292 (class 1259 OID 18006)
-- Name: guiconfig; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE guiconfig (
    rows_per_page character varying DEFAULT '50,100'::character varying NOT NULL,
    id integer NOT NULL,
    cdr_unload_dir character varying,
    cdr_unload_uri character varying,
    max_records integer DEFAULT 100500 NOT NULL,
    import_max_threads integer DEFAULT 4 NOT NULL,
    import_helpers_dir character varying DEFAULT '/tmp'::character varying,
    cdr_archive_delay integer DEFAULT 4 NOT NULL,
    cdr_remove_delay integer DEFAULT 120 NOT NULL,
    active_calls_require_filter boolean DEFAULT true NOT NULL,
    registrations_require_filter boolean DEFAULT true NOT NULL,
    active_calls_show_chart boolean DEFAULT false NOT NULL,
    active_calls_autorefresh_enable boolean DEFAULT false NOT NULL,
    max_call_duration integer DEFAULT 7200 NOT NULL,
    random_disconnect_enable boolean DEFAULT false NOT NULL,
    random_disconnect_length integer DEFAULT 7000 NOT NULL,
    drop_call_if_lnp_fail boolean DEFAULT false NOT NULL,
    short_call_length integer DEFAULT 15 NOT NULL,
    termination_stats_window integer DEFAULT 24 NOT NULL,
    lnp_cache_ttl integer DEFAULT 10800 NOT NULL,
    quality_control_min_calls integer DEFAULT 100 NOT NULL,
    quality_control_min_duration integer DEFAULT 3600 NOT NULL
);


ALTER TABLE sys.guiconfig OWNER TO yeti;

--
-- TOC entry 293 (class 1259 OID 18016)
-- Name: guiconfig_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE guiconfig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.guiconfig_id_seq OWNER TO yeti;

--
-- TOC entry 4836 (class 0 OID 0)
-- Dependencies: 293
-- Name: guiconfig_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE guiconfig_id_seq OWNED BY guiconfig.id;


--
-- TOC entry 309 (class 1259 OID 19052)
-- Name: jobs; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE jobs (
    id integer NOT NULL,
    type character varying NOT NULL,
    description character varying,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    running boolean DEFAULT false NOT NULL
);


ALTER TABLE sys.jobs OWNER TO yeti;

--
-- TOC entry 308 (class 1259 OID 19050)
-- Name: jobs_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE jobs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.jobs_id_seq OWNER TO yeti;

--
-- TOC entry 4837 (class 0 OID 0)
-- Dependencies: 308
-- Name: jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE jobs_id_seq OWNED BY jobs.id;


--
-- TOC entry 440 (class 1259 OID 23653)
-- Name: lnp_database_drivers; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE lnp_database_drivers (
    id smallint NOT NULL,
    name character varying NOT NULL,
    description text
);


ALTER TABLE sys.lnp_database_drivers OWNER TO yeti;

--
-- TOC entry 439 (class 1259 OID 23651)
-- Name: lnp_database_drivers_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE lnp_database_drivers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.lnp_database_drivers_id_seq OWNER TO yeti;

--
-- TOC entry 4838 (class 0 OID 0)
-- Dependencies: 439
-- Name: lnp_database_drivers_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE lnp_database_drivers_id_seq OWNED BY lnp_database_drivers.id;


--
-- TOC entry 468 (class 1259 OID 24295)
-- Name: lnp_resolvers; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE lnp_resolvers (
    id integer NOT NULL,
    name character varying NOT NULL,
    address character varying NOT NULL,
    port integer NOT NULL
);


ALTER TABLE sys.lnp_resolvers OWNER TO yeti;

--
-- TOC entry 467 (class 1259 OID 24293)
-- Name: lnp_resolvers_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE lnp_resolvers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.lnp_resolvers_id_seq OWNER TO yeti;

--
-- TOC entry 4839 (class 0 OID 0)
-- Dependencies: 467
-- Name: lnp_resolvers_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE lnp_resolvers_id_seq OWNED BY lnp_resolvers.id;


--
-- TOC entry 321 (class 1259 OID 19548)
-- Name: network_prefixes_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE network_prefixes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.network_prefixes_id_seq OWNER TO yeti;

--
-- TOC entry 4840 (class 0 OID 0)
-- Dependencies: 321
-- Name: network_prefixes_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE network_prefixes_id_seq OWNED BY network_prefixes.id;


--
-- TOC entry 318 (class 1259 OID 19524)
-- Name: networks; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE networks (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE sys.networks OWNER TO yeti;

--
-- TOC entry 317 (class 1259 OID 19522)
-- Name: networks_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE networks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.networks_id_seq OWNER TO yeti;

--
-- TOC entry 4841 (class 0 OID 0)
-- Dependencies: 317
-- Name: networks_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE networks_id_seq OWNED BY networks.id;


--
-- TOC entry 294 (class 1259 OID 18018)
-- Name: nodes; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE nodes (
    id integer NOT NULL,
    signalling_ip character varying,
    signalling_port integer,
    rpc_uri character varying,
    name character varying,
    pop_id integer NOT NULL
);


ALTER TABLE sys.nodes OWNER TO yeti;

--
-- TOC entry 295 (class 1259 OID 18024)
-- Name: node_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE node_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.node_id_seq OWNER TO yeti;

--
-- TOC entry 4842 (class 0 OID 0)
-- Dependencies: 295
-- Name: node_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE node_id_seq OWNED BY nodes.id;


--
-- TOC entry 296 (class 1259 OID 18026)
-- Name: pops; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE pops (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE sys.pops OWNER TO yeti;

--
-- TOC entry 297 (class 1259 OID 18032)
-- Name: pop_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE pop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.pop_id_seq OWNER TO yeti;

--
-- TOC entry 4843 (class 0 OID 0)
-- Dependencies: 297
-- Name: pop_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE pop_id_seq OWNED BY pops.id;


--
-- TOC entry 316 (class 1259 OID 19372)
-- Name: prefixes_tmp; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE prefixes_tmp (
    id integer NOT NULL,
    prefix character varying,
    name character varying
);


ALTER TABLE sys.prefixes_tmp OWNER TO yeti;

--
-- TOC entry 315 (class 1259 OID 19370)
-- Name: prefixes_tmp_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE prefixes_tmp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.prefixes_tmp_id_seq OWNER TO yeti;

--
-- TOC entry 4844 (class 0 OID 0)
-- Dependencies: 315
-- Name: prefixes_tmp_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE prefixes_tmp_id_seq OWNED BY prefixes_tmp.id;


--
-- TOC entry 340 (class 1259 OID 20071)
-- Name: sensor_levels; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE sensor_levels (
    id smallint NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE sys.sensor_levels OWNER TO yeti;

--
-- TOC entry 337 (class 1259 OID 20045)
-- Name: sensor_modes; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE sensor_modes (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE sys.sensor_modes OWNER TO yeti;

--
-- TOC entry 339 (class 1259 OID 20055)
-- Name: sensors; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE sensors (
    id smallint NOT NULL,
    name character varying NOT NULL,
    mode_id integer NOT NULL,
    source_interface character varying,
    target_mac macaddr,
    use_routing boolean NOT NULL,
    target_ip inet,
    source_ip inet
);


ALTER TABLE sys.sensors OWNER TO yeti;

--
-- TOC entry 338 (class 1259 OID 20053)
-- Name: sensors_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE sensors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.sensors_id_seq OWNER TO yeti;

--
-- TOC entry 4845 (class 0 OID 0)
-- Dependencies: 338
-- Name: sensors_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE sensors_id_seq OWNED BY sensors.id;


--
-- TOC entry 393 (class 1259 OID 21365)
-- Name: smtp_connections; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE smtp_connections (
    id integer NOT NULL,
    name character varying NOT NULL,
    host character varying NOT NULL,
    port integer DEFAULT 25 NOT NULL,
    from_address character varying NOT NULL,
    auth_user character varying,
    auth_password character varying,
    global boolean DEFAULT true NOT NULL
);


ALTER TABLE sys.smtp_connections OWNER TO yeti;

--
-- TOC entry 392 (class 1259 OID 21363)
-- Name: smtp_connections_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE smtp_connections_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.smtp_connections_id_seq OWNER TO yeti;

--
-- TOC entry 4846 (class 0 OID 0)
-- Dependencies: 392
-- Name: smtp_connections_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE smtp_connections_id_seq OWNED BY smtp_connections.id;


--
-- TOC entry 473 (class 1259 OID 24392)
-- Name: timezones; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE timezones (
    id integer NOT NULL,
    name character varying NOT NULL,
    abbrev character varying,
    utc_offset interval,
    is_dst boolean
);


ALTER TABLE sys.timezones OWNER TO yeti;

--
-- TOC entry 472 (class 1259 OID 24390)
-- Name: timezones_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE timezones_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.timezones_id_seq OWNER TO yeti;

--
-- TOC entry 4847 (class 0 OID 0)
-- Dependencies: 472
-- Name: timezones_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE timezones_id_seq OWNED BY timezones.id;


--
-- TOC entry 298 (class 1259 OID 18034)
-- Name: version; Type: TABLE; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE TABLE version (
    id bigint NOT NULL,
    number integer NOT NULL,
    apply_date timestamp with time zone DEFAULT now() NOT NULL,
    comment character varying
);


ALTER TABLE sys.version OWNER TO yeti;

--
-- TOC entry 299 (class 1259 OID 18041)
-- Name: version_id_seq; Type: SEQUENCE; Schema: sys; Owner: yeti
--

CREATE SEQUENCE version_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sys.version_id_seq OWNER TO yeti;

--
-- TOC entry 4848 (class 0 OID 0)
-- Dependencies: 299
-- Name: version_id_seq; Type: SEQUENCE OWNED BY; Schema: sys; Owner: yeti
--

ALTER SEQUENCE version_id_seq OWNED BY version.id;


SET search_path = billing, pg_catalog;

--
-- TOC entry 3760 (class 2604 OID 18043)
-- Name: id; Type: DEFAULT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY accounts ALTER COLUMN id SET DEFAULT nextval('accounts_id_seq'::regclass);


--
-- TOC entry 4001 (class 2604 OID 20736)
-- Name: id; Type: DEFAULT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY invoice_periods ALTER COLUMN id SET DEFAULT nextval('invoice_periods_id_seq'::regclass);


--
-- TOC entry 3962 (class 2604 OID 18879)
-- Name: id; Type: DEFAULT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY invoice_templates ALTER COLUMN id SET DEFAULT nextval('invoices_templates_id_seq'::regclass);


--
-- TOC entry 3845 (class 2604 OID 18044)
-- Name: id; Type: DEFAULT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY invoices ALTER COLUMN id SET DEFAULT nextval('invoices_id_seq'::regclass);


--
-- TOC entry 3847 (class 2604 OID 18045)
-- Name: id; Type: DEFAULT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY payments ALTER COLUMN id SET DEFAULT nextval('payments_id_seq'::regclass);


SET search_path = class4, pg_catalog;

--
-- TOC entry 3961 (class 2604 OID 18860)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY blacklist_items ALTER COLUMN id SET DEFAULT nextval('blacklist_items_id_seq'::regclass);


--
-- TOC entry 3960 (class 2604 OID 18846)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY blacklists ALTER COLUMN id SET DEFAULT nextval('blacklists_id_seq'::regclass);


--
-- TOC entry 3849 (class 2604 OID 18119)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY codec_group_codecs ALTER COLUMN id SET DEFAULT nextval('codec_group_codecs_id_seq'::regclass);


--
-- TOC entry 3851 (class 2604 OID 18120)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY codec_groups ALTER COLUMN id SET DEFAULT nextval('codec_groups_id_seq'::regclass);


--
-- TOC entry 3852 (class 2604 OID 18121)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY codecs ALTER COLUMN id SET DEFAULT nextval('codecs_id_seq'::regclass);


--
-- TOC entry 3861 (class 2604 OID 18122)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth ALTER COLUMN id SET DEFAULT nextval('customers_auth_id_seq'::regclass);


--
-- TOC entry 3768 (class 2604 OID 18123)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY destinations ALTER COLUMN id SET DEFAULT nextval('destinations_id_seq'::regclass);


--
-- TOC entry 4081 (class 2604 OID 32635)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeer_next_rates ALTER COLUMN id SET DEFAULT nextval('dialpeer_next_rates_id_seq'::regclass);


--
-- TOC entry 3780 (class 2604 OID 18124)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers ALTER COLUMN id SET DEFAULT nextval('dialpeers_id_seq'::regclass);


--
-- TOC entry 3868 (class 2604 OID 18125)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_code ALTER COLUMN id SET DEFAULT nextval('disconnect_code_id_seq'::regclass);


--
-- TOC entry 3872 (class 2604 OID 18126)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_policy ALTER COLUMN id SET DEFAULT nextval('disconnect_code_policy_id_seq'::regclass);


--
-- TOC entry 3871 (class 2604 OID 18127)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_policy_code ALTER COLUMN id SET DEFAULT nextval('disconnect_code_policy_codes_id_seq'::regclass);


--
-- TOC entry 3875 (class 2604 OID 18128)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateway_groups ALTER COLUMN id SET DEFAULT nextval('gateway_groups_id_seq'::regclass);


--
-- TOC entry 3839 (class 2604 OID 18129)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways ALTER COLUMN id SET DEFAULT nextval('gateways_id_seq'::regclass);


--
-- TOC entry 4037 (class 2604 OID 23687)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY lnp_cache ALTER COLUMN id SET DEFAULT nextval('lnp_cache_id_seq'::regclass);


--
-- TOC entry 4036 (class 2604 OID 23669)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY lnp_databases ALTER COLUMN id SET DEFAULT nextval('lnp_databases_id_seq'::regclass);


--
-- TOC entry 4025 (class 2604 OID 23186)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY number_list_items ALTER COLUMN id SET DEFAULT nextval('number_list_items_id_seq'::regclass);


--
-- TOC entry 4024 (class 2604 OID 23173)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY number_lists ALTER COLUMN id SET DEFAULT nextval('number_lists_id_seq'::regclass);


--
-- TOC entry 3877 (class 2604 OID 18130)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY rateplans ALTER COLUMN id SET DEFAULT nextval('rateplans_id_seq'::regclass);


--
-- TOC entry 3881 (class 2604 OID 18131)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY registrations ALTER COLUMN id SET DEFAULT nextval('registrations_id_seq'::regclass);


--
-- TOC entry 3882 (class 2604 OID 18132)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_groups ALTER COLUMN id SET DEFAULT nextval('routing_groups_id_seq'::regclass);


--
-- TOC entry 3990 (class 2604 OID 20439)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_groups ALTER COLUMN id SET DEFAULT nextval('routing_plan_groups_id_seq'::regclass);


--
-- TOC entry 4038 (class 2604 OID 23705)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_lnp_rules ALTER COLUMN id SET DEFAULT nextval('routing_plan_lnp_rules_id_seq'::regclass);


--
-- TOC entry 4015 (class 2604 OID 22680)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_static_routes ALTER COLUMN id SET DEFAULT nextval('routing_plan_static_routes_id_seq'::regclass);


--
-- TOC entry 3986 (class 2604 OID 20418)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plans ALTER COLUMN id SET DEFAULT nextval('routing_plans_id_seq'::regclass);


--
-- TOC entry 3883 (class 2604 OID 18133)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY session_refresh_methods ALTER COLUMN id SET DEFAULT nextval('session_refresh_methods_id_seq'::regclass);


--
-- TOC entry 3884 (class 2604 OID 18134)
-- Name: id; Type: DEFAULT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY sortings ALTER COLUMN id SET DEFAULT nextval('sortings_id_seq'::regclass);


SET search_path = data_import, pg_catalog;

--
-- TOC entry 3886 (class 2604 OID 18135)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_accounts ALTER COLUMN id SET DEFAULT nextval('import_accounts_id_seq'::regclass);


--
-- TOC entry 3889 (class 2604 OID 18136)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_codec_group_codecs ALTER COLUMN id SET DEFAULT nextval('import_codec_group_codecs_id_seq'::regclass);


--
-- TOC entry 3890 (class 2604 OID 18137)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_codec_groups ALTER COLUMN id SET DEFAULT nextval('import_codec_groups_id_seq'::regclass);


--
-- TOC entry 3891 (class 2604 OID 18138)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_contractors ALTER COLUMN id SET DEFAULT nextval('import_contractors_id_seq'::regclass);


--
-- TOC entry 3894 (class 2604 OID 18139)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_customers_auth ALTER COLUMN id SET DEFAULT nextval('import_customers_auth_id_seq'::regclass);


--
-- TOC entry 3895 (class 2604 OID 18140)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_destinations ALTER COLUMN id SET DEFAULT nextval('import_destinations_id_seq'::regclass);


--
-- TOC entry 3896 (class 2604 OID 18141)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_dialpeers ALTER COLUMN id SET DEFAULT nextval('import_dialpeers_id_seq'::regclass);


--
-- TOC entry 3898 (class 2604 OID 18142)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_disconnect_policies ALTER COLUMN id SET DEFAULT nextval('import_disconnect_policies_id_seq'::regclass);


--
-- TOC entry 3899 (class 2604 OID 18143)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_gateway_groups ALTER COLUMN id SET DEFAULT nextval('import_gateway_groups_id_seq'::regclass);


--
-- TOC entry 4000 (class 2604 OID 20647)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_gateways ALTER COLUMN id SET DEFAULT nextval('import_gateways_id_seq1'::regclass);


--
-- TOC entry 3900 (class 2604 OID 18145)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_rateplans ALTER COLUMN id SET DEFAULT nextval('import_rateplans_id_seq'::regclass);


--
-- TOC entry 3901 (class 2604 OID 18146)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_registrations ALTER COLUMN id SET DEFAULT nextval('import_registrations_id_seq'::regclass);


--
-- TOC entry 3902 (class 2604 OID 18147)
-- Name: id; Type: DEFAULT; Schema: data_import; Owner: yeti
--

ALTER TABLE ONLY import_routing_groups ALTER COLUMN id SET DEFAULT nextval('import_routing_groups_id_seq'::regclass);


SET search_path = gui, pg_catalog;

--
-- TOC entry 3904 (class 2604 OID 18148)
-- Name: id; Type: DEFAULT; Schema: gui; Owner: yeti
--

ALTER TABLE ONLY active_admin_comments ALTER COLUMN id SET DEFAULT nextval('admin_notes_id_seq'::regclass);


--
-- TOC entry 3910 (class 2604 OID 18149)
-- Name: id; Type: DEFAULT; Schema: gui; Owner: yeti
--

ALTER TABLE ONLY admin_users ALTER COLUMN id SET DEFAULT nextval('admin_users_id_seq'::regclass);


--
-- TOC entry 3911 (class 2604 OID 18150)
-- Name: id; Type: DEFAULT; Schema: gui; Owner: yeti
--

ALTER TABLE ONLY background_threads ALTER COLUMN id SET DEFAULT nextval('background_threads_id_seq'::regclass);


--
-- TOC entry 4045 (class 2604 OID 24016)
-- Name: id; Type: DEFAULT; Schema: gui; Owner: yeti
--

ALTER TABLE ONLY sessions ALTER COLUMN id SET DEFAULT nextval('sessions_id_seq'::regclass);


--
-- TOC entry 3912 (class 2604 OID 18151)
-- Name: id; Type: DEFAULT; Schema: gui; Owner: yeti
--

ALTER TABLE ONLY versions ALTER COLUMN id SET DEFAULT nextval('versions_id_seq'::regclass);


SET search_path = logs, pg_catalog;

--
-- TOC entry 4046 (class 2604 OID 24066)
-- Name: id; Type: DEFAULT; Schema: logs; Owner: yeti
--

ALTER TABLE ONLY api_requests ALTER COLUMN id SET DEFAULT nextval('api_requests_id_seq'::regclass);


--
-- TOC entry 3915 (class 2604 OID 18152)
-- Name: id; Type: DEFAULT; Schema: logs; Owner: yeti
--

ALTER TABLE ONLY logic_log ALTER COLUMN id SET DEFAULT nextval('logic_log_id_seq'::regclass);


SET search_path = notifications, pg_catalog;

--
-- TOC entry 4049 (class 2604 OID 24320)
-- Name: id; Type: DEFAULT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY alerts ALTER COLUMN id SET DEFAULT nextval('alerts_id_seq'::regclass);


--
-- TOC entry 4034 (class 2604 OID 23540)
-- Name: id; Type: DEFAULT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY attachments ALTER COLUMN id SET DEFAULT nextval('attachments_id_seq'::regclass);


--
-- TOC entry 4026 (class 2604 OID 23298)
-- Name: id; Type: DEFAULT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY contacts ALTER COLUMN id SET DEFAULT nextval('contacts_id_seq'::regclass);


--
-- TOC entry 4027 (class 2604 OID 23320)
-- Name: id; Type: DEFAULT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY email_logs ALTER COLUMN id SET DEFAULT nextval('email_log_id_seq'::regclass);


SET search_path = pgq, pg_catalog;

--
-- TOC entry 4074 (class 2604 OID 24654)
-- Name: ev_txid; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1 ALTER COLUMN ev_txid SET DEFAULT txid_current();


--
-- TOC entry 4075 (class 2604 OID 24665)
-- Name: ev_id; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_0 ALTER COLUMN ev_id SET DEFAULT nextval('event_1_id_seq'::regclass);


--
-- TOC entry 4076 (class 2604 OID 24661)
-- Name: ev_txid; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_0 ALTER COLUMN ev_txid SET DEFAULT txid_current();


--
-- TOC entry 4077 (class 2604 OID 24674)
-- Name: ev_id; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_1 ALTER COLUMN ev_id SET DEFAULT nextval('event_1_id_seq'::regclass);


--
-- TOC entry 4078 (class 2604 OID 24670)
-- Name: ev_txid; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_1 ALTER COLUMN ev_txid SET DEFAULT txid_current();


--
-- TOC entry 4079 (class 2604 OID 24683)
-- Name: ev_id; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_2 ALTER COLUMN ev_id SET DEFAULT nextval('event_1_id_seq'::regclass);


--
-- TOC entry 4080 (class 2604 OID 24679)
-- Name: ev_txid; Type: DEFAULT; Schema: pgq; Owner: yeti
--

ALTER TABLE ONLY event_1_2 ALTER COLUMN ev_txid SET DEFAULT txid_current();


SET search_path = public, pg_catalog;

--
-- TOC entry 3916 (class 2604 OID 18153)
-- Name: id; Type: DEFAULT; Schema: public; Owner: yeti
--

ALTER TABLE ONLY contractors ALTER COLUMN id SET DEFAULT nextval('contractors_id_seq'::regclass);


SET search_path = reports, pg_catalog;

--
-- TOC entry 3917 (class 2604 OID 18154)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_custom_report ALTER COLUMN id SET DEFAULT nextval('cdr_custom_report_id_seq'::regclass);


--
-- TOC entry 3918 (class 2604 OID 18155)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_custom_report_data ALTER COLUMN id SET DEFAULT nextval('cdr_custom_report_data_id_seq'::regclass);


--
-- TOC entry 3919 (class 2604 OID 18156)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_interval_report ALTER COLUMN id SET DEFAULT nextval('cdr_interval_report_id_seq'::regclass);


--
-- TOC entry 3920 (class 2604 OID 18157)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_interval_report_data ALTER COLUMN id SET DEFAULT nextval('cdr_interval_report_data_id_seq'::regclass);


--
-- TOC entry 3921 (class 2604 OID 18158)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY report_vendors ALTER COLUMN id SET DEFAULT nextval('report_vendors_id_seq'::regclass);


--
-- TOC entry 3923 (class 2604 OID 18159)
-- Name: id; Type: DEFAULT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY report_vendors_data ALTER COLUMN id SET DEFAULT nextval('report_vendors_data_id_seq'::regclass);


SET search_path = runtime_stats, pg_catalog;

--
-- TOC entry 3926 (class 2604 OID 18160)
-- Name: id; Type: DEFAULT; Schema: runtime_stats; Owner: yeti
--

ALTER TABLE ONLY dialpeers_stats ALTER COLUMN id SET DEFAULT nextval('dialpeers_stats_id_seq'::regclass);


--
-- TOC entry 3929 (class 2604 OID 18161)
-- Name: id; Type: DEFAULT; Schema: runtime_stats; Owner: yeti
--

ALTER TABLE ONLY gateways_stats ALTER COLUMN id SET DEFAULT nextval('gateways_stats_id_seq'::regclass);


SET search_path = switch2, pg_catalog;

--
-- TOC entry 3973 (class 2604 OID 19655)
-- Name: id; Type: DEFAULT; Schema: switch2; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 3975 (class 2604 OID 19656)
-- Name: id; Type: DEFAULT; Schema: switch2; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 3978 (class 2604 OID 19657)
-- Name: id; Type: DEFAULT; Schema: switch2; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch3, pg_catalog;

--
-- TOC entry 3980 (class 2604 OID 20185)
-- Name: id; Type: DEFAULT; Schema: switch3; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 3982 (class 2604 OID 20186)
-- Name: id; Type: DEFAULT; Schema: switch3; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 3985 (class 2604 OID 20187)
-- Name: id; Type: DEFAULT; Schema: switch3; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch4, pg_catalog;

--
-- TOC entry 3991 (class 2604 OID 20544)
-- Name: id; Type: DEFAULT; Schema: switch4; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 3993 (class 2604 OID 20545)
-- Name: id; Type: DEFAULT; Schema: switch4; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 3996 (class 2604 OID 20546)
-- Name: id; Type: DEFAULT; Schema: switch4; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch5, pg_catalog;

--
-- TOC entry 4002 (class 2604 OID 21237)
-- Name: id; Type: DEFAULT; Schema: switch5; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 4004 (class 2604 OID 21238)
-- Name: id; Type: DEFAULT; Schema: switch5; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 4007 (class 2604 OID 21239)
-- Name: id; Type: DEFAULT; Schema: switch5; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch6, pg_catalog;

--
-- TOC entry 4018 (class 2604 OID 23038)
-- Name: id; Type: DEFAULT; Schema: switch6; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 4020 (class 2604 OID 23039)
-- Name: id; Type: DEFAULT; Schema: switch6; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 4023 (class 2604 OID 23040)
-- Name: id; Type: DEFAULT; Schema: switch6; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch7, pg_catalog;

--
-- TOC entry 4028 (class 2604 OID 23437)
-- Name: id; Type: DEFAULT; Schema: switch7; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 4030 (class 2604 OID 23438)
-- Name: id; Type: DEFAULT; Schema: switch7; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 4033 (class 2604 OID 23439)
-- Name: id; Type: DEFAULT; Schema: switch7; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = switch8, pg_catalog;

--
-- TOC entry 4039 (class 2604 OID 23849)
-- Name: id; Type: DEFAULT; Schema: switch8; Owner: yeti
--

ALTER TABLE ONLY resource_type ALTER COLUMN id SET DEFAULT nextval('resource_type_id_seq'::regclass);


--
-- TOC entry 4041 (class 2604 OID 23850)
-- Name: id; Type: DEFAULT; Schema: switch8; Owner: yeti
--

ALTER TABLE ONLY switch_interface_out ALTER COLUMN id SET DEFAULT nextval('switch_interface_id_seq'::regclass);


--
-- TOC entry 4044 (class 2604 OID 23851)
-- Name: id; Type: DEFAULT; Schema: switch8; Owner: yeti
--

ALTER TABLE ONLY trusted_headers ALTER COLUMN id SET DEFAULT nextval('trusted_headers_id_seq'::regclass);


SET search_path = sys, pg_catalog;

--
-- TOC entry 4012 (class 2604 OID 22616)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY active_currencies ALTER COLUMN id SET DEFAULT nextval('active_currencies_id_seq'::regclass);


--
-- TOC entry 3966 (class 2604 OID 19082)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY api_log_config ALTER COLUMN id SET DEFAULT nextval('api_log_config_id_seq'::regclass);


--
-- TOC entry 3932 (class 2604 OID 18165)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY cdr_tables ALTER COLUMN id SET DEFAULT nextval('cdrtables_id_seq'::regclass);


--
-- TOC entry 3971 (class 2604 OID 19540)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY countries ALTER COLUMN id SET DEFAULT nextval('countries_id_seq'::regclass);


--
-- TOC entry 4011 (class 2604 OID 22598)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY currencies ALTER COLUMN id SET DEFAULT nextval('currencies_id_seq'::regclass);


--
-- TOC entry 3997 (class 2604 OID 20631)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY delayed_jobs ALTER COLUMN id SET DEFAULT nextval('delayed_jobs_id_seq'::regclass);


--
-- TOC entry 3948 (class 2604 OID 18166)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY guiconfig ALTER COLUMN id SET DEFAULT nextval('guiconfig_id_seq'::regclass);


--
-- TOC entry 3963 (class 2604 OID 19055)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY jobs ALTER COLUMN id SET DEFAULT nextval('jobs_id_seq'::regclass);


--
-- TOC entry 4035 (class 2604 OID 23656)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY lnp_database_drivers ALTER COLUMN id SET DEFAULT nextval('lnp_database_drivers_id_seq'::regclass);


--
-- TOC entry 4048 (class 2604 OID 24298)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY lnp_resolvers ALTER COLUMN id SET DEFAULT nextval('lnp_resolvers_id_seq'::regclass);


--
-- TOC entry 3972 (class 2604 OID 19553)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY network_prefixes ALTER COLUMN id SET DEFAULT nextval('network_prefixes_id_seq'::regclass);


--
-- TOC entry 3970 (class 2604 OID 19527)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY networks ALTER COLUMN id SET DEFAULT nextval('networks_id_seq'::regclass);


--
-- TOC entry 3956 (class 2604 OID 18167)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY nodes ALTER COLUMN id SET DEFAULT nextval('node_id_seq'::regclass);


--
-- TOC entry 3957 (class 2604 OID 18168)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY pops ALTER COLUMN id SET DEFAULT nextval('pop_id_seq'::regclass);


--
-- TOC entry 3969 (class 2604 OID 19375)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY prefixes_tmp ALTER COLUMN id SET DEFAULT nextval('prefixes_tmp_id_seq'::regclass);


--
-- TOC entry 3979 (class 2604 OID 20058)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY sensors ALTER COLUMN id SET DEFAULT nextval('sensors_id_seq'::regclass);


--
-- TOC entry 4009 (class 2604 OID 21368)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY smtp_connections ALTER COLUMN id SET DEFAULT nextval('smtp_connections_id_seq'::regclass);


--
-- TOC entry 4050 (class 2604 OID 24395)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY timezones ALTER COLUMN id SET DEFAULT nextval('timezones_id_seq'::regclass);


--
-- TOC entry 3958 (class 2604 OID 18169)
-- Name: id; Type: DEFAULT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY version ALTER COLUMN id SET DEFAULT nextval('version_id_seq'::regclass);


SET search_path = billing, pg_catalog;

--
-- TOC entry 4088 (class 2606 OID 18172)
-- Name: accounts_name_key; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_name_key UNIQUE (name);


--
-- TOC entry 4090 (class 2606 OID 18174)
-- Name: accounts_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- TOC entry 4287 (class 2606 OID 19102)
-- Name: cdr_batches_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_batches
    ADD CONSTRAINT cdr_batches_pkey PRIMARY KEY (id);


--
-- TOC entry 4389 (class 2606 OID 20743)
-- Name: invoice_periods_name_key; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY invoice_periods
    ADD CONSTRAINT invoice_periods_name_key UNIQUE (name);


--
-- TOC entry 4391 (class 2606 OID 20741)
-- Name: invoice_periods_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY invoice_periods
    ADD CONSTRAINT invoice_periods_pkey PRIMARY KEY (id);


--
-- TOC entry 4105 (class 2606 OID 18176)
-- Name: invoices_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY invoices
    ADD CONSTRAINT invoices_pkey PRIMARY KEY (id);


--
-- TOC entry 4275 (class 2606 OID 18886)
-- Name: invoices_templates_name_key; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY invoice_templates
    ADD CONSTRAINT invoices_templates_name_key UNIQUE (name);


--
-- TOC entry 4277 (class 2606 OID 18884)
-- Name: invoices_templates_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY invoice_templates
    ADD CONSTRAINT invoices_templates_pkey PRIMARY KEY (id);


--
-- TOC entry 4107 (class 2606 OID 18178)
-- Name: payments_pkey; Type: CONSTRAINT; Schema: billing; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY payments
    ADD CONSTRAINT payments_pkey PRIMARY KEY (id);


SET search_path = class4, pg_catalog;

--
-- TOC entry 4273 (class 2606 OID 18865)
-- Name: blacklist_items_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY blacklist_items
    ADD CONSTRAINT blacklist_items_pkey PRIMARY KEY (id);


--
-- TOC entry 4268 (class 2606 OID 18853)
-- Name: blacklists_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY blacklists
    ADD CONSTRAINT blacklists_name_key UNIQUE (name);


--
-- TOC entry 4270 (class 2606 OID 18851)
-- Name: blacklists_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY blacklists
    ADD CONSTRAINT blacklists_pkey PRIMARY KEY (id);


--
-- TOC entry 4109 (class 2606 OID 18218)
-- Name: codec_group_codecs_codec_group_id_codec_id_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codec_group_codecs
    ADD CONSTRAINT codec_group_codecs_codec_group_id_codec_id_key UNIQUE (codec_group_id, codec_id);


--
-- TOC entry 4111 (class 2606 OID 18220)
-- Name: codec_group_codecs_codec_group_id_priority_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codec_group_codecs
    ADD CONSTRAINT codec_group_codecs_codec_group_id_priority_key UNIQUE (codec_group_id, priority);


--
-- TOC entry 4113 (class 2606 OID 18222)
-- Name: codec_group_codecs_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codec_group_codecs
    ADD CONSTRAINT codec_group_codecs_pkey PRIMARY KEY (id);


--
-- TOC entry 4115 (class 2606 OID 18224)
-- Name: codec_groups_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codec_groups
    ADD CONSTRAINT codec_groups_name_key UNIQUE (name);


--
-- TOC entry 4117 (class 2606 OID 18226)
-- Name: codec_groups_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codec_groups
    ADD CONSTRAINT codec_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4119 (class 2606 OID 18228)
-- Name: codecs_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codecs
    ADD CONSTRAINT codecs_name_key UNIQUE (name);


--
-- TOC entry 4121 (class 2606 OID 18230)
-- Name: codecs_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY codecs
    ADD CONSTRAINT codecs_pkey PRIMARY KEY (id);


--
-- TOC entry 4124 (class 2606 OID 18232)
-- Name: customers_auth_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_name_key UNIQUE (name);


--
-- TOC entry 4126 (class 2606 OID 18234)
-- Name: customers_auth_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_pkey PRIMARY KEY (id);


--
-- TOC entry 4129 (class 2606 OID 18236)
-- Name: destination_rate_policy_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY destination_rate_policy
    ADD CONSTRAINT destination_rate_policy_name_key UNIQUE (name);


--
-- TOC entry 4131 (class 2606 OID 18238)
-- Name: destination_rate_policy_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY destination_rate_policy
    ADD CONSTRAINT destination_rate_policy_pkey PRIMARY KEY (id);


--
-- TOC entry 4092 (class 2606 OID 18240)
-- Name: destinations_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY destinations
    ADD CONSTRAINT destinations_pkey PRIMARY KEY (id);


--
-- TOC entry 4535 (class 2606 OID 32641)
-- Name: dialpeer_next_rates_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dialpeer_next_rates
    ADD CONSTRAINT dialpeer_next_rates_pkey PRIMARY KEY (id);


--
-- TOC entry 4096 (class 2606 OID 18242)
-- Name: dialpeers_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_pkey PRIMARY KEY (id);


--
-- TOC entry 4084 (class 2606 OID 18244)
-- Name: disconnect_code_namespace_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_code_namespace
    ADD CONSTRAINT disconnect_code_namespace_name_key UNIQUE (name);


--
-- TOC entry 4086 (class 2606 OID 18246)
-- Name: disconnect_code_namespace_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_code_namespace
    ADD CONSTRAINT disconnect_code_namespace_pkey PRIMARY KEY (id);


--
-- TOC entry 4134 (class 2606 OID 18248)
-- Name: disconnect_code_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_code
    ADD CONSTRAINT disconnect_code_pkey PRIMARY KEY (id);


--
-- TOC entry 4136 (class 2606 OID 18250)
-- Name: disconnect_code_policy_codes_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_policy_code
    ADD CONSTRAINT disconnect_code_policy_codes_pkey PRIMARY KEY (id);


--
-- TOC entry 4138 (class 2606 OID 18252)
-- Name: disconnect_code_policy_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_policy
    ADD CONSTRAINT disconnect_code_policy_name_key UNIQUE (name);


--
-- TOC entry 4140 (class 2606 OID 18254)
-- Name: disconnect_code_policy_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_policy
    ADD CONSTRAINT disconnect_code_policy_pkey PRIMARY KEY (id);


--
-- TOC entry 4142 (class 2606 OID 18256)
-- Name: disconnect_initiators_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY disconnect_initiators
    ADD CONSTRAINT disconnect_initiators_pkey PRIMARY KEY (id);


--
-- TOC entry 4144 (class 2606 OID 18258)
-- Name: diversion_policy_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY diversion_policy
    ADD CONSTRAINT diversion_policy_name_key UNIQUE (name);


--
-- TOC entry 4146 (class 2606 OID 18260)
-- Name: diversion_policy_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY diversion_policy
    ADD CONSTRAINT diversion_policy_pkey PRIMARY KEY (id);


--
-- TOC entry 4354 (class 2606 OID 20374)
-- Name: dtmf_receive_modes_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dtmf_receive_modes
    ADD CONSTRAINT dtmf_receive_modes_name_key UNIQUE (name);


--
-- TOC entry 4356 (class 2606 OID 20372)
-- Name: dtmf_receive_modes_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dtmf_receive_modes
    ADD CONSTRAINT dtmf_receive_modes_pkey PRIMARY KEY (id);


--
-- TOC entry 4350 (class 2606 OID 20364)
-- Name: dtmf_send_modes_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dtmf_send_modes
    ADD CONSTRAINT dtmf_send_modes_name_key UNIQUE (name);


--
-- TOC entry 4352 (class 2606 OID 20362)
-- Name: dtmf_send_modes_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dtmf_send_modes
    ADD CONSTRAINT dtmf_send_modes_pkey PRIMARY KEY (id);


--
-- TOC entry 4148 (class 2606 OID 18262)
-- Name: dump_level_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dump_level
    ADD CONSTRAINT dump_level_name_key UNIQUE (name);


--
-- TOC entry 4150 (class 2606 OID 18264)
-- Name: dump_level_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dump_level
    ADD CONSTRAINT dump_level_pkey PRIMARY KEY (id);


--
-- TOC entry 4152 (class 2606 OID 18266)
-- Name: filter_types_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY filter_types
    ADD CONSTRAINT filter_types_pkey PRIMARY KEY (id);


--
-- TOC entry 4154 (class 2606 OID 18268)
-- Name: gateway_groups_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY gateway_groups
    ADD CONSTRAINT gateway_groups_name_key UNIQUE (name);


--
-- TOC entry 4156 (class 2606 OID 18270)
-- Name: gateway_groups_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY gateway_groups
    ADD CONSTRAINT gateway_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4101 (class 2606 OID 18272)
-- Name: gateways_name_unique; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_name_unique UNIQUE (name);


--
-- TOC entry 4103 (class 2606 OID 18274)
-- Name: gateways_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_pkey PRIMARY KEY (id);


--
-- TOC entry 4487 (class 2606 OID 23694)
-- Name: lnp_cache_dst_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_cache
    ADD CONSTRAINT lnp_cache_dst_key UNIQUE (dst);


--
-- TOC entry 4489 (class 2606 OID 23692)
-- Name: lnp_cache_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_cache
    ADD CONSTRAINT lnp_cache_pkey PRIMARY KEY (id);


--
-- TOC entry 4483 (class 2606 OID 23676)
-- Name: lnp_databases_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_databases
    ADD CONSTRAINT lnp_databases_name_key UNIQUE (name);


--
-- TOC entry 4485 (class 2606 OID 23674)
-- Name: lnp_databases_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_databases
    ADD CONSTRAINT lnp_databases_pkey PRIMARY KEY (id);


--
-- TOC entry 4453 (class 2606 OID 23191)
-- Name: number_list_items_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY number_list_items
    ADD CONSTRAINT number_list_items_pkey PRIMARY KEY (id);


--
-- TOC entry 4449 (class 2606 OID 23180)
-- Name: number_lists_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY number_lists
    ADD CONSTRAINT number_lists_name_key UNIQUE (name);


--
-- TOC entry 4451 (class 2606 OID 23178)
-- Name: number_lists_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY number_lists
    ADD CONSTRAINT number_lists_pkey PRIMARY KEY (id);


--
-- TOC entry 4411 (class 2606 OID 21273)
-- Name: rate_profit_control_modes_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY rate_profit_control_modes
    ADD CONSTRAINT rate_profit_control_modes_name_key UNIQUE (name);


--
-- TOC entry 4413 (class 2606 OID 21271)
-- Name: rate_profit_control_modes_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY rate_profit_control_modes
    ADD CONSTRAINT rate_profit_control_modes_pkey PRIMARY KEY (id);


--
-- TOC entry 4158 (class 2606 OID 18276)
-- Name: rateplans_name_unique; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY rateplans
    ADD CONSTRAINT rateplans_name_unique UNIQUE (name);


--
-- TOC entry 4160 (class 2606 OID 18278)
-- Name: rateplans_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY rateplans
    ADD CONSTRAINT rateplans_pkey PRIMARY KEY (id);


--
-- TOC entry 4162 (class 2606 OID 18280)
-- Name: registrations_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY registrations
    ADD CONSTRAINT registrations_name_key UNIQUE (name);


--
-- TOC entry 4164 (class 2606 OID 18282)
-- Name: registrations_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY registrations
    ADD CONSTRAINT registrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4166 (class 2606 OID 18284)
-- Name: routing_groups_name_unique; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_groups
    ADD CONSTRAINT routing_groups_name_unique UNIQUE (name);


--
-- TOC entry 4168 (class 2606 OID 18286)
-- Name: routing_groups_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_groups
    ADD CONSTRAINT routing_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4362 (class 2606 OID 20441)
-- Name: routing_plan_groups_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plan_groups
    ADD CONSTRAINT routing_plan_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4364 (class 2606 OID 20443)
-- Name: routing_plan_groups_routing_plan_id_routing_group_id_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plan_groups
    ADD CONSTRAINT routing_plan_groups_routing_plan_id_routing_group_id_key UNIQUE (routing_plan_id, routing_group_id);


--
-- TOC entry 4491 (class 2606 OID 23710)
-- Name: routing_plan_lnp_rules_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plan_lnp_rules
    ADD CONSTRAINT routing_plan_lnp_rules_pkey PRIMARY KEY (id);


--
-- TOC entry 4427 (class 2606 OID 22686)
-- Name: routing_plan_static_routes_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plan_static_routes
    ADD CONSTRAINT routing_plan_static_routes_pkey PRIMARY KEY (id);


--
-- TOC entry 4358 (class 2606 OID 20428)
-- Name: routing_plans_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plans
    ADD CONSTRAINT routing_plans_name_key UNIQUE (name);


--
-- TOC entry 4360 (class 2606 OID 20426)
-- Name: routing_plans_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY routing_plans
    ADD CONSTRAINT routing_plans_pkey PRIMARY KEY (id);


--
-- TOC entry 4264 (class 2606 OID 18804)
-- Name: sdp_c_location_name_key; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sdp_c_location
    ADD CONSTRAINT sdp_c_location_name_key UNIQUE (name);


--
-- TOC entry 4266 (class 2606 OID 18802)
-- Name: sdp_c_location_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sdp_c_location
    ADD CONSTRAINT sdp_c_location_pkey PRIMARY KEY (id);


--
-- TOC entry 4170 (class 2606 OID 18288)
-- Name: session_refresh_methods_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY session_refresh_methods
    ADD CONSTRAINT session_refresh_methods_pkey PRIMARY KEY (id);


--
-- TOC entry 4172 (class 2606 OID 18290)
-- Name: sortings_pkey; Type: CONSTRAINT; Schema: class4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sortings
    ADD CONSTRAINT sortings_pkey PRIMARY KEY (id);


SET search_path = data_import, pg_catalog;

--
-- TOC entry 4174 (class 2606 OID 18293)
-- Name: import_accounts_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_accounts
    ADD CONSTRAINT import_accounts_pkey PRIMARY KEY (id);


--
-- TOC entry 4176 (class 2606 OID 18295)
-- Name: import_codec_group_codecs_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_codec_group_codecs
    ADD CONSTRAINT import_codec_group_codecs_pkey PRIMARY KEY (id);


--
-- TOC entry 4178 (class 2606 OID 18297)
-- Name: import_codec_groups_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_codec_groups
    ADD CONSTRAINT import_codec_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4180 (class 2606 OID 18299)
-- Name: import_contractors_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_contractors
    ADD CONSTRAINT import_contractors_pkey PRIMARY KEY (id);


--
-- TOC entry 4182 (class 2606 OID 18301)
-- Name: import_customers_auth_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_customers_auth
    ADD CONSTRAINT import_customers_auth_pkey PRIMARY KEY (id);


--
-- TOC entry 4184 (class 2606 OID 18307)
-- Name: import_destinations_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_destinations
    ADD CONSTRAINT import_destinations_pkey PRIMARY KEY (id);


--
-- TOC entry 4186 (class 2606 OID 18309)
-- Name: import_dialpeers_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_dialpeers
    ADD CONSTRAINT import_dialpeers_pkey PRIMARY KEY (id);


--
-- TOC entry 4188 (class 2606 OID 18311)
-- Name: import_disconnect_policies_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_disconnect_policies
    ADD CONSTRAINT import_disconnect_policies_pkey PRIMARY KEY (id);


--
-- TOC entry 4190 (class 2606 OID 18313)
-- Name: import_gateway_groups_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_gateway_groups
    ADD CONSTRAINT import_gateway_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4387 (class 2606 OID 20652)
-- Name: import_gateways_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_gateways
    ADD CONSTRAINT import_gateways_pkey PRIMARY KEY (id);


--
-- TOC entry 4192 (class 2606 OID 18317)
-- Name: import_rateplans_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_rateplans
    ADD CONSTRAINT import_rateplans_pkey PRIMARY KEY (id);


--
-- TOC entry 4194 (class 2606 OID 18319)
-- Name: import_registrations_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_registrations
    ADD CONSTRAINT import_registrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4196 (class 2606 OID 18321)
-- Name: import_routing_groups_pkey; Type: CONSTRAINT; Schema: data_import; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY import_routing_groups
    ADD CONSTRAINT import_routing_groups_pkey PRIMARY KEY (id);


SET search_path = gui, pg_catalog;

--
-- TOC entry 4198 (class 2606 OID 18324)
-- Name: admin_notes_pkey; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY active_admin_comments
    ADD CONSTRAINT admin_notes_pkey PRIMARY KEY (id);


--
-- TOC entry 4203 (class 2606 OID 18326)
-- Name: admin_users_pkey; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY admin_users
    ADD CONSTRAINT admin_users_pkey PRIMARY KEY (id);


--
-- TOC entry 4206 (class 2606 OID 18328)
-- Name: admin_users_username_key; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY admin_users
    ADD CONSTRAINT admin_users_username_key UNIQUE (username);


--
-- TOC entry 4209 (class 2606 OID 18330)
-- Name: background_threads_pkey; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY background_threads
    ADD CONSTRAINT background_threads_pkey PRIMARY KEY (id);


--
-- TOC entry 4513 (class 2606 OID 24021)
-- Name: sessions_pkey; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- TOC entry 4515 (class 2606 OID 24023)
-- Name: sessions_session_id_key; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_session_id_key UNIQUE (session_id);


--
-- TOC entry 4213 (class 2606 OID 18332)
-- Name: versions_pkey; Type: CONSTRAINT; Schema: gui; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY versions
    ADD CONSTRAINT versions_pkey PRIMARY KEY (id);


SET search_path = logs, pg_catalog;

--
-- TOC entry 4518 (class 2606 OID 24072)
-- Name: api_requests_pkey; Type: CONSTRAINT; Schema: logs; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY api_requests
    ADD CONSTRAINT api_requests_pkey PRIMARY KEY (id);


--
-- TOC entry 4215 (class 2606 OID 18346)
-- Name: logic_log_pkey; Type: CONSTRAINT; Schema: logs; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY logic_log
    ADD CONSTRAINT logic_log_pkey PRIMARY KEY (id);


SET search_path = notifications, pg_catalog;

--
-- TOC entry 4524 (class 2606 OID 24325)
-- Name: alerts_pkey; Type: CONSTRAINT; Schema: notifications; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- TOC entry 4526 (class 2606 OID 24327)
-- Name: alerts_type_key; Type: CONSTRAINT; Schema: notifications; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY alerts
    ADD CONSTRAINT alerts_type_key UNIQUE (event);


--
-- TOC entry 4477 (class 2606 OID 23545)
-- Name: attachments_pkey; Type: CONSTRAINT; Schema: notifications; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY attachments
    ADD CONSTRAINT attachments_pkey PRIMARY KEY (id);


--
-- TOC entry 4455 (class 2606 OID 23303)
-- Name: contacts_pkey; Type: CONSTRAINT; Schema: notifications; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_pkey PRIMARY KEY (id);


--
-- TOC entry 4457 (class 2606 OID 23325)
-- Name: email_log_pkey; Type: CONSTRAINT; Schema: notifications; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY email_logs
    ADD CONSTRAINT email_log_pkey PRIMARY KEY (id);


SET search_path = public, pg_catalog;

--
-- TOC entry 4217 (class 2606 OID 18348)
-- Name: contractors_name_unique; Type: CONSTRAINT; Schema: public; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY contractors
    ADD CONSTRAINT contractors_name_unique UNIQUE (name);


--
-- TOC entry 4219 (class 2606 OID 18350)
-- Name: contractors_pkey; Type: CONSTRAINT; Schema: public; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY contractors
    ADD CONSTRAINT contractors_pkey PRIMARY KEY (id);


SET search_path = reports, pg_catalog;

--
-- TOC entry 4224 (class 2606 OID 18356)
-- Name: cdr_custom_report_data_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_custom_report_data
    ADD CONSTRAINT cdr_custom_report_data_pkey PRIMARY KEY (id);


--
-- TOC entry 4222 (class 2606 OID 18358)
-- Name: cdr_custom_report_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_custom_report
    ADD CONSTRAINT cdr_custom_report_pkey PRIMARY KEY (id);


--
-- TOC entry 4228 (class 2606 OID 18360)
-- Name: cdr_interval_report_aggrerator_name_key; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_interval_report_aggrerator
    ADD CONSTRAINT cdr_interval_report_aggrerator_name_key UNIQUE (name);


--
-- TOC entry 4230 (class 2606 OID 18362)
-- Name: cdr_interval_report_aggrerator_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_interval_report_aggrerator
    ADD CONSTRAINT cdr_interval_report_aggrerator_pkey PRIMARY KEY (id);


--
-- TOC entry 4232 (class 2606 OID 18364)
-- Name: cdr_interval_report_data_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_interval_report_data
    ADD CONSTRAINT cdr_interval_report_data_pkey PRIMARY KEY (id);


--
-- TOC entry 4226 (class 2606 OID 18366)
-- Name: cdr_interval_report_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_interval_report
    ADD CONSTRAINT cdr_interval_report_pkey PRIMARY KEY (id);


--
-- TOC entry 4236 (class 2606 OID 18368)
-- Name: report_vendors_data_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY report_vendors_data
    ADD CONSTRAINT report_vendors_data_pkey PRIMARY KEY (id);


--
-- TOC entry 4234 (class 2606 OID 18370)
-- Name: report_vendors_pkey; Type: CONSTRAINT; Schema: reports; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY report_vendors
    ADD CONSTRAINT report_vendors_pkey PRIMARY KEY (id);


SET search_path = runtime_stats, pg_catalog;

--
-- TOC entry 4238 (class 2606 OID 18372)
-- Name: dialpeers_stats_pkey; Type: CONSTRAINT; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dialpeers_stats
    ADD CONSTRAINT dialpeers_stats_pkey PRIMARY KEY (id);


--
-- TOC entry 4242 (class 2606 OID 18374)
-- Name: gateways_stats_pkey; Type: CONSTRAINT; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY gateways_stats
    ADD CONSTRAINT gateways_stats_pkey PRIMARY KEY (id);


--
-- TOC entry 4240 (class 2606 OID 18376)
-- Name: unique_dp; Type: CONSTRAINT; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY dialpeers_stats
    ADD CONSTRAINT unique_dp UNIQUE (dialpeer_id);


SET search_path = switch2, pg_catalog;

--
-- TOC entry 4308 (class 2606 OID 19659)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4310 (class 2606 OID 19661)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4304 (class 2606 OID 19663)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4306 (class 2606 OID 19665)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4316 (class 2606 OID 19667)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4318 (class 2606 OID 19669)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4312 (class 2606 OID 19671)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4314 (class 2606 OID 19673)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4320 (class 2606 OID 19675)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch2; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch3, pg_catalog;

--
-- TOC entry 4336 (class 2606 OID 20189)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4338 (class 2606 OID 20191)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4332 (class 2606 OID 20193)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4334 (class 2606 OID 20195)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4344 (class 2606 OID 20197)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4346 (class 2606 OID 20199)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4340 (class 2606 OID 20201)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4342 (class 2606 OID 20203)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4348 (class 2606 OID 20205)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch3; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch4, pg_catalog;

--
-- TOC entry 4370 (class 2606 OID 20548)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4372 (class 2606 OID 20550)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4366 (class 2606 OID 20552)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4368 (class 2606 OID 20554)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4378 (class 2606 OID 20556)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4380 (class 2606 OID 20558)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4374 (class 2606 OID 20560)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4376 (class 2606 OID 20562)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4382 (class 2606 OID 20564)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch4; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch5, pg_catalog;

--
-- TOC entry 4397 (class 2606 OID 21241)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4399 (class 2606 OID 21243)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4393 (class 2606 OID 21245)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4395 (class 2606 OID 21247)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4405 (class 2606 OID 21249)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4407 (class 2606 OID 21251)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4401 (class 2606 OID 21253)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4403 (class 2606 OID 21255)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4409 (class 2606 OID 21257)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch5; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch6, pg_catalog;

--
-- TOC entry 4435 (class 2606 OID 23042)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4437 (class 2606 OID 23044)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4431 (class 2606 OID 23046)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4433 (class 2606 OID 23048)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4443 (class 2606 OID 23050)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4445 (class 2606 OID 23052)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4439 (class 2606 OID 23054)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4441 (class 2606 OID 23056)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4447 (class 2606 OID 23058)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch6; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch7, pg_catalog;

--
-- TOC entry 4463 (class 2606 OID 23441)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4465 (class 2606 OID 23443)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4459 (class 2606 OID 23445)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4461 (class 2606 OID 23447)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4471 (class 2606 OID 23449)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4473 (class 2606 OID 23451)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4467 (class 2606 OID 23453)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4469 (class 2606 OID 23455)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4475 (class 2606 OID 23457)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch7; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = switch8, pg_catalog;

--
-- TOC entry 4499 (class 2606 OID 23854)
-- Name: resource_action_name_key; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_name_key UNIQUE (name);


--
-- TOC entry 4501 (class 2606 OID 23856)
-- Name: resource_action_pkey; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_action
    ADD CONSTRAINT resource_action_pkey PRIMARY KEY (id);


--
-- TOC entry 4495 (class 2606 OID 23858)
-- Name: resource_type_name_key; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_name_key UNIQUE (name);


--
-- TOC entry 4497 (class 2606 OID 23860)
-- Name: resource_type_pkey; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4507 (class 2606 OID 23862)
-- Name: switch_in_interface_pkey; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4509 (class 2606 OID 23864)
-- Name: switch_in_interface_rank_key; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_in
    ADD CONSTRAINT switch_in_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4503 (class 2606 OID 23866)
-- Name: switch_interface_pkey; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_pkey PRIMARY KEY (id);


--
-- TOC entry 4505 (class 2606 OID 23868)
-- Name: switch_interface_rank_key; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY switch_interface_out
    ADD CONSTRAINT switch_interface_rank_key UNIQUE (rank);


--
-- TOC entry 4511 (class 2606 OID 23870)
-- Name: trusted_headers_pkey; Type: CONSTRAINT; Schema: switch8; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY trusted_headers
    ADD CONSTRAINT trusted_headers_pkey PRIMARY KEY (id);


SET search_path = sys, pg_catalog;

--
-- TOC entry 4423 (class 2606 OID 22625)
-- Name: active_currencies_currency_id_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY active_currencies
    ADD CONSTRAINT active_currencies_currency_id_key UNIQUE (currency_id);


--
-- TOC entry 4425 (class 2606 OID 22623)
-- Name: active_currencies_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY active_currencies
    ADD CONSTRAINT active_currencies_pkey PRIMARY KEY (id);


--
-- TOC entry 4283 (class 2606 OID 19090)
-- Name: api_log_config_controller_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY api_log_config
    ADD CONSTRAINT api_log_config_controller_key UNIQUE (controller);


--
-- TOC entry 4285 (class 2606 OID 19088)
-- Name: api_log_config_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY api_log_config
    ADD CONSTRAINT api_log_config_pkey PRIMARY KEY (id);


--
-- TOC entry 4246 (class 2606 OID 18398)
-- Name: cdrtables_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY cdr_tables
    ADD CONSTRAINT cdrtables_pkey PRIMARY KEY (id);


--
-- TOC entry 4295 (class 2606 OID 19547)
-- Name: countries_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY countries
    ADD CONSTRAINT countries_name_key UNIQUE (name);


--
-- TOC entry 4297 (class 2606 OID 19545)
-- Name: countries_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY countries
    ADD CONSTRAINT countries_pkey PRIMARY KEY (id);


--
-- TOC entry 4419 (class 2606 OID 22605)
-- Name: currencies_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY currencies
    ADD CONSTRAINT currencies_name_key UNIQUE (name);


--
-- TOC entry 4421 (class 2606 OID 22603)
-- Name: currencies_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY currencies
    ADD CONSTRAINT currencies_pkey PRIMARY KEY (id);


--
-- TOC entry 4384 (class 2606 OID 20638)
-- Name: delayed_jobs_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY delayed_jobs
    ADD CONSTRAINT delayed_jobs_pkey PRIMARY KEY (id);


--
-- TOC entry 4248 (class 2606 OID 18400)
-- Name: events_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- TOC entry 4250 (class 2606 OID 18402)
-- Name: guiconfig_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY guiconfig
    ADD CONSTRAINT guiconfig_pkey PRIMARY KEY (id);


--
-- TOC entry 4279 (class 2606 OID 19062)
-- Name: jobs_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY jobs
    ADD CONSTRAINT jobs_pkey PRIMARY KEY (id);


--
-- TOC entry 4281 (class 2606 OID 19064)
-- Name: jobs_type_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY jobs
    ADD CONSTRAINT jobs_type_key UNIQUE (type);


--
-- TOC entry 4479 (class 2606 OID 23663)
-- Name: lnp_database_drivers_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_database_drivers
    ADD CONSTRAINT lnp_database_drivers_name_key UNIQUE (name);


--
-- TOC entry 4481 (class 2606 OID 23661)
-- Name: lnp_database_drivers_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_database_drivers
    ADD CONSTRAINT lnp_database_drivers_pkey PRIMARY KEY (id);


--
-- TOC entry 4520 (class 2606 OID 24305)
-- Name: lnp_resolvers_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_resolvers
    ADD CONSTRAINT lnp_resolvers_name_key UNIQUE (name);


--
-- TOC entry 4522 (class 2606 OID 24303)
-- Name: lnp_resolvers_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY lnp_resolvers
    ADD CONSTRAINT lnp_resolvers_pkey PRIMARY KEY (id);


--
-- TOC entry 4299 (class 2606 OID 19558)
-- Name: network_prefixes_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY network_prefixes
    ADD CONSTRAINT network_prefixes_pkey PRIMARY KEY (id);


--
-- TOC entry 4301 (class 2606 OID 19560)
-- Name: network_prefixes_prefix_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY network_prefixes
    ADD CONSTRAINT network_prefixes_prefix_key UNIQUE (prefix);


--
-- TOC entry 4291 (class 2606 OID 19534)
-- Name: networks_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY networks
    ADD CONSTRAINT networks_name_key UNIQUE (name);


--
-- TOC entry 4293 (class 2606 OID 19532)
-- Name: networks_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY networks
    ADD CONSTRAINT networks_pkey PRIMARY KEY (id);


--
-- TOC entry 4252 (class 2606 OID 18404)
-- Name: node_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY nodes
    ADD CONSTRAINT node_name_key UNIQUE (name);


--
-- TOC entry 4254 (class 2606 OID 18406)
-- Name: node_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY nodes
    ADD CONSTRAINT node_pkey PRIMARY KEY (id);


--
-- TOC entry 4256 (class 2606 OID 18408)
-- Name: pop_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY pops
    ADD CONSTRAINT pop_name_key UNIQUE (name);


--
-- TOC entry 4258 (class 2606 OID 18410)
-- Name: pop_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY pops
    ADD CONSTRAINT pop_pkey PRIMARY KEY (id);


--
-- TOC entry 4289 (class 2606 OID 19380)
-- Name: prefixes_tmp_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY prefixes_tmp
    ADD CONSTRAINT prefixes_tmp_pkey PRIMARY KEY (id);


--
-- TOC entry 4328 (class 2606 OID 20080)
-- Name: sensor_levels_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sensor_levels
    ADD CONSTRAINT sensor_levels_name_key UNIQUE (name);


--
-- TOC entry 4330 (class 2606 OID 20078)
-- Name: sensor_levels_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sensor_levels
    ADD CONSTRAINT sensor_levels_pkey PRIMARY KEY (id);


--
-- TOC entry 4322 (class 2606 OID 20052)
-- Name: sensor_modes_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sensor_modes
    ADD CONSTRAINT sensor_modes_pkey PRIMARY KEY (id);


--
-- TOC entry 4324 (class 2606 OID 20065)
-- Name: sensors_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sensors
    ADD CONSTRAINT sensors_name_key UNIQUE (name);


--
-- TOC entry 4326 (class 2606 OID 20063)
-- Name: sensors_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY sensors
    ADD CONSTRAINT sensors_pkey PRIMARY KEY (id);


--
-- TOC entry 4415 (class 2606 OID 21376)
-- Name: smtp_connections_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY smtp_connections
    ADD CONSTRAINT smtp_connections_name_key UNIQUE (name);


--
-- TOC entry 4417 (class 2606 OID 21374)
-- Name: smtp_connections_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY smtp_connections
    ADD CONSTRAINT smtp_connections_pkey PRIMARY KEY (id);


--
-- TOC entry 4528 (class 2606 OID 24402)
-- Name: timezones_name_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY timezones
    ADD CONSTRAINT timezones_name_key UNIQUE (name);


--
-- TOC entry 4530 (class 2606 OID 24400)
-- Name: timezones_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY timezones
    ADD CONSTRAINT timezones_pkey PRIMARY KEY (id);


--
-- TOC entry 4260 (class 2606 OID 18412)
-- Name: version_number_key; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY version
    ADD CONSTRAINT version_number_key UNIQUE (number);


--
-- TOC entry 4262 (class 2606 OID 18414)
-- Name: version_pkey; Type: CONSTRAINT; Schema: sys; Owner: yeti; Tablespace: 
--

ALTER TABLE ONLY version
    ADD CONSTRAINT version_pkey PRIMARY KEY (id);


SET search_path = class4, pg_catalog;

--
-- TOC entry 4271 (class 1259 OID 18873)
-- Name: blacklist_items_blacklist_id_key_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX blacklist_items_blacklist_id_key_idx ON blacklist_items USING btree (blacklist_id, key);


--
-- TOC entry 4122 (class 1259 OID 18446)
-- Name: customers_auth_ip_prefix_range_prefix_range1_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX customers_auth_ip_prefix_range_prefix_range1_idx ON customers_auth USING gist (ip, ((dst_prefix)::public.prefix_range), ((src_prefix)::public.prefix_range));


--
-- TOC entry 4127 (class 1259 OID 18447)
-- Name: customers_auth_prefix_range_prefix_range1_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX customers_auth_prefix_range_prefix_range1_idx ON customers_auth USING gist (((dst_prefix)::public.prefix_range), ((src_prefix)::public.prefix_range)) WHERE enabled;


--
-- TOC entry 4093 (class 1259 OID 18448)
-- Name: destinations_prefix_range_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX destinations_prefix_range_idx ON destinations USING gist (((prefix)::public.prefix_range));


--
-- TOC entry 4094 (class 1259 OID 32629)
-- Name: dialpeers_external_id_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX dialpeers_external_id_idx ON dialpeers USING btree (external_id);


--
-- TOC entry 4097 (class 1259 OID 18450)
-- Name: dialpeers_prefix_range_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX dialpeers_prefix_range_idx ON dialpeers USING gist (((prefix)::public.prefix_range));


--
-- TOC entry 4098 (class 1259 OID 21975)
-- Name: dialpeers_prefix_range_valid_from_valid_till_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX dialpeers_prefix_range_valid_from_valid_till_idx ON dialpeers USING gist (((prefix)::public.prefix_range), valid_from, valid_till) WHERE enabled;


--
-- TOC entry 4099 (class 1259 OID 21974)
-- Name: dialpeers_prefix_range_valid_from_valid_till_idx1; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX dialpeers_prefix_range_valid_from_valid_till_idx1 ON dialpeers USING gist (((prefix)::public.prefix_range), valid_from, valid_till) WHERE (enabled AND (NOT locked));


--
-- TOC entry 4132 (class 1259 OID 18454)
-- Name: disconnect_code_code_success_successnozerolen_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX disconnect_code_code_success_successnozerolen_idx ON disconnect_code USING btree (code, success, successnozerolen);


--
-- TOC entry 4492 (class 1259 OID 23976)
-- Name: routing_plan_lnp_rules_prefix_range_routing_plan_id_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX routing_plan_lnp_rules_prefix_range_routing_plan_id_idx ON routing_plan_lnp_rules USING gist (((dst_prefix)::public.prefix_range), routing_plan_id);


--
-- TOC entry 4493 (class 1259 OID 24204)
-- Name: routing_plan_lnp_rules_routing_plan_id_dst_prefix_database__idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX routing_plan_lnp_rules_routing_plan_id_dst_prefix_database__idx ON routing_plan_lnp_rules USING btree (routing_plan_id, dst_prefix, database_id);


--
-- TOC entry 4428 (class 1259 OID 22765)
-- Name: routing_plan_static_routes_prefix_range_vendor_id_routing_p_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE INDEX routing_plan_static_routes_prefix_range_vendor_id_routing_p_idx ON routing_plan_static_routes USING gist (((prefix)::public.prefix_range), vendor_id, routing_plan_id);


--
-- TOC entry 4429 (class 1259 OID 22715)
-- Name: routing_plan_static_routes_routing_plan_id_prefix_vendor_id_idx; Type: INDEX; Schema: class4; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX routing_plan_static_routes_routing_plan_id_prefix_vendor_id_idx ON routing_plan_static_routes USING btree (routing_plan_id, prefix, vendor_id);


SET search_path = gui, pg_catalog;

--
-- TOC entry 4204 (class 1259 OID 24361)
-- Name: admin_users_username_idx; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX admin_users_username_idx ON admin_users USING btree (username);


--
-- TOC entry 4199 (class 1259 OID 18455)
-- Name: index_active_admin_comments_on_author_type_and_author_id; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE INDEX index_active_admin_comments_on_author_type_and_author_id ON active_admin_comments USING btree (author_type, author_id);


--
-- TOC entry 4200 (class 1259 OID 18456)
-- Name: index_active_admin_comments_on_namespace; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE INDEX index_active_admin_comments_on_namespace ON active_admin_comments USING btree (namespace);


--
-- TOC entry 4201 (class 1259 OID 18457)
-- Name: index_admin_notes_on_resource_type_and_resource_id; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE INDEX index_admin_notes_on_resource_type_and_resource_id ON active_admin_comments USING btree (resource_type, resource_id);


--
-- TOC entry 4207 (class 1259 OID 18459)
-- Name: index_admin_users_on_reset_password_token; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX index_admin_users_on_reset_password_token ON admin_users USING btree (reset_password_token);


--
-- TOC entry 4211 (class 1259 OID 18460)
-- Name: index_versions_on_item_type_and_item_id; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE INDEX index_versions_on_item_type_and_item_id ON versions USING btree (item_type, item_id);


--
-- TOC entry 4516 (class 1259 OID 24024)
-- Name: sessions_updated_at_idx; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE INDEX sessions_updated_at_idx ON sessions USING btree (updated_at);


--
-- TOC entry 4210 (class 1259 OID 18461)
-- Name: unique_schema_migrations; Type: INDEX; Schema: gui; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


SET search_path = pgq, pg_catalog;

--
-- TOC entry 4531 (class 1259 OID 24666)
-- Name: event_1_0_txid_idx; Type: INDEX; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE INDEX event_1_0_txid_idx ON event_1_0 USING btree (ev_txid);


--
-- TOC entry 4532 (class 1259 OID 24675)
-- Name: event_1_1_txid_idx; Type: INDEX; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE INDEX event_1_1_txid_idx ON event_1_1 USING btree (ev_txid);


--
-- TOC entry 4533 (class 1259 OID 24684)
-- Name: event_1_2_txid_idx; Type: INDEX; Schema: pgq; Owner: yeti; Tablespace: 
--

CREATE INDEX event_1_2_txid_idx ON event_1_2 USING btree (ev_txid);


SET search_path = reports, pg_catalog;

--
-- TOC entry 4220 (class 1259 OID 18462)
-- Name: cdr_custom_report_id_idx; Type: INDEX; Schema: reports; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX cdr_custom_report_id_idx ON cdr_custom_report USING btree (id) WHERE (id IS NOT NULL);


SET search_path = runtime_stats, pg_catalog;

--
-- TOC entry 4243 (class 1259 OID 24292)
-- Name: unique_gw; Type: INDEX; Schema: runtime_stats; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX unique_gw ON gateways_stats USING btree (gateway_id);


SET search_path = sys, pg_catalog;

--
-- TOC entry 4244 (class 1259 OID 18463)
-- Name: cdr_tables_name_idx; Type: INDEX; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE UNIQUE INDEX cdr_tables_name_idx ON cdr_tables USING btree (name);


--
-- TOC entry 4385 (class 1259 OID 22444)
-- Name: delayed_jobs_priority; Type: INDEX; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE INDEX delayed_jobs_priority ON delayed_jobs USING btree (priority, run_at);


--
-- TOC entry 4302 (class 1259 OID 19571)
-- Name: network_prefixes_prefix_range_idx; Type: INDEX; Schema: sys; Owner: yeti; Tablespace: 
--

CREATE INDEX network_prefixes_prefix_range_idx ON network_prefixes USING gist (((prefix)::public.prefix_range));


SET search_path = billing, pg_catalog;

--
-- TOC entry 4537 (class 2606 OID 18465)
-- Name: accounts_contractor_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_contractor_id_fkey FOREIGN KEY (contractor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4536 (class 2606 OID 20744)
-- Name: accounts_invoice_period_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_invoice_period_id_fkey FOREIGN KEY (customer_invoice_period_id) REFERENCES invoice_periods(id);


--
-- TOC entry 4538 (class 2606 OID 24427)
-- Name: accounts_timezone_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_timezone_id_fkey FOREIGN KEY (timezone_id) REFERENCES sys.timezones(id);


--
-- TOC entry 4539 (class 2606 OID 22757)
-- Name: accounts_vendor_invoice_period_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY accounts
    ADD CONSTRAINT accounts_vendor_invoice_period_id_fkey FOREIGN KEY (vendor_invoice_period_id) REFERENCES invoice_periods(id);


--
-- TOC entry 4562 (class 2606 OID 18470)
-- Name: invoices_account_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY invoices
    ADD CONSTRAINT invoices_account_id_fkey FOREIGN KEY (account_id) REFERENCES accounts(id);


--
-- TOC entry 4563 (class 2606 OID 18475)
-- Name: invoices_contractor_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY invoices
    ADD CONSTRAINT invoices_contractor_id_fkey FOREIGN KEY (contractor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4564 (class 2606 OID 18480)
-- Name: payments_account_id_fkey; Type: FK CONSTRAINT; Schema: billing; Owner: yeti
--

ALTER TABLE ONLY payments
    ADD CONSTRAINT payments_account_id_fkey FOREIGN KEY (account_id) REFERENCES accounts(id);


SET search_path = class4, pg_catalog;

--
-- TOC entry 4591 (class 2606 OID 18868)
-- Name: blacklist_items_blacklist_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY blacklist_items
    ADD CONSTRAINT blacklist_items_blacklist_id_fkey FOREIGN KEY (blacklist_id) REFERENCES blacklists(id);


--
-- TOC entry 4565 (class 2606 OID 18485)
-- Name: codec_group_codecs_codec_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY codec_group_codecs
    ADD CONSTRAINT codec_group_codecs_codec_group_id_fkey FOREIGN KEY (codec_group_id) REFERENCES codec_groups(id);


--
-- TOC entry 4566 (class 2606 OID 18490)
-- Name: codec_group_codecs_codec_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY codec_group_codecs
    ADD CONSTRAINT codec_group_codecs_codec_id_fkey FOREIGN KEY (codec_id) REFERENCES codecs(id);


--
-- TOC entry 4567 (class 2606 OID 18495)
-- Name: customers_auth_account_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_account_id_fkey FOREIGN KEY (account_id) REFERENCES billing.accounts(id);


--
-- TOC entry 4568 (class 2606 OID 18500)
-- Name: customers_auth_customer_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.contractors(id);


--
-- TOC entry 4569 (class 2606 OID 18505)
-- Name: customers_auth_diversion_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_diversion_policy_id_fkey FOREIGN KEY (diversion_policy_id) REFERENCES diversion_policy(id);


--
-- TOC entry 4575 (class 2606 OID 18889)
-- Name: customers_auth_dst_blacklist_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_dst_blacklist_id_fkey FOREIGN KEY (dst_blacklist_id) REFERENCES blacklists(id);


--
-- TOC entry 4570 (class 2606 OID 18510)
-- Name: customers_auth_dump_level_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_dump_level_id_fkey FOREIGN KEY (dump_level_id) REFERENCES dump_level(id);


--
-- TOC entry 4571 (class 2606 OID 18515)
-- Name: customers_auth_gateway_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_gateway_id_fkey FOREIGN KEY (gateway_id) REFERENCES gateways(id);


--
-- TOC entry 4572 (class 2606 OID 18520)
-- Name: customers_auth_pop_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_pop_id_fkey FOREIGN KEY (pop_id) REFERENCES sys.pops(id);


--
-- TOC entry 4573 (class 2606 OID 18525)
-- Name: customers_auth_rateplan_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_rateplan_id_fkey FOREIGN KEY (rateplan_id) REFERENCES rateplans(id);


--
-- TOC entry 4574 (class 2606 OID 20454)
-- Name: customers_auth_routing_plan_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_routing_plan_id_fkey FOREIGN KEY (routing_plan_id) REFERENCES routing_plans(id);


--
-- TOC entry 4576 (class 2606 OID 18894)
-- Name: customers_auth_src_blacklist_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY customers_auth
    ADD CONSTRAINT customers_auth_src_blacklist_id_fkey FOREIGN KEY (src_blacklist_id) REFERENCES blacklists(id);


--
-- TOC entry 4542 (class 2606 OID 21275)
-- Name: destinations_profit_control_mode_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY destinations
    ADD CONSTRAINT destinations_profit_control_mode_id_fkey FOREIGN KEY (profit_control_mode_id) REFERENCES rate_profit_control_modes(id);


--
-- TOC entry 4540 (class 2606 OID 18535)
-- Name: destinations_rate_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY destinations
    ADD CONSTRAINT destinations_rate_policy_id_fkey FOREIGN KEY (rate_policy_id) REFERENCES destination_rate_policy(id);


--
-- TOC entry 4541 (class 2606 OID 18540)
-- Name: destinations_rateplan_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY destinations
    ADD CONSTRAINT destinations_rateplan_id_fkey FOREIGN KEY (rateplan_id) REFERENCES rateplans(id);


--
-- TOC entry 4543 (class 2606 OID 18545)
-- Name: dialpeers_account_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_account_id_fkey FOREIGN KEY (account_id) REFERENCES billing.accounts(id);


--
-- TOC entry 4544 (class 2606 OID 18550)
-- Name: dialpeers_gateway_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_gateway_group_id_fkey FOREIGN KEY (gateway_group_id) REFERENCES gateway_groups(id);


--
-- TOC entry 4545 (class 2606 OID 18555)
-- Name: dialpeers_gateway_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_gateway_id_fkey FOREIGN KEY (gateway_id) REFERENCES gateways(id);


--
-- TOC entry 4546 (class 2606 OID 18560)
-- Name: dialpeers_routing_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_routing_group_id_fkey FOREIGN KEY (routing_group_id) REFERENCES routing_groups(id);


--
-- TOC entry 4547 (class 2606 OID 18565)
-- Name: dialpeers_vendor_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY dialpeers
    ADD CONSTRAINT dialpeers_vendor_id_fkey FOREIGN KEY (vendor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4577 (class 2606 OID 18570)
-- Name: disconnect_code_namespace_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_code
    ADD CONSTRAINT disconnect_code_namespace_id_fkey FOREIGN KEY (namespace_id) REFERENCES disconnect_code_namespace(id);


--
-- TOC entry 4578 (class 2606 OID 18575)
-- Name: disconnect_code_policy_codes_code_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_policy_code
    ADD CONSTRAINT disconnect_code_policy_codes_code_id_fkey FOREIGN KEY (code_id) REFERENCES disconnect_code(id);


--
-- TOC entry 4579 (class 2606 OID 18580)
-- Name: disconnect_code_policy_codes_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY disconnect_policy_code
    ADD CONSTRAINT disconnect_code_policy_codes_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES disconnect_policy(id);


--
-- TOC entry 4580 (class 2606 OID 18585)
-- Name: gateway_groups_contractor_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateway_groups
    ADD CONSTRAINT gateway_groups_contractor_id_fkey FOREIGN KEY (vendor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4552 (class 2606 OID 18590)
-- Name: gateways_codec_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_codec_group_id_fkey FOREIGN KEY (codec_group_id) REFERENCES codec_groups(id);


--
-- TOC entry 4553 (class 2606 OID 18595)
-- Name: gateways_contractor_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_contractor_id_fkey FOREIGN KEY (contractor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4554 (class 2606 OID 18600)
-- Name: gateways_diversion_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_diversion_policy_id_fkey FOREIGN KEY (diversion_policy_id) REFERENCES diversion_policy(id);


--
-- TOC entry 4550 (class 2606 OID 20386)
-- Name: gateways_dtmf_receive_mode_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_dtmf_receive_mode_id_fkey FOREIGN KEY (dtmf_receive_mode_id) REFERENCES dtmf_receive_modes(id);


--
-- TOC entry 4551 (class 2606 OID 20400)
-- Name: gateways_dtmf_send_mode_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_dtmf_send_mode_id_fkey FOREIGN KEY (dtmf_send_mode_id) REFERENCES dtmf_send_modes(id);


--
-- TOC entry 4555 (class 2606 OID 18605)
-- Name: gateways_gateway_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_gateway_group_id_fkey FOREIGN KEY (gateway_group_id) REFERENCES gateway_groups(id);


--
-- TOC entry 4556 (class 2606 OID 18615)
-- Name: gateways_orig_disconnect_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_orig_disconnect_policy_id_fkey FOREIGN KEY (orig_disconnect_policy_id) REFERENCES disconnect_policy(id);


--
-- TOC entry 4557 (class 2606 OID 18620)
-- Name: gateways_pop_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_pop_id_fkey FOREIGN KEY (pop_id) REFERENCES sys.pops(id);


--
-- TOC entry 4558 (class 2606 OID 18625)
-- Name: gateways_sdp_alines_filter_type_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_sdp_alines_filter_type_id_fkey FOREIGN KEY (sdp_alines_filter_type_id) REFERENCES filter_types(id);


--
-- TOC entry 4561 (class 2606 OID 18807)
-- Name: gateways_sdp_c_location_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_sdp_c_location_id_fkey FOREIGN KEY (sdp_c_location_id) REFERENCES sdp_c_location(id);


--
-- TOC entry 4548 (class 2606 OID 20081)
-- Name: gateways_sensor_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_sensor_id_fkey FOREIGN KEY (sensor_id) REFERENCES sys.sensors(id);


--
-- TOC entry 4549 (class 2606 OID 20087)
-- Name: gateways_sensor_level_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_sensor_level_id_fkey FOREIGN KEY (sensor_level_id) REFERENCES sys.sensor_levels(id);


--
-- TOC entry 4559 (class 2606 OID 18635)
-- Name: gateways_session_refresh_method_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_session_refresh_method_id_fkey FOREIGN KEY (session_refresh_method_id) REFERENCES session_refresh_methods(id);


--
-- TOC entry 4560 (class 2606 OID 18640)
-- Name: gateways_term_disconnect_policy_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY gateways
    ADD CONSTRAINT gateways_term_disconnect_policy_id_fkey FOREIGN KEY (term_disconnect_policy_id) REFERENCES disconnect_policy(id);


--
-- TOC entry 4612 (class 2606 OID 23695)
-- Name: lnp_cache_database_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY lnp_cache
    ADD CONSTRAINT lnp_cache_database_id_fkey FOREIGN KEY (database_id) REFERENCES lnp_databases(id);


--
-- TOC entry 4611 (class 2606 OID 23677)
-- Name: lnp_databases_driver_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY lnp_databases
    ADD CONSTRAINT lnp_databases_driver_id_fkey FOREIGN KEY (driver_id) REFERENCES sys.lnp_database_drivers(id);


--
-- TOC entry 4607 (class 2606 OID 23192)
-- Name: number_list_items_list_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY number_list_items
    ADD CONSTRAINT number_list_items_list_id_fkey FOREIGN KEY (list_id) REFERENCES number_lists(id);


--
-- TOC entry 4581 (class 2606 OID 21350)
-- Name: rateplans_profit_control_mode_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY rateplans
    ADD CONSTRAINT rateplans_profit_control_mode_id_fkey FOREIGN KEY (profit_control_mode_id) REFERENCES rate_profit_control_modes(id);


--
-- TOC entry 4582 (class 2606 OID 18645)
-- Name: registrations_node_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY registrations
    ADD CONSTRAINT registrations_node_id_fkey FOREIGN KEY (node_id) REFERENCES sys.nodes(id);


--
-- TOC entry 4583 (class 2606 OID 18650)
-- Name: registrations_pop_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY registrations
    ADD CONSTRAINT registrations_pop_id_fkey FOREIGN KEY (pop_id) REFERENCES sys.pops(id);


--
-- TOC entry 4599 (class 2606 OID 20449)
-- Name: routing_plan_groups_routing_group_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_groups
    ADD CONSTRAINT routing_plan_groups_routing_group_id_fkey FOREIGN KEY (routing_group_id) REFERENCES routing_groups(id);


--
-- TOC entry 4598 (class 2606 OID 20444)
-- Name: routing_plan_groups_routing_plan_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_groups
    ADD CONSTRAINT routing_plan_groups_routing_plan_id_fkey FOREIGN KEY (routing_plan_id) REFERENCES routing_plans(id);


--
-- TOC entry 4613 (class 2606 OID 23711)
-- Name: routing_plan_lnp_rules_database_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_lnp_rules
    ADD CONSTRAINT routing_plan_lnp_rules_database_id_fkey FOREIGN KEY (database_id) REFERENCES lnp_databases(id);


--
-- TOC entry 4604 (class 2606 OID 22687)
-- Name: routing_plan_static_routes_routing_plan_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_static_routes
    ADD CONSTRAINT routing_plan_static_routes_routing_plan_id_fkey FOREIGN KEY (routing_plan_id) REFERENCES routing_plans(id);


--
-- TOC entry 4605 (class 2606 OID 22692)
-- Name: routing_plan_static_routes_vendor_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plan_static_routes
    ADD CONSTRAINT routing_plan_static_routes_vendor_id_fkey FOREIGN KEY (vendor_id) REFERENCES public.contractors(id);


--
-- TOC entry 4597 (class 2606 OID 20429)
-- Name: routing_plans_sorting_id_fkey; Type: FK CONSTRAINT; Schema: class4; Owner: yeti
--

ALTER TABLE ONLY routing_plans
    ADD CONSTRAINT routing_plans_sorting_id_fkey FOREIGN KEY (sorting_id) REFERENCES sortings(id);


SET search_path = notifications, pg_catalog;

--
-- TOC entry 4609 (class 2606 OID 23309)
-- Name: contacts_admin_user_id_fkey; Type: FK CONSTRAINT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_admin_user_id_fkey FOREIGN KEY (admin_user_id) REFERENCES gui.admin_users(id);


--
-- TOC entry 4608 (class 2606 OID 23304)
-- Name: contacts_contractor_id_fkey; Type: FK CONSTRAINT; Schema: notifications; Owner: yeti
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT contacts_contractor_id_fkey FOREIGN KEY (contractor_id) REFERENCES public.contractors(id);


SET search_path = public, pg_catalog;

--
-- TOC entry 4584 (class 2606 OID 23328)
-- Name: contractors_smtp_connection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: yeti
--

ALTER TABLE ONLY contractors
    ADD CONSTRAINT contractors_smtp_connection_id_fkey FOREIGN KEY (smtp_connection_id) REFERENCES sys.smtp_connections(id);


SET search_path = reports, pg_catalog;

--
-- TOC entry 4585 (class 2606 OID 18660)
-- Name: cdr_custom_report_data_report_id_fkey; Type: FK CONSTRAINT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_custom_report_data
    ADD CONSTRAINT cdr_custom_report_data_report_id_fkey FOREIGN KEY (report_id) REFERENCES cdr_custom_report(id);


--
-- TOC entry 4586 (class 2606 OID 18665)
-- Name: cdr_interval_report_aggregator_id_fkey; Type: FK CONSTRAINT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_interval_report
    ADD CONSTRAINT cdr_interval_report_aggregator_id_fkey FOREIGN KEY (aggregator_id) REFERENCES cdr_interval_report_aggrerator(id);


--
-- TOC entry 4587 (class 2606 OID 18670)
-- Name: cdr_interval_report_data_report_id_fkey; Type: FK CONSTRAINT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY cdr_interval_report_data
    ADD CONSTRAINT cdr_interval_report_data_report_id_fkey FOREIGN KEY (report_id) REFERENCES cdr_interval_report(id);


--
-- TOC entry 4588 (class 2606 OID 18675)
-- Name: report_vendors_data_report_id_fkey; Type: FK CONSTRAINT; Schema: reports; Owner: yeti
--

ALTER TABLE ONLY report_vendors_data
    ADD CONSTRAINT report_vendors_data_report_id_fkey FOREIGN KEY (report_id) REFERENCES report_vendors(id);


SET search_path = switch2, pg_catalog;

--
-- TOC entry 4594 (class 2606 OID 19676)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch2; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch3, pg_catalog;

--
-- TOC entry 4596 (class 2606 OID 20206)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch3; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch4, pg_catalog;

--
-- TOC entry 4600 (class 2606 OID 20565)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch4; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch5, pg_catalog;

--
-- TOC entry 4601 (class 2606 OID 21258)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch5; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch6, pg_catalog;

--
-- TOC entry 4606 (class 2606 OID 23059)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch6; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch7, pg_catalog;

--
-- TOC entry 4610 (class 2606 OID 23458)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch7; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = switch8, pg_catalog;

--
-- TOC entry 4614 (class 2606 OID 23871)
-- Name: resource_type_action_id_fkey; Type: FK CONSTRAINT; Schema: switch8; Owner: yeti
--

ALTER TABLE ONLY resource_type
    ADD CONSTRAINT resource_type_action_id_fkey FOREIGN KEY (action_id) REFERENCES resource_action(id);


SET search_path = sys, pg_catalog;

--
-- TOC entry 4603 (class 2606 OID 22626)
-- Name: active_currencies_currency_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY active_currencies
    ADD CONSTRAINT active_currencies_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES currencies(id);


--
-- TOC entry 4602 (class 2606 OID 22606)
-- Name: currencies_country_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY currencies
    ADD CONSTRAINT currencies_country_id_fkey FOREIGN KEY (country_id) REFERENCES countries(id);


--
-- TOC entry 4589 (class 2606 OID 18695)
-- Name: events_node_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_node_id_fkey FOREIGN KEY (node_id) REFERENCES nodes(id);


--
-- TOC entry 4593 (class 2606 OID 19566)
-- Name: network_prefixes_country_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY network_prefixes
    ADD CONSTRAINT network_prefixes_country_id_fkey FOREIGN KEY (country_id) REFERENCES countries(id);


--
-- TOC entry 4592 (class 2606 OID 19561)
-- Name: network_prefixes_network_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY network_prefixes
    ADD CONSTRAINT network_prefixes_network_id_fkey FOREIGN KEY (network_id) REFERENCES networks(id);


--
-- TOC entry 4590 (class 2606 OID 18700)
-- Name: node_pop_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY nodes
    ADD CONSTRAINT node_pop_id_fkey FOREIGN KEY (pop_id) REFERENCES pops(id);


--
-- TOC entry 4595 (class 2606 OID 20066)
-- Name: sensors_mode_id_fkey; Type: FK CONSTRAINT; Schema: sys; Owner: yeti
--

ALTER TABLE ONLY sensors
    ADD CONSTRAINT sensors_mode_id_fkey FOREIGN KEY (mode_id) REFERENCES sensor_modes(id);


--
-- TOC entry 4730 (class 0 OID 0)
-- Dependencies: 14
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


SET search_path = pgq, pg_catalog;

--
-- TOC entry 4794 (class 0 OID 0)
-- Dependencies: 490
-- Name: event_1; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON TABLE event_1 FROM PUBLIC;
GRANT SELECT ON TABLE event_1 TO PUBLIC;


--
-- TOC entry 4795 (class 0 OID 0)
-- Dependencies: 491
-- Name: event_1_0; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON TABLE event_1_0 FROM PUBLIC;
GRANT SELECT ON TABLE event_1_0 TO PUBLIC;


--
-- TOC entry 4796 (class 0 OID 0)
-- Dependencies: 492
-- Name: event_1_1; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON TABLE event_1_1 FROM PUBLIC;
GRANT SELECT ON TABLE event_1_1 TO PUBLIC;


--
-- TOC entry 4797 (class 0 OID 0)
-- Dependencies: 493
-- Name: event_1_2; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON TABLE event_1_2 FROM PUBLIC;
GRANT SELECT ON TABLE event_1_2 TO PUBLIC;


--
-- TOC entry 4798 (class 0 OID 0)
-- Dependencies: 489
-- Name: event_1_id_seq; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON SEQUENCE event_1_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE event_1_id_seq FROM yeti;
GRANT ALL ON SEQUENCE event_1_id_seq TO yeti;
GRANT SELECT ON SEQUENCE event_1_id_seq TO PUBLIC;
GRANT USAGE ON SEQUENCE event_1_id_seq TO pgq_admin;


--
-- TOC entry 4799 (class 0 OID 0)
-- Dependencies: 488
-- Name: event_1_tick_seq; Type: ACL; Schema: pgq; Owner: yeti
--

REVOKE ALL ON SEQUENCE event_1_tick_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE event_1_tick_seq FROM yeti;
GRANT ALL ON SEQUENCE event_1_tick_seq TO yeti;
GRANT SELECT ON SEQUENCE event_1_tick_seq TO PUBLIC;


-- Completed on 2015-07-04 23:05:15 EEST

--
-- PostgreSQL database dump complete
--

